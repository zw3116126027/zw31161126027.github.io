[{"title":"HTML盒子模型","url":"/posts/861f35f2/","content":"<h1 id=\"关于HTML盒子模型的笔记\"><a href=\"#关于HTML盒子模型的笔记\" class=\"headerlink\" title=\"关于HTML盒子模型的笔记\"></a>关于HTML盒子模型的笔记</h1><h3 id=\"样式图\"><a href=\"#样式图\" class=\"headerlink\" title=\"样式图\"></a>样式图</h3><p><img src=\"/posts/861f35f2/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E9%A2%84%E8%A7%88.png\"></p>\n<p>建议：连接css文件(在css打代码更方便些)<br>  </p><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./css/master.css\"</span>&gt;</span>  <span class=\"comment\">&lt;!-- herf：实际文件地址--&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><ul>\n<li>浏览器默认样式</li>\n<li>所有元素都是矩形</li>\n<li>margin: 外边距</li>\n<li>border: 边框，有很多样式，直角、圆角、颜色等</li>\n<li>padding: 内边距</li>\n<li>content: 内容，就是本身的内容，比如一段话</li>\n</ul>\n<p>在浏览器默认所有的元素和边缘有空白是怎么回事呢？</p>\n<p><code>其实就是浏览器默认的边距样式，而且不一样的浏览器，样式也可能不一样，我们可以吧默认样式去掉。</code></p>\n<figure class=\"highlight css\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">* {  <span class=\"comment\">/*默认通配符 匹配所有标签 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;  <span class=\"comment\">/*去掉外边距*/</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"说一说盒子\"><a href=\"#说一说盒子\" class=\"headerlink\" title=\"说一说盒子\"></a>说一说盒子</h3><p>所有界面的元素都可以看出一个盒子，盒子模型就是包围内容的一个盒子。<br><img src=\"/posts/861f35f2/1.png\"></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight css\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>{</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;              <span class=\"comment\">/*盒子的大小，高宽也就是一个矩形*/</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aqua;    <span class=\"comment\">/*背景颜色*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;             <span class=\"comment\">/*内边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">300px</span>;             <span class=\"comment\">/*外边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid black;  <span class=\"comment\">/*边框样式为实线，颜色为黑色*/</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>在设置了，<code>内边距</code>，<code>边框</code>，<code>外边距</code> 我们可以看出盒子似乎大了，不是一开始设置的300*150大小了，这是因为我们增加了内边距边框，但是为什么增加内边距边框,就导致盒子变大了呢？因为它默认的规则是，所有增加的边距边框都往外加！！！在内容高度宽度的基础上往外加！</p>\n<p>我们可以设置box-sizing:<br>一般默认的box-sizing为 content-box<br>我们设置为 border-box</p>\n<h3 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h3><p><img src=\"/posts/861f35f2/2.png\"></p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight css\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">*{</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>自己的通俗理解:<br><code>也就是比如说，如果要建设一个房子,默认要装修就是在建好的房子里面装修，但是 未设置 box-sizing 就是反着来在初始房子大小往外扩建装修,但如果设置了box-sizing 为 border-box 就变成了在房子里面装修了，width:300px heigit:150 也就是基础房子的大小(盒子)</code></p>\n","categories":["前端"],"tags":["前端"]},{"title":"ECMAScript 6 笔记","url":"/posts/e9aa05e4/","content":"<p>注：本文主要引用 <strong><a href=\"https://es6.ruanyifeng.com/\">ECMAScript 6</a>（阮一峰）</strong></p>\n<h1 id=\"let-和-const-命令\"><a href=\"#let-和-const-命令\" class=\"headerlink\" title=\"let 和 const 命令\"></a>let 和 const 命令</h1><h2 id=\"let-命令\"><a href=\"#let-命令\" class=\"headerlink\" title=\"let 命令\"></a>let 命令</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，<strong>只在<code>let</code>命令所在的代码块内有效</strong>。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a) <span class=\"comment\">// ReferenceError: a is not defined.</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b) <span class=\"comment\">// 1</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块有效。</p>\n<p><code>for</code>循环的计数器，就很合适使用<code>let</code>命令。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++){</span><br><span class=\"line\">    </span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)     <span class=\"comment\">//10</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(i)  //  如果把变量定义为:let  ReferenceError: i is not defined</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h3 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h3><p><code>var</code>命令会发生“变量提升”现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p>\n<p>为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var 的情况</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let 的情况</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bar); <span class=\"comment\">// 报错ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码中，变量<code>foo</code>用<code>var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p>\n<hr>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码中，存在全局变量<code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错。</p>\n<p>ES6 明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"comment\">// TDZ开始</span></span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp); <span class=\"comment\">// 123</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>ES6 规定暂时性死区和<code>let</code>、<code>const</code>语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。</p>\n<p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p>\n<h3 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h3><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>因此，不能在函数内部重新声明参数。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">arg</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">func</span>() <span class=\"comment\">// 报错   作用域</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">arg</span>) {</span><br><span class=\"line\">  {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title function_\">func</span>() <span class=\"comment\">// 不报错</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h2><h3 id=\"为什么需要块级作用域？\"><a href=\"#为什么需要块级作用域？\" class=\"headerlink\" title=\"为什么需要块级作用域？\"></a>为什么需要块级作用域？</h3><p><strong><font color=\"ondine\">ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</font></strong></p>\n<p><strong>第一种场景</strong>，内层变量可能会覆盖外层变量。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tmp);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tmp = <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>(); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码的原意是，<code>if</code>代码块的外部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。但是，函数<code>f</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量。</p>\n<p><strong>第二种场景</strong>，用来计数的循环变量泄露为全局变量。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(s[i]);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p>\n<h3 id=\"ES6-的块级作用域\"><a href=\"#ES6-的块级作用域\" class=\"headerlink\" title=\"ES6 的块级作用域\"></a>ES6 的块级作用域</h3><p><code>let</code>实际上为 JavaScript 新增了块级作用域。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f1</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(n); <span class=\"comment\">// 5</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面的函数有两个代码块，都声明了变量<code>n</code>，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用<code>var</code>定义变量<code>n</code>，最后输出的值才是 10。</p>\n<p><strong>ES6 允许块级作用域的任意嵌套。</strong></p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{{{{</span><br><span class=\"line\">  {<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>}</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(insane); <span class=\"comment\">// 报错</span></span><br><span class=\"line\">}}}};</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。</p>\n<p>内层作用域可以定义外层作用域的同名变量。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{{{{</span><br><span class=\"line\">  <span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>;</span><br><span class=\"line\">  {<span class=\"keyword\">let</span> insane = <span class=\"string\">'Hello World'</span>}</span><br><span class=\"line\">}}}};</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h2 id=\"const-命令\"><a href=\"#const-命令\" class=\"headerlink\" title=\"const 命令\"></a>const 命令</h2><h3 id=\"基本用法-1\"><a href=\"#基本用法-1\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PI</span> = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">PI</span> <span class=\"comment\">// 3.1415</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">PI</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码表明改变常量的值会报错。</p>\n<p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p>\n<p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable constant_\">MAX</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">MAX</span> <span class=\"comment\">// Uncaught ReferenceError: MAX is not defined</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">MAX</span>); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable constant_\">MAX</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码在常量<code>MAX</code>声明之前就调用，结果报错。</p>\n<p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下两行都会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">\"Goodbye!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">30</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"本质\"><a href=\"#本质\" class=\"headerlink\" title=\"本质\"></a>本质</h3><p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p>\n<figure class=\"highlight js\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = {};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></span><br><span class=\"line\">foo.<span class=\"property\">prop</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\">foo.<span class=\"property\">prop</span> <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></span><br><span class=\"line\">foo = {}; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码中，常量<code>foo</code>储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把<code>foo</code>指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.<span class=\"title function_\">push</span>(<span class=\"string\">'Hello'</span>); <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a.<span class=\"property\">length</span> = <span class=\"number\">0</span>;    <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a = [<span class=\"string\">'Dave'</span>];    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码中，常量<code>a</code>是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给<code>a</code>，就会报错。</p>\n<p>如果真的想将对象冻结，应该使用<code>Object.freeze</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>({});</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></span><br><span class=\"line\">foo.<span class=\"property\">prop</span> = <span class=\"number\">123</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上面代码中，常量<code>foo</code>指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。</p>\n<p>除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。</p>\n<figure class=\"highlight javascript\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title function_\">constantize</span> = (<span class=\"params\">obj</span>) =&gt; {</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(obj);</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj).<span class=\"title function_\">forEach</span>( <span class=\"function\">(<span class=\"params\">key, i</span>) =&gt;</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">'object'</span> ) {</span><br><span class=\"line\">      <span class=\"title function_\">constantize</span>( obj[key] );</span><br><span class=\"line\">    }</span><br><span class=\"line\">  });</span><br><span class=\"line\">};</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"ES6-声明变量的六种方法\"><a href=\"#ES6-声明变量的六种方法\" class=\"headerlink\" title=\"ES6 声明变量的六种方法\"></a>ES6 声明变量的六种方法</h3><p><strong>ES5 只有两种声明变量的方法</strong>：<code>var</code>命令<strong>和</strong><code>function</code>命令<strong>。ES6 除了添加</strong><code>let</code><strong>和</strong><code>const</code>命令<strong>，后面章节还会提到，另外两种声明变量的方法：</strong><code>import</code>命令<strong>和</strong><code>class</code>命令。所以，ES6 一共有 6 种声明变量的方法。</p>\n<hr>\n","categories":["前端"],"tags":["前端"]},{"title":"Hadoop全分布式搭建","url":"/posts/803094f7/","content":"<h1 id=\"虚拟机环境准备\"><a href=\"#虚拟机环境准备\" class=\"headerlink\" title=\"虚拟机环境准备\"></a>虚拟机环境准备</h1><p><strong>例如：三台主机，nano为Master(主人)，其他主机为Slave(奴隶)</strong></p>\n<table>\n<thead>\n<tr>\n<th>我的计算机</th>\n<th>nano</th>\n<th>nano-slave1</th>\n<th>nano-slave1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP</td>\n<td>192.168.100.200</td>\n<td>192.168.100.201</td>\n<td>192.168.100.202</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>hosts(域名)</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n</tr>\n<tr>\n<td>hadoop</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n</tr>\n</tbody></table>\n<p><strong>先确保安装了jdk</strong></p>\n<p><a href=\"https://blog-zw.top/posts/cccf557c/\">在Linux里安装jdk</a></p>\n<h2 id=\"配置hostname-主机名\"><a href=\"#配置hostname-主机名\" class=\"headerlink\" title=\"配置hostname(主机名)\"></a>配置hostname(主机名)</h2><figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]vim /etc/hostname</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>主机名改为：master 其余主机名改为，slave1、slave2</code></p>\n<h2 id=\"SSH免密登录\"><a href=\"#SSH免密登录\" class=\"headerlink\" title=\"SSH免密登录\"></a>SSH免密登录</h2><ol>\n<li><strong>生成密钥对</strong></li>\n</ol>\n<p><code>默认使用rsa算法。可以使用-t参数指定如ssh-keygen -t dsa 使用dsa算法加密</code></p>\n<p><strong><font color=\"ondine\">配置好了就可以使用 scp 命令分发文件至其他主机</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>敲三个回车</strong></p>\n<img src=\"/posts/803094f7/2.png\" style=\"zoom:80%;\">\n\n<ol start=\"2\">\n<li><strong>把公钥传到需要免密登录的机器上</strong></li>\n</ol>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# ssh-copy-id 192.168.100.200</span><br><span class=\"line\">[root@nano ~]# ssh-copy-id 192.168.100.201</span><br><span class=\"line\">[root@nano ~]# ssh-copy-id 192.168.100.202</span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"/posts/803094f7/3.png\" style=\"zoom:80%;\">\n\n<blockquote>\n<p>输入 <strong>yes</strong> 和  要<strong>免密登录主机的密码</strong></p>\n</blockquote>\n<p><strong><font color=\"red\">注意：还需要在nano-slave1，nano-slave2采用相同的方法配置免密登录。</font></strong></p>\n<p><strong>以上免密就配置好了！</strong></p>\n<p><strong><font color=\"ondine\">主机之间互相访问方法： ssh 192.168.100.XXX&nbsp; &nbsp;PS:&nbsp; 要想更方便配置和访问，可以将IP换成域名(简写)的方式访问，如下步骤：</font></strong></p>\n<h2 id=\"配置hosts-域名\"><a href=\"#配置hosts-域名\" class=\"headerlink\" title=\"配置hosts(域名)\"></a>配置hosts(域名)</h2><p>为了<strong>ssh</strong>方便配置和访问，将IP改成域名的方式访问,<strong>不要将原内容删除</strong>追加填写以下内容</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]vim /etc/hosts</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">192.168.100.200 master</span><br><span class=\"line\">192.168.100.201 slave1</span><br><span class=\"line\">192.168.100.202 slave2</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>三台主机都要配置(因为后面步骤配置更方便)  使用scp 命令分发hosts至其他主机 ：</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# scp -r /etc/hosts root@slave1:/etc/</span><br><span class=\"line\">[root@nano ~]# scp -r /etc/hosts root@slave2:/etc/</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Hadoop环境准备\"><a href=\"#Hadoop环境准备\" class=\"headerlink\" title=\"Hadoop环境准备\"></a><strong>Hadoop环境准备</strong></h1><h2 id=\"集群配置JAVA环境\"><a href=\"#集群配置JAVA环境\" class=\"headerlink\" title=\"集群配置JAVA环境\"></a>集群配置JAVA环境</h2><ol>\n<li><strong>集群每台都得配置Java环境，如果虚拟机不是最小化安装(图形化界面自带Open JDK)，则要卸载虚拟机自带的JDK</strong></li>\n</ol>\n<p><a href=\"https://jingyan.baidu.com/article/ed15cb1b2457d05be36981f2.html\">Linux上如何删除自带的OpenJDK</a></p>\n <figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~] rpm -qa | grep -i java | xargs -n1 rpm -e --nodeps </span><br><span class=\"line\"> Ø  rpm -qa：查询所安装的所有rpm软件包</span><br><span class=\"line\"> Ø  grep -i：忽略大小写</span><br><span class=\"line\"> Ø  xargs -n1：表示每次只传递一个参数</span><br><span class=\"line\"> Ø  rpm -e –nodeps：强制卸载软件</span><br></pre></td></tr></tbody></table></figure>\n\n<p>未配置JDK建议按照： <a href=\"https://blog-zw.top/posts/cccf557c/\">在Linux里安装jdk</a></p>\n<ol start=\"2\">\n<li><strong>如果单台配置好了java环境，可以使用scp命令分发文件至其他虚拟机：</strong></li>\n</ol>\n<p><a href=\"https://www.cnblogs.com/danmiao/p/9963170.html\">scp命令详解</a></p>\n<blockquote>\n<p>scp -r  要拷贝的文件路径/名称   目的地用户@主机:目的地路径/名称</p>\n</blockquote>\n<p><strong><font color=\"orange\">注意 目的地路径文件夹需存在！</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# scp -r  /opt/module/jdk1.8.0_181 root@192.168.100.201:/opt/module</span><br><span class=\"line\"></span><br><span class=\"line\">如果前面步骤配置好了域名(hosts)可以把地址简写如：</span><br><span class=\"line\">[root@nano ~]# scp -r  /opt/module/jdk1.8.0_181 root@slave1:/opt/module</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>最后要确保三台都配置了Java环境,再进行下一步!!!</strong></p>\n<h2 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h2><p>分别登录3台机器，关闭防火墙。</p>\n<p><a href=\"https://blog.51cto.com/u_9153232/2318194\">hadoop安装为什么需要关闭防火墙?</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44192363/article/details/116810814?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166006173416782184676521%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166006173416782184676521&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-116810814-null-null.142%5Ev40%5Epc_rank_34_1,185%5Ev2%5Econtrol&amp;utm_term=Linux%20%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99&amp;spm=1018.2226.3001.4187\">Linux关闭防火墙命令</a></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# systemctl disable firewalld  //永久关闭防火墙</span><br><span class=\"line\">[root@nano ~]# systemctl stop firewalld   //禁用防火墙</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">systemctl status firewalld 查看防火状态</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"准备Hadoop-tar-gz安装包\"><a href=\"#准备Hadoop-tar-gz安装包\" class=\"headerlink\" title=\"准备Hadoop.tar.gz安装包\"></a><strong>准备Hadoop.tar.gz安装包</strong></h2><p><a href=\"https://archive.apache.org/dist/hadoop/common/\">Hadoop下载</a></p>\n<blockquote>\n<p>例：下载  hadoop-2.7.7.tar.gz版本</p>\n</blockquote>\n<h1 id=\"安装Hadoop\"><a href=\"#安装Hadoop\" class=\"headerlink\" title=\"安装Hadoop\"></a>安装Hadoop</h1><h2 id=\"Hadoop-环境变量\"><a href=\"#Hadoop-环境变量\" class=\"headerlink\" title=\"Hadoop 环境变量\"></a>Hadoop 环境变量</h2><p><strong>三台主机需创建 /opt/module 目录</strong></p>\n<ul>\n<li><blockquote>\n<p><strong>mkdir /opt/module</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li><strong>进入到安装包目录下，解压安装包到/opt/module目录</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>tar -zxvf hadoop-2.7.7.tar.gz  -C /opt/module/</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>配置Hadoop环境配置</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>[root@nano ~]# vim /etc/profile</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>export HADOOP_HOME=/opt/module/hadoop-2.7.7</strong>    —实际安装包路径</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>export PATH=$PATH:$HADOOP_HOME/bin</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>export PATH=$PATH:$HADOOP_HOME/sbin</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>source /etc/profile</strong>      —-重新加载配置文件</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Hadoop文件目录结构\"><a href=\"#Hadoop文件目录结构\" class=\"headerlink\" title=\"Hadoop文件目录结构\"></a>Hadoop文件目录结构</h2><ul>\n<li>bin目录：存放对Hadoop相关服务（hdfs，yarn，mapred）进行操作的脚本</li>\n<li>etc目录：Hadoop的配置文件目录，存放Hadoop的配置文件</li>\n<li>lib目录：存放Hadoop的本地库（对数据进行压缩解压缩功能）</li>\n<li>sbin目录：存放启动或停止Hadoop相关服务的脚本</li>\n<li>share目录：存放Hadoop的依赖jar包、文档、和官方案例</li>\n</ul>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p><strong><font color=\"red\">【hadoop配置文件存放在hadoop安装路径的Hadoop-2.7.7/etc/hadoop目录下】</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# cd /opt/module/hadoop-2.7.7/etc/hadoop/</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"修改hadoop-env-sh\"><a href=\"#修改hadoop-env-sh\" class=\"headerlink\" title=\"修改hadoop-env.sh\"></a>修改hadoop-env.sh</h3><p> 指定JDK的安装位置</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/opt/module/jdk1.8.0_181</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Core：core-site-xml\"><a href=\"#Core：core-site-xml\" class=\"headerlink\" title=\"Core：core-site.xml\"></a>Core：core-site.xml</h3><p><strong>回到Hadoop-2.7.7安装目录，创建 data目录</strong></p>\n<p><img src=\"/posts/803094f7/6.png\"></p>\n<p><strong>继续进入配置文件目录</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano hadoop]# vim core-site.xml</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指定NameNode的地址 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://master:8020<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 指定hadoop数据的存储目录 ，data 目录需要创建 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/opt/module/hadoop-2.7.7/data<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置HDFS网页登录使用的静态用户为root --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.http.staticuser.user<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"HDFS：hdfs-site-xml\"><a href=\"#HDFS：hdfs-site-xml\" class=\"headerlink\" title=\"HDFS：hdfs-site.xml\"></a>HDFS：hdfs-site.xml</h3><figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano hadoop]# vim hdfs-site.xml</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">&lt;!-- nn web端访问地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>master:50070<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 2nn web端访问地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>slave2:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"YARN：yarn-site-xml\"><a href=\"#YARN：yarn-site-xml\" class=\"headerlink\" title=\"YARN：yarn-site.xml\"></a>YARN：yarn-site.xml</h3><figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano hadoop]# vim yarn-site.xml</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指定MR走shuffle --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 指定ResourceManager的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>slave1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>\t</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"MapReduce：mapred-site-xml\"><a href=\"#MapReduce：mapred-site-xml\" class=\"headerlink\" title=\"MapReduce：mapred-site.xml\"></a>MapReduce：mapred-site.xml</h3><p><strong>目录下找不到mapred-site.xml文件，需要将mapred-site.xml.template重命名为：mapred-site.xml</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano hadoop]# vim mapred-site.xml</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 指定MapReduce程序运行在Yarn上 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"/posts/803094f7/10.png\" style=\"zoom:50%;\">\n\n<h3 id=\"集群文件：slaves\"><a href=\"#集群文件：slaves\" class=\"headerlink\" title=\"集群文件：slaves\"></a>集群文件：slaves</h3><p>清空文件原来的内容,填写以下内容,这里对应域名:</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano hadoop]# vim slaves</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">master</span><br><span class=\"line\">slave1</span><br><span class=\"line\">slave2</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"复制至其他主机\"><a href=\"#复制至其他主机\" class=\"headerlink\" title=\"复制至其他主机\"></a>复制至其他主机</h2><ul>\n<li><strong>将 配置的 /root/.bash_profile  Hadoop环境变量文件复制到slave1,slave2,再更新环境配置</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# scp -r /etc/profile root@slave1:/etc/</span><br><span class=\"line\">[root@nano ~]# scp -r /etc/profile root@slave2:/etc/</span><br><span class=\"line\"></span><br><span class=\"line\">[root@nano ~]# ssh slave1</span><br><span class=\"line\">[root@nano-slave1 ~]# source /etc/profile</span><br><span class=\"line\">[root@nano-slave1 ~]# ssh slave2</span><br><span class=\"line\">[root@nano-slave2 ~]# source /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li><strong>将/opt/module 目录下的 jdk、hadoop 安装路径复制到salve1,salve2</strong></li>\n</ul>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# scp -r /opt/module root@slave1:/opt/</span><br><span class=\"line\">[root@nano ~]# scp -r /opt/module root@slave2:/opt/</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">scp 时间可能有点长，等一会~ 马上就启动了！</font></strong></p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><p><strong>主机格式化NameNode（第一次安装启动），全部集群格式化一遍</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@nano ~]# hdfs namenode -format</span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"/posts/803094f7/12.png\" style=\"zoom: 33%;\">\n\n<img src=\"/posts/803094f7/18.png\" style=\"zoom:25%;\">\n\n<img src=\"/posts/803094f7/19.png\" style=\"zoom:25%;\">\n\n<h2 id=\"节点参考规划表\"><a href=\"#节点参考规划表\" class=\"headerlink\" title=\"节点参考规划表\"></a><strong>节点参考规划表</strong></h2><table>\n<thead>\n<tr>\n<th></th>\n<th>master</th>\n<th>slave1</th>\n<th>slave2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HDFS</td>\n<td>NameNode DataNode</td>\n<td>DataNode</td>\n<td>SecondaryNameNode DataNode</td>\n</tr>\n<tr>\n<td>YARN</td>\n<td>NodeManager</td>\n<td>NodeManager ResourceManager</td>\n<td>NodeManager</td>\n</tr>\n</tbody></table>\n<h2 id=\"hdfs\"><a href=\"#hdfs\" class=\"headerlink\" title=\"hdfs\"></a><strong>hdfs</strong></h2><p><strong><font color=\"orange\">在master启动</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">start-dfs.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">stop-dfs.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"yarn\"><a href=\"#yarn\" class=\"headerlink\" title=\"yarn\"></a>yarn</h2><p><strong><font color=\"orange\">在slave1启动</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">start-yarn.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">stop-yarn.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<ol>\n<li><strong>jsp查看进程</strong></li>\n</ol>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">jsp</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">如果有节点未启动，三种启动方式介绍</font></strong><br>   <strong>方式一：逐一启动（实际生产环境中的启动方式）</strong></p>\n<pre><code> hadoop-daemon.sh   start|stop        namenode|datanode| journalnode\n yarn-daemon.sh     start |stop       resourcemanager|nodemanager\n</code></pre>\n<p>  <strong>方式二：分开启动</strong></p>\n<pre><code>start-dfs.sh\nstart-yarn.sh\n</code></pre>\n<p>   <strong>方式三：一起启动</strong></p>\n<pre><code>start-all.sh\n</code></pre>\n<p><strong>start-all.sh脚本：</strong></p>\n<pre><code> 说明：start-all.sh实际上是调用sbin/start-dfs.sh脚本和sbin/start-yarn.sh脚本\n</code></pre>\n<ol start=\"2\">\n<li><strong>在windows主机用web端口打开hdfs</strong></li>\n</ol>\n<p><strong><font color=\"orange\">需要关闭防火墙</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"http://192.168.100.200:50070/\">http://192.168.100.200:50070</a></p>\n<img src=\"/posts/803094f7/16.png\" style=\"zoom:50%;\">\n\n<img src=\"/posts/803094f7/17.png\" style=\"zoom:50%;\">\n\n<h1 id=\"测试运行wordcount\"><a href=\"#测试运行wordcount\" class=\"headerlink\" title=\"测试运行wordcount\"></a>测试运行wordcount</h1><p><strong><font color=\"orange\">确保集群都关闭防火墙</font></strong></p>\n<p><strong>编写Hello.txt内容：</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Hello Hadoop</span><br><span class=\"line\">Hellp Scala</span><br><span class=\"line\">Hello Java</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>上传至 hdfs:</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hadoop fs -put Hello.txt /wc</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>运行wordcount案例:</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hadoop jar /opt/module/hadoop-2.7.7/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.7.jar wordcount /wc/Hello.txt /put</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">HDFS&nbsp; &nbsp;put文件夹需不存在!</font></strong></p>\n<p><strong>查看运行结果:</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hadoop fs -cat /put/part-r-00000</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/803094f7/22.png\"></p>\n<h1 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h1><p><a href=\"https://blog.csdn.net/weixin_45988680/article/details/120635770\">DataNode 启动不了</a></p>\n<p><a href=\"https://blog.csdn.net/jancy_su/article/details/89163317?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-89163317-blog-51659080.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-89163317-blog-51659080.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=2\">hadoop遇到的坑</a></p>\n<p><a href=\"https://blog.csdn.net/xiaozelulu/article/details/80386771\">Hadoop分别启动namenode,datanode,secondarynamenode等服务</a></p>\n<p>更详细笔记来源<strong>黄老师</strong>，本所有步骤笔记根据<a href=\"https://www.yuque.com/books/share/5c23bbc1-da78-4445-a204-0a5bb294b72e/wcz67y#vxaMt\">Hadoop环境搭建</a>步骤完成，大功告成！</p>\n<hr>\n<center><font color=\"pink\">✿✿ヽ(°▽°)ノ✿完结撒花！</font></center>\n\n","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"IDEA中使用maven下载速度很慢时解决办法","url":"/posts/c5f9a8d6/","content":"<p><a href=\"https://blog.csdn.net/qq_37887131/article/details/89383051\">https://blog.csdn.net/qq_37887131/article/details/89383051</a></p>\n","categories":["IDEA"],"tags":["IDEA"]},{"title":"IDEA配置JDBC","url":"/posts/d2896619/","content":"<p><a href=\"https://blog.csdn.net/qq_34622844/article/details/102817852\">https://blog.csdn.net/qq_34622844/article/details/102817852</a></p>\n","categories":["IDEA"],"tags":["IDEA"]},{"title":"IO流","url":"/posts/fed4c017/","content":"<h3 id=\"流是输入输出的方式\"><a href=\"#流是输入输出的方式\" class=\"headerlink\" title=\"流是输入输出的方式\"></a>流是输入输出的方式</h3><p>流是一维单向的,一维的</p>\n<p>stream</p>\n<h3 id=\"流的基础类\"><a href=\"#流的基础类\" class=\"headerlink\" title=\"流的基础类\"></a>流的基础类</h3><ul>\n<li>InputStream</li>\n<li>OutputStream</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IOtest</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] buffer =<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> System.in.read(buffer);  <span class=\"comment\">//读到了多少东西</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"读到了\"</span>+len+<span class=\"string\">\"字节\"</span>);</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"s的长度是：\"</span>+s.length());</span><br><span class=\"line\"></span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (IOException e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>只能处理单个字节，单个字节的读，单个字节的写</p>\n<h3 id=\"流过滤器\"><a href=\"#流过滤器\" class=\"headerlink\" title=\"流过滤器\"></a>流过滤器</h3><ul>\n<li>以一个介质流对象为基础层层构建过滤器，最终形成的流对象能在数据的输入输出过程中，逐层使用过滤器的方式来读写数据</li>\n</ul>\n","categories":["Java"],"tags":["java"]},{"title":"JavaWeb笔记","url":"/posts/bc07bc32/","content":"<h1 id=\"一、搭建——Tomcat服务器\"><a href=\"#一、搭建——Tomcat服务器\" class=\"headerlink\" title=\"一、搭建——Tomcat服务器\"></a>一、搭建——Tomcat服务器</h1><p><strong>下载</strong></p>\n<p>官网：<a href=\"http://tomcat.apache.org/\">http://tomcat.apache.org/</a>  </p>\n<img src=\"/posts/bc07bc32/14.png\" alt=\"image-20230308175922814\" style=\"zoom: 67%;\">\n\n<p><strong>文件夹作用:</strong>  </p>\n<img src=\"/posts/bc07bc32/15.png\" alt=\"image-20230308180130118\" style=\"zoom:67%;\">\n\n<p><img src=\"/posts/bc07bc32/16.png\" alt=\"image-20230308180217519\"></p>\n<p><strong><font color=\"ondine\">默认端口为8080</font></strong></p>\n<p>访问测试：<a href=\"http://localhost:8080/\">http://localhost:8080/</a> 可能遇到的问题：  </p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">1. Java环境变量没有配置</span><br><span class=\"line\">2. 闪退问题：需要配置兼容性</span><br><span class=\"line\">3. 乱码问题：配置文件中设置可以修改 conf/logging.properties 中的</span><br><span class=\"line\">java.util.logging.ConsoleHandler.encoding = GBK 解决乱码问题</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">可以配置启动的端口号</font></strong></p>\n<img src=\"/posts/bc07bc32/17.png\" style=\"zoom:67%;\">\n\n\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=\"8081\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\"</span><br><span class=\"line\">redirectPort=\"8443\" /</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>Tomcat配置环境变量</strong>  </p>\n<img src=\"/posts/bc07bc32/18.png\" alt=\"image-20230308180934355\" style=\"zoom:67%;\">\n\n<img src=\"/posts/bc07bc32/19.png\" alt=\"image-20230308181025823\" style=\"zoom:67%;\">\n\n<img src=\"/posts/bc07bc32/20.png\" alt=\"image-20230308181125295\" style=\"zoom:67%;\">\n\n<p><strong><font color=\"blue\">启动</font></strong></p>\n<img src=\"/posts/bc07bc32/21.png\" alt=\"image-20230308181213417\" style=\"zoom: 33%;\">\n\n<h1 id=\"二、认识——Tomacat-amp-Servlet\"><a href=\"#二、认识——Tomacat-amp-Servlet\" class=\"headerlink\" title=\"二、认识——Tomacat&amp;Servlet\"></a>二、认识——Tomacat&amp;Servlet</h1><h3 id=\"禁用缓存\"><a href=\"#禁用缓存\" class=\"headerlink\" title=\"禁用缓存\"></a>禁用缓存</h3><img src=\"/posts/bc07bc32/1.png\" style=\"zoom:50%;\">\n\n<p><strong><font color=\"ondine\">修改代码之后，刷新页面没有更新，看有没有禁止缓存，不要犯这种低级错误。</font></strong></p>\n<h3 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h3><p><em>HTTP概念HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</em></p>\n<h4 id=\"请求数据格式\"><a href=\"#请求数据格式\" class=\"headerlink\" title=\"请求数据格式\"></a>请求数据格式</h4><p>**请求数据总共分为三部分内容 分别是==请求行==、==请求头==、==请求体==  **</p>\n<p><img src=\"/posts/bc07bc32/22.png\" alt=\"image-20230308182140336\"></p>\n<p><strong><font color=\"blue\">请求行：</font><strong>HTTP请求中的第一行数据，请求行包含三块内容，分别是 <strong>GET[请求方式]</strong> /</strong>[请求URL路径]</strong> <strong>HTTP/1.1[HTTP协议及版本]</strong> 请求方式有七种,最常用的是<font color=\"red\">GET</font><strong>和</strong><font color=\"red\">POST</font></p>\n<p><font color=\"blue\"><strong>请求头：</strong></font>第二行开始，格式为<font color=\"red\"><strong>key: value</strong></font>形式,请求头中会包含若干个属性，常见的HTTP请求头有</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Host: 表示请求的主机名</span><br><span class=\"line\">User-Agent: 浏览器版本,例如Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79，IE浏览器的标识类似</span><br><span class=\"line\">Mozilla/5.0 (Windows NT ...)like Gecko；</span><br><span class=\"line\">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span><br><span class=\"line\">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span><br><span class=\"line\">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span><br></pre></td></tr></tbody></table></figure>\n\n<p><font color=\"blue\"><strong>请求体：</strong></font>POST请求的最后一部分，存储请求参数如：</p>\n<p><img src=\"/posts/bc07bc32/23.png\" alt=\"image-20230308182319959\"></p>\n<p>如上内容就是请求体的内容，请求体和请求头之间是有一个空行隔开。此时浏览器发送的是POST请 求，为什么不能使用GET呢?这时就需要回顾GET和POST两个请求之间的区别了:</p>\n<p><strong>get方式：</strong>没有请求体，但是有一个 queryString</p>\n<p><strong>post方式：</strong>没有请求体，form data</p>\n<p><strong>json格式：</strong>有请求体 request payload</p>\n<ul>\n<li>GET请求请求参数在请求行中，没有请求体，POST请求请求参数在请求体中</li>\n<li>GET请求请求参数大小有限制，POST没有</li>\n</ul>\n<p><strong><font color=\"orange\">小结：</font></strong></p>\n<ol>\n<li>请求数据中包含三部分内容，分别是请求行、请求头和请求体</li>\n<li>POST请求数据在请求体中，GET请求数据在请求行上</li>\n</ol>\n<h4 id=\"响应数据格式\"><a href=\"#响应数据格式\" class=\"headerlink\" title=\"响应数据格式\"></a>响应数据格式</h4><p><strong>响应数据总共分为三部分内容，分别是==响应行==、==响应头==、==响应体==</strong>  </p>\n<img src=\"/posts/bc07bc32/24.png\" alt=\"image-20230308182645631\" style=\"zoom:67%;\">\n\n<p><strong><font color=\"blue\">响应行：</font><strong>响应数据的第一行,响应行包含三块内容，分别是 <strong>HTTP/1.1[HTTP协议及版本]</strong>| <strong>200[响应状态码] ok</strong>|</strong>[状 态码的描述]</strong></p>\n<p><font color=\"blue\"><strong>响应头：</strong></font>第二行开始，格式为<font color=\"red\"><strong>key：value</strong></font>形式响应头中会包含若干个属性，常见的HTTP响应头有:</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg；</span><br><span class=\"line\">Content-Length：表示该响应内容的长度（字节数）；</span><br><span class=\"line\">Content-Encoding：表示该响应压缩算法，例如gzip；</span><br><span class=\"line\">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒</span><br></pre></td></tr></tbody></table></figure>\n\n<p><font color=\"blue\"><strong>响应体：</strong></font>响应体就是服务器返回的HTML页面或者json数据</p>\n<p><strong><font color=\"blue\">响应状态码：</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">100-199：表示服务器成功接收部分请求，要求客户端继续提交其余请求才能完成整个 处理过程。</span><br><span class=\"line\"></span><br><span class=\"line\">200-299：表示服务器成功接收请求并已完成整个处理过程。常用 200(OK 请求成功)。</span><br><span class=\"line\"></span><br><span class=\"line\">300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地 址、常用 302(所请求的页面已经临时转移至新的 url)、307 和 304(使用缓存资源)</span><br><span class=\"line\"></span><br><span class=\"line\">400-499：客户端的请求有错误，常用 404(服务器无法找到被请求的页面)、403(服 务 器拒绝访问，权限不够—DDos)。</span><br><span class=\"line\"></span><br><span class=\"line\">500~599：服务器端出现错误，常用 500(请求未完成。服务器遇到不可预知的情况)。</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>1.什么是Servlet？说一下Servlet的生命周期</strong><br>答：<br>    1.Servlet是JavaWeb最为核心的内容，它是Java提供的一门==动态==web资源开发技术，用于接收和响应用户的请求。<br>    2.使用Servlet就可以实现，根据不同的登录用户在页面上动态显示不同内容。<br>    3.Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet<br>    Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为4个阶段：加载和实例化、初始化、请求处理、服务终止</p>\n<p><strong>2.get和post请求的区别？</strong><br>    1.GET请求请求参数在请求行中，没有请求体，POST请求请求参数在请求体中，GET请求数据在请求行上<br>    2.GET请求请求参数大小有限制，POST没有</p>\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><img src=\"/posts/bc07bc32/25.png\" alt=\"image-20230308183853207\" style=\"zoom:67%;\">\n\n<ul>\n<li><p>Servlet是JavaWeb最为核心的内容，它是Java提供的一门==动态==web资源开发技术，用于接收和响应用户的请求。  </p>\n</li>\n<li><p>使用Servlet就可以实现，根据不同的登录用户在页面上动态显示不同内容。  </p>\n</li>\n<li><p>Servlet是JavaEE规范之一，其实就是一个接口，将来我们需要定义Servlet类实现Servlet接口，并由web服务器运行Servlet</p>\n</li>\n</ul>\n<img src=\"/posts/bc07bc32/26.png\" alt=\"image-20230308185333791\" style=\"zoom:67%;\">\n\n<p>介绍完Servlet是什么以后，接下来我们就按照 <strong>快速入门</strong> -&gt; <strong>执行流程</strong> -&gt; <strong>生命周期</strong> -&gt; <strong>体系结构</strong> -&gt; <strong>urlPattern配置</strong> -&gt; <strong>XML配置</strong> 的学习步骤，一步步完成对Servlet的知识学习，首选我们来通过一个入门案例来快速把Servlet用起来。</p>\n<h4 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h4><p><strong>1.打开IDEA，点击新建新的project。</strong>  </p>\n<p><img src=\"/posts/bc07bc32/27.png\" alt=\"image-20230308185513812\"></p>\n<img src=\"/posts/bc07bc32/28.png\" alt=\"image-20230308185603673\" style=\"zoom: 50%;\">\n\n<img src=\"/posts/bc07bc32/29.png\" alt=\"image-20230308185902183\" style=\"zoom: 33%;\">\n\n<img src=\"/posts/bc07bc32/30.png\" alt=\"image-20230308185949364\" style=\"zoom:33%;\">\n\n<p><strong>2.导包</strong></p>\n<p><font color=\"ondine\"><strong>方式1：使用Maven自动导包</strong></font></p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet.jsp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jsp-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><font color=\"ondine\"><strong>方式2：使用apache-tomcat/lib目录下的包 手动导包</strong></font></p>\n<p>直接复制过去可能会报错，因为没有导包，接下来导包，在web/WEB-INF目录下建一个lib文件夹。将自己的tomcat目录lib下面2个jar包拷贝进去。  </p>\n<img src=\"/posts/bc07bc32/31.png\" alt=\"image-20230308191126965\" style=\"zoom:33%;\">\n\n<p><strong>然后右键点击jsp-api.jar包 add as Libraries，后面jar类似</strong>  </p>\n<img src=\"/posts/bc07bc32/32.png\" alt=\"image-20230308191422118\" style=\"zoom: 33%;\">\n\n<img src=\"/posts/bc07bc32/33.png\" alt=\"image-20230308191453659\" style=\"zoom: 50%;\">\n\n<p><strong>3.创建Servlet</strong>  </p>\n<p>首先先在自己的src目录下建立一个包【cn.com.zw.servlet】,创建一个类HelloServlet，实现Servlet接口，并重写接口中所有方法，并在service方法中输入一句话  </p>\n<p><strong><font color=\"ondine\">配置:在类上使用@WebServlet注解，配置该Servlet的访问路径</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(\"/dome1\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">servlet</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Servlet</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ServletConfig servletConfig)</span> <span class=\"keyword\">throws</span> ServletException {</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletConfig <span class=\"title function_\">getServletConfig</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"servlet hello world~\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getServletInfo</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>4.配置tomcat</strong>  </p>\n<p><strong><font color=\"ondine\">需要用到IDEA 专业版</font></strong></p>\n<img src=\"/posts/bc07bc32/34.png\" alt=\"image-20230308192556947\" style=\"zoom:33%;\">\n\n<img src=\"/posts/bc07bc32/35.png\" alt=\"image-20230308192624592\" style=\"zoom:33%;\">\n\n<img src=\"/posts/bc07bc32/36.png\" alt=\"image-20230308192700130\" style=\"zoom:33%;\">\n\n<img src=\"/posts/bc07bc32/37.png\" alt=\"image-20230308192736298\" style=\"zoom:33%;\">\n\n<img src=\"/posts/bc07bc32/38.png\" alt=\"image-20230308192810990\" style=\"zoom:33%;\">\n\n<p><strong>5. 启动tomcat，运行项目</strong>  </p>\n<img src=\"/posts/bc07bc32/39.png\" alt=\"image-20230308193314298\" style=\"zoom: 33%;\">\n\n<img src=\"/posts/bc07bc32/40.png\" alt=\"image-20230308193531161\" style=\"zoom:33%;\">\n\n<p>启动Tomcat,浏览器中输入URL地址访问该Servlet  </p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/Hello/demo1</span><br></pre></td></tr></tbody></table></figure>\n\n<p>浏览器访问后，在控制台会打印 servlet hello world~ 说明servlet程序已经成功运行。</p>\n<p><img src=\"/posts/bc07bc32/41.png\" alt=\"image-20230308194221292\"></p>\n<h4 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h4><p>Servlet程序已经能正常运行，但是我们需要思考个问题: 我们并没有创建ServletDemo1类的对象，也没有调用对象中的service方法，为什么在控制台就打印了 servlet hello world~ 这句话呢?要想回答上述问题，我们就需要对Servlet的执行流程进行一个学习</p>\n<p><img src=\"/posts/bc07bc32/42.png\" alt=\"image-20230308194340450\"></p>\n<ul>\n<li>浏览器发出 <a href=\"http://localhost:8080/Hello/demo1\">http://localhost:8080/Hello/demo1</a> 请求，从请求中可以解析出三部分内容，分别是localhost:8080 、 Hello、 demo1  <ul>\n<li>根据 localhost:8080 可以找到要访问的Tomcat Web服务器  </li>\n<li>根据 web-demo 可以找到部署在Tomcat服务器上的web-demo项目  </li>\n<li>根据 demo1 可以找到要访问的是项目中的哪个Servlet类，根据@WebServlet后面的值进行匹配</li>\n</ul>\n</li>\n<li>找到ServletDemo1这个类后，Tomcat Web服务器就会为ServletDemo1这个类创建一个对象，然后调用对象中的service方法  <ul>\n<li>ServletDemo1实现了Servlet接口，所以类中必然会重写service方法供Tomcat Web服务器进行调用  </li>\n<li>service方法中有ServletRequest和ServletResponse两个参数，ServletRequest封装的是请求数据， ServletResponse封装的是响应数据，后期我们可以通过这两个参数实现前后端的数据交互</li>\n</ul>\n</li>\n</ul>\n<p><strong>小结</strong>  </p>\n<p><strong>介绍完Servlet的执行流程，需要大家掌握两个问题：</strong>  </p>\n<ol>\n<li><strong>Servlet由谁创建?  Servlet方法由谁调用?</strong></li>\n</ol>\n<blockquote>\n<p>Servlet由web服务器创建，Servlet方法由web服务器调用  </p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>服务器怎么知道Servlet中一定有service方法?</strong></li>\n</ol>\n<blockquote>\n<p>因为我们自定义的Servlet,必须实现Servlet接口并复写其方法，而Servlet接口中有service方法  </p>\n</blockquote>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><ul>\n<li>生命周期: 对象的生命周期指一个对象从被创建到被销毁的整个过程。  </li>\n<li>Servlet运行在Servlet容器(web服务器)中，其生命周期由容器来管理，分为<strong>4个阶段</strong>：</li>\n</ul>\n<ol>\n<li>==<strong>加载和实例化</strong>==：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">默认情况，Servlet会在第一次访问被容器创建，但是如果创建Servlet比较耗时的话，那么第一个访问的人等待的</span><br><span class=\"line\">时间就比较长，用户的体验就比较差，那么我们能不能把Servlet的创建放到服务器启动的时候来创建，具体如何来配</span><br><span class=\"line\">置?</span><br><span class=\"line\">@WebServlet(urlPatterns = \"/demo1\",loadOnStartup = 1)</span><br><span class=\"line\">loadOnstartup的取值有两类情况</span><br><span class=\"line\">（1）负整数:第一次访问时创建Servlet对象</span><br><span class=\"line\">（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>==<strong>初始化</strong>==：在Servlet实例化之后，容器将调用Servlet的==init()==方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只==调用一次==</li>\n<li>==<strong>请求处理</strong>==：==每次==请求Servlet时，Servlet容器都会调用Servlet的==service()==方法对请求进行处理</li>\n<li>==<strong>服务终止</strong>==：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的==destroy()==方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</li>\n</ol>\n<p><strong>小结：</strong></p>\n<ol>\n<li><strong>Servlet对象在什么时候被创建的?</strong></li>\n</ol>\n<blockquote>\n<p>默认是第一次访问的时候被创建，可以使用@WebServlet(urlPatterns = “/demo2”,loadOnStartup = 1)的loadOnStartup 修改成在服务器启动的时候创建。</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>Servlet生命周期中涉及到的<font color=\"blue\">三个方法</font>，这三个方法是什么?什么时候被调用?调用几次?</strong></li>\n</ol>\n<blockquote>\n<p>涉及到三个方法，分别是 init()、service()、destroy()</p>\n<p>init方法在Servlet对象被创建的时候执行，只执行1次</p>\n<p>service方法在Servlet被访问的时候调用，每访问1次就调用1次</p>\n<p>destroy方法在Servlet对象被销毁的时候调用，只执行1次</p>\n</blockquote>\n<h4 id=\"方法介绍\"><a href=\"#方法介绍\" class=\"headerlink\" title=\"方法介绍\"></a>方法介绍</h4><p><strong><font color=\"ondine\">一共五个方法</font></strong></p>\n<p>**<font color=\"blue\">初始化方法</font>**，在Servlet被创建时执行，只执行一次  </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ServletConfig config)</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>提供**<font color=\"blue\">服务方法</font>**， 每次Servlet被访问，都会调用该方法  </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>**<font color=\"blue\">销毁方法</font>**，当Servlet被销毁时，调用该方法。在内存释放或服务器关闭时销毁Servlet  </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">获取Servlet信息</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">getServletInfo</span><span class=\"params\">()</span></span><br><span class=\"line\"><span class=\"comment\">//该方法用来返回Servlet的相关信息，没有什么太大的用处，一般我们返回一个空字符串即可</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getServletInfo</span><span class=\"params\">()</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">获取ServletConfig对象</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ServletConfig <span class=\"title function_\">getServletConfig</span><span class=\"params\">()</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">getServletInfo()和getServletConfig()这两个方法使用的不是很多</font></strong></p>\n<img src=\"/posts/bc07bc32/43.png\" alt=\"image-20230308200357034\" style=\"zoom:50%;\">\n\n<h4 id=\"体系结构\"><a href=\"#体系结构\" class=\"headerlink\" title=\"体系结构\"></a>体系结构</h4><p>通过上面的学习，我们知道要想编写一个Servlet就必须要实现Servlet接口，重写接口中的5个方法，虽然已经能完成要求，但是编写起来还是比较麻烦的，因为我们更关注的其实只有service方法，那有没有更简单方式来创建Servlet呢?  </p>\n<p>要想解决上面的问题，我们需要先对Servlet的体系结构进行下了解:  </p>\n<img src=\"/posts/bc07bc32/44.png\" alt=\"image-20230308200558649\" style=\"zoom:50%;\">\n\n<p>因为我们将来开发B/S架构的web项目，都是针对HTTP协议，所以我们自定义Servlet,会通过继承==<strong>HttpServlet</strong>==具体的编写格式如下:</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* urlPattern: 一个Servlet可以配置多个访问路径</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(urlPatterns = {\"/demo4\",\"/zw\"})</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"comment\">//TODO GET 请求方式处理逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"get...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"comment\">//TODO Post 请求方式处理逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"post...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><p>要想发送一个GET请求，请求该Servlet，只需要通过浏览器发送 <a href=\"http://localhost:8080/Hello/demo4\">http://localhost:8080/Hello/demo4</a> ,就能看到doGet方法被执行了  </p>\n</li>\n<li><p>要想发送一个POST请求，请求该Servlet，单单通过浏览器是无法实现的，这个时候就需要编写一个form表单来发送请求，在webapp下创建一个 a.html 页面，内容如下  <a href=\"http://localhost:8081/Hello/a.html\">http://localhost:8081/Hello/a.html</a></p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/Hello/dome4\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>/&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"三、Request-amp-Response\"><a href=\"#三、Request-amp-Response\" class=\"headerlink\" title=\"三、Request&amp;Response\"></a>三、Request&amp;Response</h1><p>==<strong>Request是请求对象</strong>，<strong>Response是响应对象</strong>。==这两个对象在我们使用Servlet的时候有看到：  </p>\n<img src=\"/posts/bc07bc32/45.png\" alt=\"image-20230308202121503\" style=\"zoom:50%;\">\n\n<p>此时，我们就需要思考一个问题request和response这两个参数的作用是什么?  </p>\n<img src=\"/posts/bc07bc32/46.png\" alt=\"image-20230308202232148\" style=\"zoom: 50%;\">\n\n\n\n<p><strong><font color=\"blue\">request:==获取==请求数据：</font></strong></p>\n<ul>\n<li>浏览器会发送HTTP请求到后台服务器[Tomcat]</li>\n<li>HTTP的请求中会包含很多请求数据[请求行+请求头+请求体]</li>\n<li><strong><font color=\"red\">后台服务器[Tomcat]会对HTTP请求中的数据进行解析并把解析结果存入到一个对象中</font></strong></li>\n<li><strong><font color=\"red\">所存入的对象即为request对象，所以我们可以从request对象中获取请求的相关参数</font></strong></li>\n<li>获取到数据后就可以继续后续的业务，比如获取用户名和密码就可以实现登录操作的相关业务</li>\n</ul>\n<p><strong><font color=\"blue\">response:==设置==响应数据</font></strong></p>\n<ul>\n<li>业务处理完后，后台就需要给前端返回业务处理的结果即响应数据</li>\n<li><strong><font color=\"red\">把响应数据封装到response对象中</font></strong></li>\n<li><strong><font color=\"red\">后台服务器[Tomcat]会解析response对象,按照[响应行+响应头+响应体]格式拼接结果</font></strong></li>\n<li>浏览器最终解析结果，把内容展示在浏览器给用户浏览</li>\n</ul>\n<p>对于上述所讲的内容，我们通过一个案例来初步体验下request和response对象的使用。  </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(\"/dome3\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\"><span class=\"comment\">//使用request对象 获取请求数据</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> req.getParameter(<span class=\"string\">\"name\"</span>);<span class=\"comment\">//url?name=lisi</span></span><br><span class=\"line\"><span class=\"comment\">//使用response对象 设置响应数据</span></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">\"content-type\"</span>,<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">\"&lt;h1&gt;\"</span>+name+<span class=\"string\">\",欢迎您！&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"comment\">//TODO Post 请求方式处理逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"post...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>启动成功后就可以通过浏览器来访问，并且根据传入参数的不同就可以在页面上展示不同的内容:  </p>\n<p><img src=\"/posts/bc07bc32/47.png\" alt=\"image-20230308203035980\"></p>\n<h3 id=\"Request对象\"><a href=\"#Request对象\" class=\"headerlink\" title=\"Request对象\"></a>Request对象</h3><p>ServletRequest&amp;HttpServlet</p>\n<p>当我们的Servlet类实现的是Servlet接口的时候，service方法中的参数是ServletRequest和ServletResponse  </p>\n<p>当我们的Servlet类继承的是HttpServlet类的时候，doGet和doPost方法中的参数就变成HttpServletRequest和HttpServletReponse那么</p>\n<p><strong>Request的继承体系:</strong></p>\n<p><img src=\"/posts/bc07bc32/2.png\"></p>\n<p>ServletRequest和HttpServletRequest是继承关系，并且两个都是接口，接口是无法创建对象</p>\n<p>这个时候，我们就需要用到Request继承体系中的 RequestFacade </p>\n<ul>\n<li>该类实现了HttpServletRequest接口，也间接实现了ServletRequest接口。</li>\n</ul>\n<p><strong><font color=\"orange\">小结：</font></strong></p>\n<ol>\n<li>Request的继承体系为ServletRequest–&gt;HttpServletRequest–&gt;RequestFacade</li>\n<li>Tomcat需要解析请求数据，封装为request对象,并且创建request对象传递到service方法</li>\n</ol>\n<h4 id=\"Request获取请求数据\"><a href=\"#Request获取请求数据\" class=\"headerlink\" title=\"Request获取请求数据\"></a>Request获取请求数据</h4><h5 id=\"获取请求行数据\"><a href=\"#获取请求行数据\" class=\"headerlink\" title=\"获取请求行数据\"></a>获取请求行数据</h5><p>请求行包含三块内容，分别是 <strong><font color=\"red\">请求方式</font></strong> 、 <strong><font color=\"red\">请求资源路径</font></strong> 、 <strong><font color=\"red\">HTTP协议及版本</font></strong></p>\n<p><img src=\"/posts/bc07bc32/3.png\"></p>\n<p>对于这三部分内容，request对象都提供了对应的API方法来获取，具体如下:</p>\n<p><strong><font color=\"ondine\">获取请求方式: GET</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String getMethod()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">获取虚拟目录(项目访问路径): /request-demo</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String getContextPath()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">获取URL(统一资源定位符): <a href=\"http://localhost:8080/request-demo/req1\">http://localhost:8080/request-demo/req1</a></font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">StringBuffer getRequestURL()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">获取URI(统一资源标识符): /request-demo/req1</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String getRequestURI()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">获取请求参数(GET方式): username=zhangsan&amp;password=123</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String getQueryString()</span><br></pre></td></tr></tbody></table></figure>\n\n<p>介绍完上述方法后，咱们通过代码把上述方法都使用下:  </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * request 获取请求数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(\"/req1\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"comment\">// String getMethod()：获取请求方式： GET</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> req.getMethod();</span><br><span class=\"line\">        System.out.println(method);<span class=\"comment\">//GET</span></span><br><span class=\"line\"><span class=\"comment\">// String getContextPath()：获取虚拟目录(项目访问路径)：/request-demo</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">contextPath</span> <span class=\"operator\">=</span> req.getContextPath();</span><br><span class=\"line\">        System.out.println(contextPath);</span><br><span class=\"line\"><span class=\"comment\">// StringBuffer getRequestURL(): 获取URL(统一资源定位符)：</span></span><br><span class=\"line\">        StringBuffer url;</span><br><span class=\"line\">        http:<span class=\"comment\">//localhost:8080/request-demo/req1</span></span><br><span class=\"line\">         url = req.getRequestURL();</span><br><span class=\"line\">        System.out.println(url.toString());</span><br><span class=\"line\"><span class=\"comment\">// String getRequestURI()：获取URI(统一资源标识符)： /request-demo/req1</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> req.getRequestURI();</span><br><span class=\"line\">        System.out.println(uri);</span><br><span class=\"line\"><span class=\"comment\">// String getQueryString()：获取请求参数（GET方式）： username=zhangsan</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">queryString</span> <span class=\"operator\">=</span> req.getQueryString();</span><br><span class=\"line\">        System.out.println(queryString);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"comment\">//TODO Post 请求方式处理逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"post...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>启动服务器，访问  <a href=\"http://localhost:8080/Hello/req1?username=zhangsan&amp;passwrod=123\">http://localhost:8080/Hello/req1?username=zhangsan&amp;passwrod=123</a></p>\n<p><strong>结果如下(控制台打印)：</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">GET</span><br><span class=\"line\">/Hello</span><br><span class=\"line\">http://localhost:8080/Hello/req1</span><br><span class=\"line\">/Hello/req1</span><br><span class=\"line\">username=zhangsan&amp;passwrod=123</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"获取请求头数据\"><a href=\"#获取请求头数据\" class=\"headerlink\" title=\"获取请求头数据\"></a>获取请求头数据</h5><p><strong><font color=\"ondine\">对于请求头的数据，格式为 key: value 如下:</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">getHeader</span><span class=\"params\">(String name)</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>接下来，在代码中如果想要获取客户端浏览器的版本信息，则可以使用  </p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * request 获取请求数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(\"/req1\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\"><span class=\"comment\">//获取请求头: user-agent: 浏览器的版本信息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">agent</span> <span class=\"operator\">=</span> req.getHeader(<span class=\"string\">\"user-agent\"</span>);</span><br><span class=\"line\">        System.out.println(agent);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"comment\">//TODO Post 请求方式处理逻辑</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"post...\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>结果如下：</strong></p>\n<p><img src=\"/posts/bc07bc32/48.png\" alt=\"image-20230308204459868\"></p>\n<h5 id=\"获取请求体数据\"><a href=\"#获取请求体数据\" class=\"headerlink\" title=\"获取请求体数据\"></a>获取请求体数据</h5><p>浏览器在 **<font color=\"red\">发送GET请求的时候是没有请求体</font><strong>的，所以需要把请求方式变更为</strong><font color=\"red\">POST</font>**，请求体中的数据格式如下:</p>\n<p><img src=\"/posts/bc07bc32/4.png\"></p>\n<p><strong><font color=\"ondine\">获取字符输入流，如果前端发送的是纯文本数据，则使用该方法</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">BufferedReader getReader()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">获取字节输入流，如果前端发送的是字节数据，比如传递的是文件数据，则使用该方法</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ServletInputStream getInputStream()</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p> 请求体的内容该如何实现  具体实现的步骤如下: </p>\n<p>1.准备一个页面，在页面中添加form表单,用来发送post请求</p>\n<p>2.在Servlet的doPost方法中获取请求体数据</p>\n<p>3.在doPost方法中使用request的getReader()或者getInputStream()来获取</p>\n<p>4.访问测试  </p>\n</blockquote>\n<ol>\n<li>在项目的webapp目录下添加一个html页面，名称为： req.html</li>\n</ol>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">action:form表单提交的请求地址</span></span><br><span class=\"line\"><span class=\"comment\">method:请求方式，指定为post</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/Hello/req1\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&lt;/html</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>在Servlet的doPost方法中获取数据  调用getReader()或者getInputStream()方法，因为目前前端传递的是纯文本数据，所以我们采用getReader()方法来获取</li>\n</ol>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * request 获取请求数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(\"/req1\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"comment\">//TODO Post 请求方式处理逻辑</span></span><br><span class=\"line\">        <span class=\"comment\">//获取post 请求体：请求参数</span></span><br><span class=\"line\"><span class=\"comment\">//1. 获取字符输入流</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> req.getReader();</span><br><span class=\"line\"><span class=\"comment\">//2. 读取数据</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> br.readLine();</span><br><span class=\"line\">        System.out.println(line);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"orange\">注意：</font></strong></p>\n<p><strong>BufferedReader流是通过request对象来获取的，当请求完成后request对象就会被销毁，request对象被销毁后， BufferedReader流就会自动关闭，所以此处就不需要手动关闭流了。</strong></p>\n<ol start=\"3\">\n<li>启动服务器，通过浏览器访问  <a href=\"http://localhost:8080/Hello/req1.html\">http://localhost:8080/Hello/req1.html</a></li>\n</ol>\n<p>点击 提交 按钮后，就可以在控制台看到前端所发送的请求数据  </p>\n<p><img src=\"/posts/bc07bc32/49.png\" alt=\"image-20230308205357575\"></p>\n<p><strong>小结</strong>  </p>\n<p>HTTP请求数据中包含了 请求行 、 请求头 和 请求体 ，针对这三部分内容，Request对象都提供了对应的API方法来获取对应的值:  </p>\n<ul>\n<li>请求行<ul>\n<li>getMethod()获取请求方式  </li>\n<li>getContextPath()获取项目访问路径  </li>\n<li>getRequestURL()获取请求URL  </li>\n<li>getRequestURI()获取请求URI  </li>\n<li>getQueryString()获取GET请求方式的请求参数</li>\n</ul>\n</li>\n<li>请求头  <ul>\n<li>getHeader(String name)根据请求头名称获取其对应的值</li>\n</ul>\n</li>\n<li>请求体  <ul>\n<li>注意: ==浏览器发送的POST请求才有请求体==  </li>\n<li>如果是纯文本数据:getReader()  </li>\n<li>如果是字节数据如文件数据:getInputStream()</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"获取请求参数的通用方式\"><a href=\"#获取请求参数的通用方式\" class=\"headerlink\" title=\"获取请求参数的通用方式\"></a>获取请求参数的通用方式</h5><ul>\n<li><strong><font color=\"red\">什么是请求参数？</font></strong>  </li>\n<li><strong><font color=\"red\">请求参数和请求数据的关系是什么？</font></strong></li>\n</ul>\n<p><strong>1、什么是请求参数?</strong>  </p>\n<p>我们拿用户登录的例子来说明  </p>\n<ul>\n<li>想要登录网址，需要进入登录页面</li>\n<li>在登录页面输入用户名和密码  </li>\n<li>将用户名和密码提交到后台</li>\n<li>后台校验用户名和密码是否正确</li>\n<li>如果正确，则正常登录，如果不正确，则提示用户名或密码错误上述例子中，用户名和密码其实就是我们所说的请求参数。</li>\n</ul>\n<p><strong>2、什么是请求数据?</strong>  </p>\n<p><strong><font color=\"ondine\">请求数据则是包含请求行、请求头和请求体的所有数据</font></strong>  </p>\n<p><strong>3、请求参数和请求数据的关系是什么?</strong>  </p>\n<ul>\n<li>请求参数是请求数据中的部分内容  </li>\n<li>如果是GET请求，请求参数在请求行中  </li>\n<li>如果是POST请求，请求参数一般在请求体中</li>\n</ul>\n<p><strong>对于<font color=\"red\">请求参数的获取</font>,常用的有以下两种:</strong></p>\n<p><strong><font color=\"blue\">全部参数获取</font></strong></p>\n<ul>\n<li>GET方式:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String getQueryString()</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>POST方式:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">BufferedReader getReader();</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>基于上述,request对象为我们提供了如下方法:</strong> </p>\n<p><strong><font color=\"ondine\">获取所有参数Map集合</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;String,String[]&gt; getParameterMap()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">根据名称获取参数值(数组)</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String[] getParameterValues(String name)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">根据名称获取参数值(单个值)</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String getParameter(String name)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>把上述的三个方法进行实例演示:</strong>  </p>\n<p>1.修改req.html页面，添加爱好选项，爱好可以同时选多个  </p>\n<img src=\"/posts/bc07bc32/51.png\" alt=\"image-20230309085821478\" style=\"zoom:50%;\">\n\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/Hello/req1\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span> 游泳</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span> 爬山 <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>三个方法使用：</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cn.com.zw;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * request 获取请求数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(\"/req1\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">servlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"get....\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//1. 获取所有参数的Map集合</span></span><br><span class=\"line\">        Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Map&lt;String,String[]&gt; getParameterMap() 方法\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : map.keySet()) {</span><br><span class=\"line\">            <span class=\"comment\">// username:zhangsan lisi</span></span><br><span class=\"line\">            System.out.print(key + <span class=\"string\">\":\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//获取值</span></span><br><span class=\"line\">            String[] values = map.get(key);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String value : values) {</span><br><span class=\"line\">                System.out.print(value + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"String[] getParameterValues(String name) 方法\"</span>);</span><br><span class=\"line\">        String[] hobbies = req.getParameterValues(<span class=\"string\">\"hobby\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String hobby : hobbies) {</span><br><span class=\"line\">            System.out.println(hobby);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"String getParameter(String name) 方法\"</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">password</span> <span class=\"operator\">=</span> req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"username:\"</span>+username);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"password:\"</span>+password);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>结果：</strong></p>\n<p><img src=\"/posts/bc07bc32/50.png\"></p>\n<p><strong><font color=\"orange\">小结：</font></strong></p>\n<ol>\n<li>**<font color=\"ondine\">req.getParameter()</font>**方法使用的频率会比较高</li>\n</ol>\n<h4 id=\"请求参数中文乱码问题\"><a href=\"#请求参数中文乱码问题\" class=\"headerlink\" title=\"请求参数中文乱码问题\"></a>请求参数中文乱码问题</h4><p><code>就是控制台打印的中文文字</code></p>\n<p><strong><font color=\"ondine\">POST:</font></strong></p>\n<p>请求解决方案是:设置输入流的编码</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">request.setCharacterEncoding(\"UTF-8\");</span><br><span class=\"line\">注意:设置的字符集要和页面保持一致</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">GET:</font></strong></p>\n<p>POST请求和GET请求的参数中如果有中文，后台接收数据就会出现中文乱码问题 GET请求在Tomcat8.0以后的版本就不会出现了</p>\n<p><strong><font color=\"ondine\">通用方式（GET/POST）：需要先解码，再编码</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">new String(username.getBytes(\"ISO-8859-1\"),\"UTF-8\");</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Request请求转发\"><a href=\"#Request请求转发\" class=\"headerlink\" title=\"Request请求转发\"></a>Request请求转发</h4><p>==请求转发(forward):一种在服务器内部的资源跳转方式。==  </p>\n<img src=\"/posts/bc07bc32/52.png\" alt=\"image-20230309091111631\" style=\"zoom:50%;\">\n\n<ol>\n<li>浏览器发送请求给服务器，服务器中对应的资源A接收到请求  </li>\n<li>资源A处理完请求后将请求发给资源B  </li>\n<li>资源B处理完后将结果响应给浏览器  </li>\n<li>请求从资源A到资源B的过程就叫==<strong>请求转发</strong>==</li>\n</ol>\n<p><strong><font color=\"ondine\">请求转发的实现方式:</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">req.getRequestDispatcher(\"资源B路径\").forward(req,resp);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">请求转发资源间共享数据:使用Request对象</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">void setAttribute(String name,Object o);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">根据key获取值</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Object getAttribute(String name);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">根据key删除该键值对</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">void removeAttribute(String name);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>例子：</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(\"/req5\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestDemo5</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">ServletException, IOException {</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"demo5...\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//存储数据</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"msg\"</span>,<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求转发</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"/req6\"</span>).forward(request,response);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">\t\tServletException, IOException {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.doGet(request, response);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 请求转发</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(\"/req6\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestDemo6</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">ServletException, IOException {</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"demo6...\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取数据</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">\"msg\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(msg);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">ServletException, IOException {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.doGet(request, response);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>只能转发到当前服务器的内部资源,能从一个服务器通过转发访问另一台服务器</li>\n<li>一次请求，可以在转发资源间使用request共享数据,虽然后台从 /req5 转发到 /req6 ，但是这个==只有一次请求==</li>\n</ul>\n<h3 id=\"Response对象\"><a href=\"#Response对象\" class=\"headerlink\" title=\"Response对象\"></a>Response对象</h3><ul>\n<li>**<font color=\"blue\">Request:</font>**使用request对象来==获取==请求数据  </li>\n<li>**<font color=\"blue\">Response:</font>**使用response对象来==设置==响应数据</li>\n</ul>\n<p>Reponse的继承体系和Request的继承体系也非常相似:</p>\n<p><img src=\"/posts/bc07bc32/5.png\"></p>\n<h4 id=\"Response响应数据功能介绍\"><a href=\"#Response响应数据功能介绍\" class=\"headerlink\" title=\"Response响应数据功能介绍\"></a>Response响应数据功能介绍</h4><p><strong><font color=\"blue\">响应行：</font></strong></p>\n<p><img src=\"/posts/bc07bc32/6.png\"></p>\n<p>对于响应头，比较常用的就是设置响应状态码:</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setStatus</span><span class=\"params\">(<span class=\"type\">int</span> sc)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">响应头：</font></strong></p>\n<p><img src=\"/posts/bc07bc32/7.png\"></p>\n<p>设置响应头键值对：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setHeader</span><span class=\"params\">(String name,String value)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">响应体：</font></strong></p>\n<p><img src=\"/posts/bc07bc32/8.png\"></p>\n<p>对于响应体，是通过字符、字节输出流的方式往浏览器写:</p>\n<p><strong><font color=\"ondine\">获取字符输出流:</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">PrintWriter <span class=\"title function_\">getWriter</span><span class=\"params\">()</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">获取字节输出流:</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ServletOutputStream <span class=\"title function_\">getOutputStream</span><span class=\"params\">()</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Respones请求重定向\"><a href=\"#Respones请求重定向\" class=\"headerlink\" title=\"Respones请求重定向\"></a>Respones请求重定向</h4><p><strong><font color=\"orange\">Response重定向(redirect):一种资源跳转方式。</font></strong></p>\n<p><img src=\"/posts/bc07bc32/9.png\"></p>\n<ol>\n<li>浏览器发送请求给服务器，服务器中对应的资源A接收到请求</li>\n<li>资源A现在无法处理该请求，就会给浏览器响应一个302的状态码+location的一个访问资源B的路径</li>\n<li>浏览器接收到响应状态码为302就会重新发送请求到location对应的访问地址去访问资源B</li>\n<li>资源B接收到请求后进行处理并最终给浏览器响应结果，这整个过程就叫<strong>重定向</strong></li>\n</ol>\n<p><img src=\"/posts/bc07bc32/10.png\"></p>\n<p><strong><font color=\"ondine\">重定向的实现方式:</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">resp.setStatus(302);</span><br><span class=\"line\">resp.setHeader(\"location\",\"资源B的访问路径\");</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">1. 创建一个Demo1类，接收/resp1的请求，在doGet方法中打印 resp1.... </span><br><span class=\"line\">2. 创建一个Demo2类，接收/resp2的请求，在doGet方法中打印 resp2....</span><br><span class=\"line\">3. 在Demo1的方法中使response.setStatus(302);response.setHeader(\"Location\",\"/request-demo/resp2\") 来给前端响应结果数据 </span><br><span class=\"line\">4. 启动测试</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>虽然功能已经实现，但是从设置重定向的两行代码来看，会发现除了重定向的地址不一样，其他的内容都是一模一 样，所以request对象给我们提供了简化的编写方式为:</strong></p>\n<p><strong><font color=\"ondine\">重定向简化</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">response.sendRedirect(<span class=\"string\">\"/request-demo/resp2\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>例子：</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(\"/resp1\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseDemo1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">ServletException, IOException {</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"resp1....\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//重定向</span></span><br><span class=\"line\">\t\tresposne.sendRedirect(<span class=\"string\">\"/request-demo/resp2\"</span>)；</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">ServletException, IOException {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.doGet(request, response);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>重定向特点</th>\n<th>请求转发特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浏览器地址栏发送变化</td>\n<td>浏览器地址路径不发生变化</td>\n</tr>\n<tr>\n<td>可以重定向到任意位置的只有(服务器内部、外部均可)</td>\n<td>只能转发到当前服务器的内部资源</td>\n</tr>\n<tr>\n<td>两次请求，不能在多个资源使用request共享数据</td>\n<td>一次请求，可以在转发的资源间使用request共享数据</td>\n</tr>\n</tbody></table>\n<p>到底用哪个，还是需要根据具体的业务来决定。</p>\n<h4 id=\"路径问题\"><a href=\"#路径问题\" class=\"headerlink\" title=\"路径问题\"></a>路径问题</h4><p><img src=\"/posts/bc07bc32/11.png\"></p>\n<p><strong>其实判断的依据很简单，只需要记住下面的规则即可:</strong></p>\n<ul>\n<li>浏览器使用:需要加虚拟目录(项目访问路径)</li>\n<li>服务端使用:不需要加虚拟目录</li>\n</ul>\n<p><strong><font color=\"ondine\">对于转发来说，因为是在服务端进行的，所以不需要加虚拟目录</font></strong> </p>\n<p><strong><font color=\"ondine\">对于重定向来说，路径最终是由浏览器来发送请求，就需要添加虚拟目录。</font></strong></p>\n<h4 id=\"Response响应字符数据\"><a href=\"#Response响应字符数据\" class=\"headerlink\" title=\"Response响应字符数据\"></a>Response响应字符数据</h4><p><strong><font color=\"ondine\">通过Response对象获取字符输出流：</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">PrintWriter writer = resp.getWriter();</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">通过字符输出流写数据:</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">writer.write(\"aaa\");</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>例子：</strong></p>\n<p> 返回一个简单的字符串 aaa</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 响应字符数据：设置字符数据的响应体</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(\"/resp3\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseDemo3</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">ServletException, IOException {</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//1. 获取字符输出流</span></span><br><span class=\"line\">\t\t<span class=\"type\">PrintWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> response.getWriter();</span><br><span class=\"line\">\t\twriter.write(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">ServletException, IOException {</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.doGet(request, response);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Response响应字节数据\"><a href=\"#Response响应字节数据\" class=\"headerlink\" title=\"Response响应字节数据\"></a>Response响应字节数据</h4><p>使用**<font color=\"orange\">org.apache.commons.io.IOUtils</font>**包,maven导入</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-io<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zw;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> ResponseDemo3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> Response响应字节数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> kli</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DATE</span> 2022/9/13 19:33</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(\"/resp3\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResponseDemo3</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> IOException {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"resp3...get\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//读取文件</span></span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">\"d://zw.jpg\"</span>);  <span class=\"comment\">//目录需存在图片</span></span><br><span class=\"line\">        <span class=\"comment\">//获取response字节输出流</span></span><br><span class=\"line\">        <span class=\"type\">ServletOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> resp.getOutputStream();</span><br><span class=\"line\">        <span class=\"comment\">//完成流的copy</span></span><br><span class=\"line\">        <span class=\"comment\">//需要导包  commons-io  然后进入项目文件设置Artifacts-&gt; 创建lib目录 put into output root</span></span><br><span class=\"line\">        IOUtils.copy(fis,os);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doPost(req, resp);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"/posts/bc07bc32/53.png\" style=\"zoom:50%;\">\n\n\n<p><img src=\"/posts/bc07bc32/12.png\"></p>\n<h1 id=\"四、会话跟踪技术\"><a href=\"#四、会话跟踪技术\" class=\"headerlink\" title=\"四、会话跟踪技术\"></a>四、会话跟踪技术</h1><h3 id=\"会话跟踪技术的概述\"><a href=\"#会话跟踪技术的概述\" class=\"headerlink\" title=\"会话跟踪技术的概述\"></a>会话跟踪技术的概述</h3><p>会话</p>\n<p>对于 会话跟踪 这四个词，我们需要拆开来进行解释，首先要理解什么是 <strong>会话</strong> ，然后再去理解什么是 <strong>会话跟踪</strong> </p>\n<h4 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h4><ul>\n<li><strong>会话:<strong>用户打开浏览器，访问一个web服务器的资源，</strong><font color=\"ondine\">会话建立</font><strong>，直到有一方断开连接(关闭浏览器)，</strong><font color=\"ondine\">会话结束</font></strong>, 整个过程称之为一个会话。在一次会话中可以包含==多次==请求和响应。<ul>\n<li>从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了。  </li>\n<li>会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着。  </li>\n<li>浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为==会话==。</li>\n</ul>\n</li>\n</ul>\n<img src=\"/posts/bc07bc32/54.png\" alt=\"image-20230309100243973\" style=\"zoom: 50%;\">\n\n<blockquote>\n<p>每个浏览器都会与服务端建立了一个会话，加起来总共是==<strong>3</strong>==个会话。  </p>\n</blockquote>\n<h4 id=\"会话跟踪\"><a href=\"#会话跟踪\" class=\"headerlink\" title=\"会话跟踪\"></a>会话跟踪</h4><p>会话跟踪:一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间==<strong>共享数据=</strong>=。</p>\n<blockquote>\n<p>有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学曾经来过，这称之为有状态会话。  </p>\n<p>一个网站，怎么证明你来过？ 客户端 服务端 服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie  </p>\n<p>客户端 ： 服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie 服务端：服务器登记你来过了，下次你来的时候我来匹配你； seesion  </p>\n</blockquote>\n<ul>\n<li>服务器会收到多个请求，这多个请求可能来自多个浏览器，如上图中的6个请求来自3个浏览器  </li>\n<li>服务器需要用来识别请求是否来自同一个浏览器。  </li>\n<li>服务器用来识别浏览器的过程，这个过程就是==会话跟踪==  </li>\n<li>服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据</li>\n</ul>\n<p><strong>为什么现在浏览器和服务器不支持数据共享呢?</strong>  </p>\n<ul>\n<li>浏览器和服务器之间使用的是HTTP请求来进行数据传输  </li>\n<li>HTTP协议是==无状态==的，每次浏览器向服务器请求时，服务器都会将该请求视为==新的==请求  </li>\n<li>HTTP协议设计成无状态的目的是让每次请求之间相互独立，互不影响  </li>\n<li>请求与请求之间独立后，就无法实现多次请求之间的数据共享</li>\n</ul>\n<p><strong>分析完具体的原因后，那么该如何实现会话跟踪技术呢? 具体的实现方式有:</strong>  </p>\n<ol>\n<li><strong><font color=\"blue\">客户端会话跟踪技术：</font></strong>==<strong><font color=\"ondine\">Cookie</font></strong>==  </li>\n<li><strong><font color=\"blue\">服务端会话跟踪技术：</font></strong>==<strong><font color=\"ondine\">Session</font></strong>==</li>\n</ol>\n<p>这两个技术都可以实现会话跟踪，它们之间最大的区别:  </p>\n<p>==<strong>Cookie<font color=\"orange\">是存储在浏览器端</font></strong></p>\n<p>==<strong>Session<font color=\"orange\">是存储在服务器端</font></strong>  </p>\n<p>例如：用户点击超链接购买一个商品，程序应该保存用户所购买的商品以便于用户点击结账可以得到用户所购买的商品信息。  </p>\n<p>思考：用户购买的商品保存在request或ServletContent中是否可以?  </p>\n<img src=\"/posts/bc07bc32/55.png\" alt=\"image-20230309103549480\" style=\"zoom: 50%;\">\n\n<p><strong>小结</strong>  </p>\n<ul>\n<li>HTTP协议是无状态的，靠HTTP协议是无法实现会话跟踪  </li>\n<li>想要实现会话跟踪，就需要用到Cookie和Session</li>\n</ul>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>==Cookie==：客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问  </p>\n<img src=\"/posts/bc07bc32/56.png\" alt=\"image-20230309103822607\" style=\"zoom:67%;\">\n\n\n\n<ul>\n<li>服务端提供了两个Servlet，分别是ServletA和ServletB  </li>\n<li>浏览器发送HTTP请求1给服务端，服务端ServletA接收请求并进行业务处理  </li>\n<li>服务端ServletA在处理的过程中可以创建一个Cookie对象并将 name=zs 的数据存入Cookie  </li>\n<li>服务端ServletA在响应数据的时候，会把Cookie对象响应给浏览器  </li>\n<li>浏览器接收到响应数据，会把Cookie对象中的数据存储在浏览器内存中，此时浏览器和服务端就==建立了一次会话==  </li>\n<li>==在同一次会话==中浏览器再次发送HTTP请求2给服务端ServletB，浏览器会携带Cookie对象中的所有数据  </li>\n<li>ServletB接收到请求和数据后，就可以获取到存储在Cookie对象中的数据，这样同一个会话中的多次请求之间就实现了数据共享</li>\n</ul>\n<p>对于Cookie的操作主要分两大类，本别是==<strong>发送Cookie</strong>==和==<strong>获取Cookie</strong>==  </p>\n<p><strong>发送Cookie</strong>  </p>\n<ul>\n<li>创建Cookie对象，并设置数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(<span class=\"string\">\"key\"</span>,<span class=\"string\">\"value\"</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>发送Cookie到客户端：使用==response==对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">response.addCookie(cookie);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>获取Cookie</strong>  </p>\n<ul>\n<li>获取客户端携带的所有Cookie，使用==request==对象</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Cookie[] cookies = request.getCookies();</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>遍历数组，获取每一个Cookie对象：for  </li>\n<li>使用Cookie对象方法获取数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cookie.getName();</span><br><span class=\"line\">cookie.getValue();</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>小结</strong>  </p>\n<ul>\n<li><strong>发送Cookie:</strong>  <ul>\n<li>创建Cookie对象，并设置值:Cookie cookie = new Cookie(“key”,”value”);  </li>\n<li>发送Cookie到客户端使用的是Reponse对象:response.addCookie(cookie);</li>\n</ul>\n</li>\n<li><strong>获取Cookie:</strong>  <ul>\n<li>使用Request对象获取Cookie数组:Cookie[] cookies = request.getCookies();  </li>\n<li>遍历数组  </li>\n<li>获取数组中每个Cookie对象的值:cookie.getName()和cookie.getValue()</li>\n</ul>\n</li>\n</ul>\n<p><strong>Cookie的特点和作用</strong>  </p>\n<ol>\n<li>cookie存储数据在客户端浏览器  </li>\n<li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li>\n</ol>\n<ul>\n<li>作用：<ol>\n<li>cookie一般用于存出少量的不太敏感的数据  </li>\n<li>在不登录的情况下，完成服务器对客户端的身份识别</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><ol>\n<li><strong>概念</strong></li>\n</ol>\n<p>==<strong>Session</strong>==：<strong>服务端会话跟踪技术：将数据保存到服务端。</strong>  </p>\n<ul>\n<li>Session是存储在服务端而Cookie是存储在客户端  </li>\n<li>存储在客户端的数据容易被窃取和截获，存在很多不安全的因素  </li>\n<li>存储在服务端的数据相比于客户端来说就更安全</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Session的工作流程</strong></li>\n</ol>\n<img src=\"/posts/bc07bc32/57.png\" alt=\"image-20230309104904713\" style=\"zoom:50%;\">\n\n<ul>\n<li>在服务端的AServlet获取一个Session对象，把数据存入其中  </li>\n<li>在服务端的BServlet获取到相同的Session对象，从中取出数据  </li>\n<li>就可以实现一次会话中多次请求之间的数据共享了</li>\n</ul>\n<p><strong>常用的API:</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">req.getSession();   -&gt;获取当前的会话，没有则创建一个新的会话</span><br><span class=\"line\">req.getSession(<span class=\"literal\">true</span>); -&gt; 效果和不带参数相同</span><br><span class=\"line\">req.getSession(<span class=\"literal\">false</span>); -&gt; 获取当前会话，没有则返回<span class=\"literal\">null</span>，不会创建新的</span><br><span class=\"line\">session.getId();       -&gt; 获取sessinID</span><br><span class=\"line\">session.isNew();       -&gt; 判断当前session是否是新的</span><br><span class=\"line\">session.getMaxInactiveInterval();   -&gt; session的非激活间隔时长，默认<span class=\"number\">1800</span>秒</span><br><span class=\"line\">session.setMaxInactiveInterval();</span><br><span class=\"line\">session.invalidate();  -&gt; 强制性让会话立即生效</span><br><span class=\"line\">....</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>例子：</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException {</span><br><span class=\"line\">       <span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> req.getSession();</span><br><span class=\"line\">       System.out.println(session.getId());</span><br><span class=\"line\">   }</span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"/posts/bc07bc32/13.png\" style=\"zoom: 33%;\">\n\n<p><strong>Session的原理</strong>  </p>\n<ul>\n<li>Session是基于Cookie来实现的</li>\n</ul>\n<p><strong>Session的钝化和活化</strong>  </p>\n<ul>\n<li>session数据存储在服务端，服务器重启后，session数据会被保存  </li>\n<li>浏览器被关闭启动后，重新建立的连接就已经是一个全新的会话，获取的session数据也是一个新的对象  </li>\n<li>session的数据要想共享，浏览器不能关闭，所以session数据不能长期保存数据  </li>\n<li>cookie是存储在客户端，是可以长期保存</li>\n</ul>\n<p><strong>Cookie和Session小结</strong>  </p>\n<ul>\n<li>Cookie 和 Session 都是来完成一次会话内多次请求间==数据共享==的。</li>\n</ul>\n<p>所需两个对象放在一块，就需要思考:  </p>\n<p>Cookie和Session的区别是什么?  </p>\n<p>Cookie和Session的应用场景分别是什么?</p>\n<ul>\n<li>区别:  <ul>\n<li>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端  </li>\n<li>安全性：Cookie不安全，Session安全  </li>\n<li>数据大小：Cookie最大3KB，Session无大小限制  </li>\n<li>存储时间：Cookie可以通过setMaxAge()长期存储，Session默认30分钟  </li>\n<li>服务器性能：Cookie不占服务器资源，Session占用服务器资源</li>\n</ul>\n</li>\n<li>应用场景:  <ul>\n<li>购物车:使用Cookie来存储  </li>\n<li>以登录用户的名称展示:使用Session来存储  </li>\n<li>记住我功能:使用Cookie来存储  </li>\n<li>验证码:使用session来存储</li>\n</ul>\n</li>\n<li>结论  <ul>\n<li>Cookie是用来保证用户在未登录情况下的身份识别  </li>\n<li>Session是用来保存用户登录后的数据</li>\n</ul>\n</li>\n</ul>\n","categories":["前端"],"tags":["前端"]},{"title":"Java多线程","url":"/posts/a2c3ad19/","content":"<h1 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h1><p>Thread 、Runnable、Callable</p>\n<p>类              接口              接口</p>\n<h1 id=\"继承Thread类\"><a href=\"#继承Thread类\" class=\"headerlink\" title=\"继承Thread类\"></a>继承Thread类</h1><ul>\n<li><p>子类继承Thread类具备多线程能力</p>\n</li>\n<li><p>启动线程：子类对象.start()<br><font color=\"red\">不建议使用：避免OOP单继承局限性</font></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我在看代码！\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        test1 test2=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        test2.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我在学习多线程！\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<h1 id=\"Thread类的有关方法\"><a href=\"#Thread类的有关方法\" class=\"headerlink\" title=\"Thread类的有关方法\"></a>Thread类的有关方法</h1><ul>\n<li><p><font color=\"red\">void start():</font>启动线程，并执行对象的run()方法</p>\n</li>\n<li><p><font color=\"red\">run():</font>线程在被调度时执行的操作</p>\n</li>\n<li><p><font color=\"red\">String getName():</font>返回线程的名称</p>\n</li>\n<li><p><font color=\"red\">void setName(String name):</font>设置该线程名称</p>\n</li>\n<li><p><font color=\"red\">static Thread currentThread(): </font>返回当前线程。在Thread子类中就 是this，通常用于主线程和Runnable实现类</p>\n</li>\n<li><p><font color=\"red\">static void yield()：</font>线程让步</p>\n<ul>\n<li><blockquote>\n<p>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p>\n<p>若队列中没有同优先级的线程，忽略此方法</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><font color=\"red\">join() ：</font>当某个程序执行流中调用其他线程的 join() 方法时，调用线程将 被阻塞，直到 join() 方法加入的 join 线程执行完为止</p>\n</li>\n<li><p><font color=\"red\">static void sleep(long millis)：</font>(指定时间:毫秒)</p>\n<ul>\n<li><blockquote>\n<p>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队。</p>\n<p>抛出InterruptedException异常</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>stop():</strong> 强制线程生命期结束，不推荐使用</p>\n</li>\n<li><p><strong>boolean isAlive()：</strong>返回boolean，判断线程是否还活着</p>\n</li>\n</ul>\n<h1 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h1><ul>\n<li><p>实现接口Runnable具有多线程能力</p>\n</li>\n<li><p>启动线程：传入目标对象+Thread对象.start()<br><font color=\"red\">推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使</font></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我在看代码！\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        test1 test2=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(test2).start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"我在学习多线程！\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"多线程并发问题\"><a href=\"#多线程并发问题\" class=\"headerlink\" title=\"多线程并发问题\"></a>多线程并发问题</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{  <span class=\"comment\">//调用Runnable</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> ticketNums=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>){</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticketNums&lt;=<span class=\"number\">0</span>){</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"--&gt;\"</span>+ticketNums--+<span class=\"string\">\"票\"</span>);</span><br><span class=\"line\">        }<span class=\"comment\">//获取多线程名字   Thread.currentThread().getName</span></span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        test1 t1=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">\"张三\"</span>).start();   <span class=\"comment\">//多线程名字</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">\"李四\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">\"黄牛\"</span>).start();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"龟兔赛跑\"><a href=\"#龟兔赛跑\" class=\"headerlink\" title=\"龟兔赛跑\"></a>龟兔赛跑</h1></li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {  <span class=\"comment\">//模拟兔子休息</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">\"兔子\"</span>)&amp;&amp; i%<span class=\"number\">10</span>==<span class=\"number\">0</span>){   <span class=\"comment\">//10步睡眠停顿</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"type\">boolean</span> flag=gameOver(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag){</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"--&gt;跑了\"</span>+i+<span class=\"string\">\"步\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">gameOver</span><span class=\"params\">(<span class=\"type\">int</span> steps)</span>{  <span class=\"comment\">//判断是否完成比赛</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (winner!=<span class=\"literal\">null</span>){</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        }{</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (steps&gt;=<span class=\"number\">100</span>){</span><br><span class=\"line\">                winner = Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"winner is \"</span>+winner);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        test1 t1=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">\"兔子\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">\"乌龟\"</span>).start();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Callable接口-了解即可-扩充\"><a href=\"#Callable接口-了解即可-扩充\" class=\"headerlink\" title=\"Callable接口(了解即可)扩充\"></a>Callable接口(了解即可)扩充</h1><ol>\n<li><p>实现Callable接口，需要返回类型</p>\n</li>\n<li><p>重写call方法，需要抛出异常</p>\n</li>\n<li><p>创建目标对象  如：t1</p>\n</li>\n<li><p>创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1);</p>\n</li>\n<li><p>提交执行：Future<boolean> result1 = ser.submit(t1);  // t1为目标对象</boolean></p>\n</li>\n<li><p>获取结果：boolean r1 = result1.get()</p>\n</li>\n<li><p>关闭服务：ser.shutdownNow();</p>\n<p><code>演示：利用callable改造下载图片案例</code></p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.FileUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.testng.annotations.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/22</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">callable的好处</span></span><br><span class=\"line\"><span class=\"comment\">1. 可以定义返回值</span></span><br><span class=\"line\"><span class=\"comment\">2. 可以抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Boolean&gt; {   <span class=\"comment\">//设置返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">test</span><span class=\"params\">(String url, String name)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">call</span><span class=\"params\">()</span>  {</span><br><span class=\"line\">        webDownloader webDownloader1=<span class=\"keyword\">new</span> <span class=\"title class_\">webDownloader</span>();</span><br><span class=\"line\">        webDownloader1.downloader(url,name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"下载了文件名为：\"</span>+name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException {</span><br><span class=\"line\">        test t1=<span class=\"keyword\">new</span> <span class=\"title class_\">test</span>(<span class=\"string\">\"https://blog-zw.top/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png\"</span>,<span class=\"string\">\"1.jpg\"</span>);</span><br><span class=\"line\">        test t2=<span class=\"keyword\">new</span> <span class=\"title class_\">test</span>(<span class=\"string\">\"https://blog-zw.top/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png\"</span>,<span class=\"string\">\"2.jpg\"</span>);</span><br><span class=\"line\">        test t3=<span class=\"keyword\">new</span> <span class=\"title class_\">test</span>(<span class=\"string\">\"https://blog-zw.top/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png\"</span>,<span class=\"string\">\"3.jpg\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务  线程池   池子里有3个线程</span></span><br><span class=\"line\">        ExecutorService ser= Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//提交执行</span></span><br><span class=\"line\">        Future&lt;Boolean&gt; r1=ser.submit(t1);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r2=ser.submit(t2);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r3=ser.submit(t3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> rs1=r1.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> rs2=r2.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> rs3=r3.get();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//打印返回结果</span></span><br><span class=\"line\">\t\tSystem.out.println(rs1);</span><br><span class=\"line\">        System.out.println(rs2);</span><br><span class=\"line\">        System.out.println(rs3);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//关闭服务</span></span><br><span class=\"line\">        ser.shutdown();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">webDownloader</span>{  <span class=\"comment\">//下载</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">downloader</span><span class=\"params\">(String url,String name)</span> {</span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                FileUtils.copyURLToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(url),<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(name));</span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (IOException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"io异常，downloader方法出现异常\"</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Lamda表达式\"><a href=\"#Lamda表达式\" class=\"headerlink\" title=\"Lamda表达式\"></a>Lamda表达式</h1><ol>\n<li><p>希腊字母表中排序第十一位的字母，英文名称为Lambda</p>\n</li>\n<li><p>避免匿名内部类定义过多</p>\n</li>\n<li><p>其实质属于函数式编程的概念</p>\n</li>\n</ol>\n<p>为什么要使用lambda表达式？</p>\n<pre><code>* 避免匿名内部类定义过多\n* 可以让你的代码看起来很简洁\n* 去掉了一堆没有意义的代码，只留下核心的逻辑。\n</code></pre>\n   <figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/22</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">like2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ilike</span> {</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"I like lamdad-&gt;静态内部类\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">            <span class=\"type\">ilike</span> <span class=\"variable\">like</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">like</span>();   <span class=\"comment\">//接口new 外部类</span></span><br><span class=\"line\">            like.lamda();              <span class=\"comment\">//对象调用方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">            like = <span class=\"keyword\">new</span> <span class=\"title class_\">like2</span>();         <span class=\"comment\">// 静态内部类 new 对象</span></span><br><span class=\"line\">            like.lamda();              <span class=\"comment\">// 把静态内部类，赋给like对象，就不用创建新对象了，</span></span><br><span class=\"line\">            <span class=\"comment\">// like2 zw = new like2(); // 也可以这样创建一个对象，上面的就是覆盖了对象</span></span><br><span class=\"line\">            <span class=\"comment\">// zw.lamda();</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">class</span> <span class=\"title class_\">like3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ilike</span> {</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> {</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"I like lamdad-&gt;局部内部类\"</span>);</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">            like = <span class=\"keyword\">new</span> <span class=\"title class_\">like3</span>();</span><br><span class=\"line\">            like.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            like = <span class=\"keyword\">new</span> <span class=\"title class_\">ilike</span>() {</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> {</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"I like lamdad-&gt;匿名内部类\"</span>);</span><br><span class=\"line\">                }</span><br><span class=\"line\">            };</span><br><span class=\"line\">            like.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ilike</span> <span class=\"variable\">zw</span> <span class=\"operator\">=</span> () -&gt; {  <span class=\"comment\">// lamda表示简化</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"I like lamd-&gt;lamda表达式\"</span>);</span><br><span class=\"line\">            };</span><br><span class=\"line\">            zw.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            zw = () -&gt; {        <span class=\"comment\">// 简化1：</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"I like lamdba-&gt;简化 类型 lamdab表达式，\"</span>);</span><br><span class=\"line\">            };</span><br><span class=\"line\">            zw.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*zw = a -&gt; {        // 简化2：  在有参数的情况下 可以简化括号</span></span><br><span class=\"line\"><span class=\"comment\">                System.out.println(\"I like lamdba-&gt;简化lamdba表达式\");</span></span><br><span class=\"line\"><span class=\"comment\">            };*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">            zw = () -&gt;       <span class=\"comment\">// 简化3：   只有一条语句情况下可以简化花括号</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"I like lamdba-&gt;简化 类型和花括号 lamdba表达式，\"</span>);</span><br><span class=\"line\">            zw.lamda();</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            总结：</span></span><br><span class=\"line\"><span class=\"comment\">               1.lamdba表达式只能有一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹</span></span><br><span class=\"line\"><span class=\"comment\">               2. 前提是接口是函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">               3. 多个参数可以去掉参数类型</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ilike</span> {</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">like</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ilike</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I like lamdad-&gt;外部类\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"静态代理类\"><a href=\"#静态代理类\" class=\"headerlink\" title=\"静态代理类\"></a>静态代理类</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    静态代理模式总结：</span></span><br><span class=\"line\"><span class=\"comment\">    真实对象和代理对象都要实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\">    代理对象要代理真实的角色</span></span><br><span class=\"line\"><span class=\"comment\">    好处：</span></span><br><span class=\"line\"><span class=\"comment\">    代理对象可以做很多真实对象做不了的事情(也就布置现场和结婚)</span></span><br><span class=\"line\"><span class=\"comment\">    真实对象专注做自己的事情</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    这句话说出来就明白了：婚礼公司相当于thread，结婚的人相当于实现runnable接口的类。</span></span><br><span class=\"line\"><span class=\"comment\">    用thread代替接口实现类做一些东西。</span></span><br><span class=\"line\"><span class=\"comment\">    就是把Thread作为代理类使用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">jintaidaili</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">        You you=<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;{System.out.println(<span class=\"string\">\"我爱你\"</span>);}).start();   <span class=\"comment\">//Lamdba表达式</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">WedddingCompany</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>()).HappyMarry();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">WedddingCompany</span> <span class=\"variable\">wedddingCompany</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WedddingCompany</span>(you);</span><br><span class=\"line\">        wedddingCompany.HappyMarry();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数式接口，结婚</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">Marry</span>{</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//真实角色，你去结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"zw要结婚了，超开心！\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色,帮助你结婚</span></span><br><span class=\"line\"><span class=\"comment\">//传入一个对象进行结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WedddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span>{</span><br><span class=\"line\">    <span class=\"comment\">//代理谁-》真实角色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Marry target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WedddingCompany</span><span class=\"params\">(Marry target)</span>{</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target=target;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target.HappyMarry();  <span class=\"comment\">//这就是真实对象</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"结婚之后，收尾款\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"结婚之前,布置现场\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h1><h2 id=\"线程方法\"><a href=\"#线程方法\" class=\"headerlink\" title=\"线程方法\"></a>线程方法</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">setPriority(int newPriority)</td>\n<td align=\"left\">更改线程的优先级</td>\n</tr>\n<tr>\n<td align=\"left\">static void sleep(long millis)</td>\n<td align=\"left\">在指定的毫秒数内让当前正在执行的线程休眠</td>\n</tr>\n<tr>\n<td align=\"left\">void join()</td>\n<td align=\"left\">等待该线程终止</td>\n</tr>\n<tr>\n<td align=\"left\">static void yield()</td>\n<td align=\"left\">暂停当前正在执行的线程对象，并执行其他线程 (礼让)</td>\n</tr>\n<tr>\n<td align=\"left\">void interrupt()</td>\n<td align=\"left\">中断线程，别用这个方式</td>\n</tr>\n<tr>\n<td align=\"left\">boolean isAive()</td>\n<td align=\"left\">测试线程是否处于活动状态</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{</span><br><span class=\"line\">    <span class=\"comment\">//1.线程中定义线程体使用的标识</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag){</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"run....Thread\"</span>+i++);</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//2.线程体使用该标识</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//3.设置一个公开的方法停止线程，转标识位</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">test2</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">test2</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1).start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"main\"</span>+i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">900</span>){</span><br><span class=\"line\">                t1.stop();   <span class=\"comment\">//停止子线程</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"线程该停止了\"</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>推荐线程自己停下来</p>\n<p>建议使用一个标志位进行终止变量当 flag=false,则终止线程运行</p>\n<p>以上代码停止的是子线程</p>\n<h1 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h1><p>要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类 及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的<strong>五种状态</strong>：</p>\n<ul>\n<li><font color=\"red\">新建：</font>当一个<strong>Thread</strong>类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>\n<li><font color=\"red\">就绪：</font>处于新建状态的线程被<strong>start()<strong>后，将进入线程队列等待</strong>CPU</strong>时间片，此时它已 具备了运行的条件，只是没分配到CPU资源</li>\n<li><font color=\"red\">运行：</font>当就绪的线程被调度并获得<strong>CPU</strong>资源时,便进入运行状态， **run()**方法定义了线 程的操作和功能</li>\n<li><font color=\"red\">阻塞：</font>在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 <strong>CPU</strong> 并临时中 止自己的执行，进入阻塞状态</li>\n<li><font color=\"red\">死亡：</font> 线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li>\n</ul>\n<h1 id=\"线程休眠-sleep\"><a href=\"#线程休眠-sleep\" class=\"headerlink\" title=\"线程休眠_sleep\"></a>线程休眠_sleep</h1><p>Thread.sleep(1000);</p>\n<ul>\n<li>sleep(时间)指定当前线程阻塞的毫秒数；</li>\n<li>sleep存在异常interruptedException;   //需要抛出</li>\n<li>sleep时间到达后线程进入就绪状态；</li>\n<li>sleep可以模拟网络延时，倒计时等。</li>\n<li>每个对象都有一个锁,sleep不会释放锁；</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/26</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancDaojishi</span> {</span><br><span class=\"line\">    <span class=\"comment\">//模拟倒计时</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tenDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            System.out.println(num--);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">0</span>) {</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印当前系统时间，前一秒</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            <span class=\"type\">Date</span> <span class=\"variable\">starTime</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>){</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">\"HH:mm:ss\"</span>).format(starTime));</span><br><span class=\"line\">                starTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis());</span><br><span class=\"line\">            }</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h1><p>Thread.yield();   </p>\n<ul>\n<li><p>礼让线程，让当前正在执行的线程暂停，但不堵塞</p>\n</li>\n<li><p>将线程从运行状态转为就绪状态</p>\n</li>\n<li><p>让cpu重新调度，礼让不一定成功！看cpu心情</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancYieid</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">MyYield</span> <span class=\"variable\">myYield</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyYield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">\"a\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">\"b\"</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"线程开始执行\"</span>);</span><br><span class=\"line\">        Thread.yield();    <span class=\"comment\">//礼让   (不一定成功)</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"线程停止执行\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>从运行到就绪状态，就是礼让，还是有抢夺CPU资源的机会的</p>\n</li>\n</ul>\n<h1 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h1><p>​    thread.join()   </p>\n<ul>\n<li>Join合并线程，待线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//测试Join方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancJoin</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"线程vip来了\"</span>+i);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException {</span><br><span class=\"line\">        <span class=\"type\">duoxiancJoin</span> <span class=\"variable\">testJoin</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">duoxiancJoin</span>();</span><br><span class=\"line\">        Thread thread= <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testJoin);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>){</span><br><span class=\"line\">                <span class=\"comment\">//start()要放到if里面，不然在主线程启动时，vip线程也在执行中</span></span><br><span class=\"line\">                thread.start();</span><br><span class=\"line\">                thread.join();   <span class=\"comment\">//插队</span></span><br><span class=\"line\">            }</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"main\"</span>+i);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"线程状态观测\"><a href=\"#线程状态观测\" class=\"headerlink\" title=\"线程状态观测\"></a>线程状态观测</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">thread.getState()   线程状态观测</span><br><span class=\"line\"></span><br><span class=\"line\">枚举 Thread.State</span><br><span class=\"line\">线程状态。线程可以处于下列状态之一： </span><br><span class=\"line\"></span><br><span class=\"line\">NEW</span><br><span class=\"line\">至今尚未启动的线程处于这种状态。 </span><br><span class=\"line\">RUNNABLE</span><br><span class=\"line\">正在 Java 虚拟机中执行的线程处于这种状态。 </span><br><span class=\"line\">BLOCKED</span><br><span class=\"line\">受阻塞并等待某个监视器锁的线程处于这种状态。 </span><br><span class=\"line\">WAITING</span><br><span class=\"line\">无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。 </span><br><span class=\"line\">TIMED_WAITING</span><br><span class=\"line\">等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。 </span><br><span class=\"line\">TERMINATED</span><br><span class=\"line\">已退出的线程处于这种状态。</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancState</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException {</span><br><span class=\"line\">     Thread thread= <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;{</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">             <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                 Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">             } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                 e.printStackTrace();</span><br><span class=\"line\">             }</span><br><span class=\"line\">         }</span><br><span class=\"line\">         System.out.println(<span class=\"string\">\"////////\"</span>);    <span class=\"comment\">//结束打印</span></span><br><span class=\"line\">     });</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//观察状态</span></span><br><span class=\"line\">        Thread.<span class=\"type\">State</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察启动后</span></span><br><span class=\"line\">        thread.start();   <span class=\"comment\">//启动</span></span><br><span class=\"line\">        state=thread.getState();</span><br><span class=\"line\">        System.out.println(state);  <span class=\"comment\">//Run</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (state!=Thread.State.TERMINATED){   <span class=\"comment\">//只要线程不终止</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);    <span class=\"comment\">//100毫秒刷新</span></span><br><span class=\"line\">            state=thread.getState();   <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">            System.out.println(state);   <span class=\"comment\">//输出状态</span></span><br><span class=\"line\">        }</span><br><span class=\"line\"><span class=\"comment\">//线程中断或者结束，一旦进入死亡状态，就不能再次启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/a2c3ad19/1.png\"></p>\n<h1 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h1><ul>\n<li><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</p>\n</li>\n<li><p>线程的优先级用数字表示，范围从1~10.</p>\n<ol>\n<li>Thread.MIN_PRIORITY = 1;</li>\n<li>Thread.MAX_PRIOPITY = 10;</li>\n<li>Thread.NORM_PRIOPITY = 5;</li>\n</ol>\n</li>\n<li><p>使用以下方式改变或获取优先级</p>\n<ul>\n<li>getPriority.setPriority(int XXX)</li>\n</ul>\n<p><code>优先级的设定建议在start()调度前</code></p>\n<p><code>优先级低只是意味着调度的概率低.并不是优先级低就不会调用了.这都是看CPU的调度</code></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancYouxianji</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"comment\">//getPriority  返回线程的优先级</span></span><br><span class=\"line\">        <span class=\"comment\">//setPriority  更改线程的优先级</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"--&gt;\"</span>+Thread.currentThread().getPriority()); <span class=\"comment\">//主线程main的优先级</span></span><br><span class=\"line\">        <span class=\"type\">Mypriority</span> <span class=\"variable\">mypriority</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mypriority</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t6</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t2.setPriority(<span class=\"number\">1</span>);    <span class=\"comment\">//更改线程优先级</span></span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t3.setPriority(<span class=\"number\">4</span>);</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t4.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        t5.setPriority(-1);      //报错</span></span><br><span class=\"line\"><span class=\"comment\">//        t5.start();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        t6.setPriority(11);    //报错    默认线程是  5   0-10   10为最高级</span></span><br><span class=\"line\"><span class=\"comment\">//        t6.start();、</span></span><br><span class=\"line\">        <span class=\"comment\">//     优先级低只是意味着调度的概率低.并不是优先级低就不会调用了.这都是看CPU的调度</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">Mypriority</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"--&gt;\"</span>+Thread.currentThread().getPriority());</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h1><ul>\n<li>默认是false表示用户线程，正常的线程都是用户线程</li>\n<li>线程分为<font color=\"red\">用户线程</font>和<font color=\"red\">守护线程</font></li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>如：后台记录操作日志，监控内存，垃圾回收等待..</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> duoxianc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancShouhu</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">God</span> <span class=\"variable\">god</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">God</span>();</span><br><span class=\"line\">        youI you= <span class=\"keyword\">new</span> <span class=\"title class_\">youI</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(god);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"literal\">true</span>);  <span class=\"comment\">//默认是false表示用户线程，正常的线程都是用户线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        thread.start();     <span class=\"comment\">//守护线程启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(you).start();   <span class=\"comment\">//你启动</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">God</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{</span><br><span class=\"line\">    <span class=\"comment\">//守护线程 守护着你</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>){</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"上帝保佑着你\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">youI</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;<span class=\"number\">10</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"你一生都开心的活着\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"-====goofbye! world\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"线程同步机制（重点）\"><a href=\"#线程同步机制（重点）\" class=\"headerlink\" title=\"线程同步机制（重点）\"></a>线程同步机制（重点）</h1></li>\n<li><p>处理多线程问题时，<font color=\"red\">多个线程访问同一个对象(并发)</font>，并且某些线程还想修改这个对象，这个时候我们就需要线程同步. <font color=\"red\">线程同步其实就是一种等待</font>，多个需要同时访问此对象的线程进入<font color=\"red\">这个对象的等待池</font>形成队列，等待前面线程使用完毕，下一个线程再使用。</p>\n</li>\n<li><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<font color=\"red\">锁机制synchronized</font>,当一个线程获得对象的排它锁，独占资源，其他线程必须等待</p>\n</li>\n<li><p>一个线程持有锁会导致其他所有需要此锁的线程挂起</p>\n</li>\n<li><p>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题</p>\n</li>\n<li><p>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题</p>\n<p><code>形成条件：队列+锁</code></p>\n</li>\n</ul>\n<h1 id=\"三大不安全案例\"><a href=\"#三大不安全案例\" class=\"headerlink\" title=\"三大不安全案例\"></a>三大不安全案例</h1><h2 id=\"买票\"><a href=\"#买票\" class=\"headerlink\" title=\"买票\"></a>买票</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: syn</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不安全的买票</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnBuyTicket</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">BuyTicket</span> <span class=\"variable\">station</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">BuyTicket</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(station,<span class=\"string\">\"zw\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(station,<span class=\"string\">\"lwx\"</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(station,<span class=\"string\">\"黄牛党\"</span>).start();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BuyTicket</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticketNum</span> <span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span><span class=\"literal\">true</span>;   <span class=\"comment\">//外部停止方式</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"comment\">//买票</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag){</span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                buy();</span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException {</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ticketNum&lt;=<span class=\"number\">0</span>){</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"拿到\"</span>+ticketNum--);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"取钱\"><a href=\"#取钱\" class=\"headerlink\" title=\"取钱\"></a>取钱</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不安全的取钱</span></span><br><span class=\"line\"><span class=\"comment\">//两个人去银行取钱</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UNsafeBank</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">account</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">100</span>,<span class=\"string\">\"基金\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Drawing</span> <span class=\"variable\">zw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Drawing</span>(account,<span class=\"number\">50</span>,<span class=\"string\">\"你\"</span>);</span><br><span class=\"line\">        <span class=\"type\">Drawing</span> <span class=\"variable\">lwx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Drawing</span>(account,<span class=\"number\">100</span>,<span class=\"string\">\"girlFriend\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        zw.start();</span><br><span class=\"line\">        lwx.start();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//账户</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Account</span>{</span><br><span class=\"line\">    <span class=\"type\">int</span> money;   <span class=\"comment\">//余额</span></span><br><span class=\"line\">    String name;  <span class=\"comment\">//卡名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(<span class=\"type\">int</span> money, String name)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//银行</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Drawing</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    Account account;  <span class=\"comment\">//账户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> drawingMoney;   <span class=\"comment\">//取了多少钱</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> nowMoney;   <span class=\"comment\">//现在手里有多少钱</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Drawing</span><span class=\"params\">(Account account,<span class=\"type\">int</span> drawingMoney,String name)</span>{</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);   <span class=\"comment\">//把取钱的名字，调给父类 Thread  相当于给线程取名字</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.account=account;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.drawingMoney=drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取钱</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (account.money-drawingMoney&lt;<span class=\"number\">0</span>){    <span class=\"comment\">//账户的钱 减去 取的钱</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"钱不够取不了\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//sleep可以放大问题的发生性</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);     <span class=\"comment\">//延时 1秒</span></span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">//卡内余额= 余额 -你取的钱</span></span><br><span class=\"line\">        account.money=account.money-drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//你手里的钱</span></span><br><span class=\"line\">        nowMoney=nowMoney+drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(account.name+<span class=\"string\">\"余额为：\"</span>+account.money);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//继承 Thread 调用.this 也就相当于  Thread.currentThread().getName();</span></span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getName()+<span class=\"string\">\"手里的钱：\"</span>+nowMoney);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"线程不安全\"><a href=\"#线程不安全\" class=\"headerlink\" title=\"线程不安全\"></a>线程不安全</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: syn</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程不安全的集合</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnsafeList</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();   <span class=\"comment\">//ArrayList 线程不安全</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;{</span><br><span class=\"line\">                list.add(Thread.currentThread().getName());</span><br><span class=\"line\">            }).start();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">//原因比如说：两个线程同一瞬间，操作了同一个位置，把两个数组添加到了同一个位置，就把它覆盖掉了，然后元素就会少</span></span><br><span class=\"line\">        <span class=\"comment\">//少的元素就是这么来的</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">3000</span>);   <span class=\"comment\">//等待结果，休眠等待线程跑完</span></span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\">            System.out.println(list.size());   <span class=\"comment\">//</span></span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"同步方法和同步块\"><a href=\"#同步方法和同步块\" class=\"headerlink\" title=\"同步方法和同步块\"></a>同步方法和同步块</h1><p><code>锁的对象就是变化的量，需要增删改的对象</code></p>\n<h2 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h2><ul>\n<li><p>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需<br>要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：<br>synchronized方法和synchronized块</p>\n<ul>\n<li><blockquote>\n<p>同步方法：public synchronized void method(int args){}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>synchronized)方法控制对 “对像”的访问，每个对象对应一把锁，每个<br>synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞<br>方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获<br>得这个锁，继续执行</p>\n<ul>\n<li><blockquote>\n<p>缺陷：若将一个大的方法声明为synchronized将会影响效率</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>方法里面需要修改的内容才需要锁，锁的太多，浪费资源</p>\n</li>\n</ul>\n<h2 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h2><ul>\n<li><p>同步块：synchronized<font color=\"red\">(Obj){}</font></p>\n</li>\n<li><p><font color=\"red\">Obj </font>称为<strong>同步监视器</strong></p>\n<ul>\n<li>Obj 可以是任何对象，但是推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this,就是这个对象本身，或者是 class</li>\n</ul>\n</li>\n<li><p>同步监视器的执行过程</p>\n<ol>\n<li><p>第一个线程访问，锁定同步监视器，执行其中代码.</p>\n</li>\n<li><p>第二个线程访问，发现同步监视器被锁定，无法访问.</p>\n</li>\n<li><p>第一个线程访问完毕,解锁同步监视器.</p>\n</li>\n<li><p>第二个线程访问.发现同步监视器没有锁，然后锁定并访问</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//不安全的买票</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException {   <span class=\"comment\">//同步方法  锁的 this</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ticketNum&lt;=<span class=\"number\">0</span>){</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"拿到\"</span>+ticketNum--);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//取钱</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (account){   <span class=\"comment\">//把账户锁了  哪个类的属性发生变化，就锁哪个类</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (account.money-drawingMoney&lt;<span class=\"number\">0</span>){    <span class=\"comment\">//账户的钱 减去 取的钱</span></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">\"钱不够取不了\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"comment\">//sleep可以放大问题的发生性</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);     <span class=\"comment\">//延时 1秒</span></span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"comment\">//卡内余额= 余额 -你取的钱</span></span><br><span class=\"line\">            account.money=account.money-drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//你手里的钱</span></span><br><span class=\"line\">            nowMoney=nowMoney+drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(account.name+<span class=\"string\">\"余额为：\"</span>+account.money);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//继承 Thread 调用.this 也就相当于  Thread.currentThread().getName();</span></span><br><span class=\"line\">            System.out.println(<span class=\"built_in\">this</span>.getName()+<span class=\"string\">\"手里的钱：\"</span>+nowMoney);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//线程不安全的集合</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnsafeList</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();   <span class=\"comment\">//ArrayList 线程不安全</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) {</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;{</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (list){</span><br><span class=\"line\">                    list.add(Thread.currentThread().getName());</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }).start();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">//原因比如说：两个线程同一瞬间，操作了同一个位置，把两个数组添加到了同一个位置，就把它覆盖掉了，然后元素就会少</span></span><br><span class=\"line\">        <span class=\"comment\">//少的元素就是这么来的</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);   <span class=\"comment\">//等待结果，休眠等待线程跑完   加上同步块，必须sleep，要不然主线程会先输出</span></span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\">            System.out.println(list.size());   <span class=\"comment\">//</span></span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h1><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而<br>导致两个或者多个线程都在等待对方释放资源，都停止执行的情形.某一个同步块<br>同时拥有“<font color=\"red\">两个以上对象的锁</font>”时，就可能会发生“死锁”的问题。</p>\n<ul>\n<li>产生死锁的四个必要条件：<ol>\n<li>互斥条件：一个资源每次只能被一个进程使用。</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li>\n<li>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n</li>\n<li><strong>上面列出了死锁的四个必要条件，我们只要想办法破其中的任意一个或多个条件</strong><br><strong>就可以避免死锁发生</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: Lock</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeadLock</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        a a1=<span class=\"keyword\">new</span> <span class=\"title class_\">a</span>(<span class=\"number\">0</span>,<span class=\"string\">\"lwx\"</span>);</span><br><span class=\"line\">        a a2=<span class=\"keyword\">new</span> <span class=\"title class_\">a</span>(<span class=\"number\">1</span>,<span class=\"string\">\"zw\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        a1.start();</span><br><span class=\"line\">        a2.start();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Zw</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lwx</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">a</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>{</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            activity();</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">        <span class=\"keyword\">static</span> Zw zw= <span class=\"keyword\">new</span> <span class=\"title class_\">Zw</span>();</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"type\">Lwx</span> <span class=\"variable\">lwx</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Lwx</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">a</span><span class=\"params\">(<span class=\"type\">int</span> num, String name)</span> {</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        }</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">activity</span><span class=\"params\">()</span>{   <span class=\"comment\">//死锁</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num==<span class=\"number\">0</span>){</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (zw){</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">\"吃饭\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (lwx){    <span class=\"comment\">// 放到 if 外面就不会出现死锁</span></span><br><span class=\"line\">                        System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">\"打游戏\"</span>);</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">else</span> {</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lwx){</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">\"打游戏\"</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (zw){     <span class=\"comment\">//放到 if 外面就不会出现死锁</span></span><br><span class=\"line\">                        System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">\"吃饭\"</span>);</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\"></span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"lock锁\"><a href=\"#lock锁\" class=\"headerlink\" title=\"lock锁\"></a>lock锁</h1><ul>\n<li>从JDK5.0开始，Java提供了更强大的线程同步机制一一通过显式定义同步锁对<br>象来实现同步。同步锁使用L0ck对象充当</li>\n<li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。<br>锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开<br>始访问共享资源之前应先获得Lock对象</li>\n<li>ReentrantLock类实现了Lock,它拥有与synchronized相同的并发性和内存语<br>义，在实现线程安全的控制中，比较常用的是ReentrantLock,可以显式加锁、释<br>放锁。</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        lock.lock();   <span class=\"comment\">//加锁</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            <span class=\"comment\">//保证线程安全的代码</span></span><br><span class=\"line\">        }<span class=\"keyword\">finally</span> {</span><br><span class=\"line\">            lock.unlock();  <span class=\"comment\">//解锁</span></span><br><span class=\"line\">            <span class=\"comment\">//如果同步代码有异常，要将unlock()写入finally语句块</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: Lock</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LockTest</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        TestLock2 a1=<span class=\"keyword\">new</span> <span class=\"title class_\">TestLock2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(a1).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(a1).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLock2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        buy();   <span class=\"comment\">//调用buy方法</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buy</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                lock.lock();   <span class=\"comment\">//加锁</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ticket &gt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                    } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    }</span><br><span class=\"line\">                    System.out.println(ticket--);</span><br><span class=\"line\">                } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                }</span><br><span class=\"line\">            }</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>{  <span class=\"comment\">//如果同步代码有异常，要将unlock()写入finally语句块</span></span><br><span class=\"line\">                lock.unlock();   <span class=\"comment\">//解锁</span></span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"synchriized-与-Lock-的对比\"><a href=\"#synchriized-与-Lock-的对比\" class=\"headerlink\" title=\"synchriized 与 Lock 的对比\"></a>synchriized 与 Lock 的对比</h1><ul>\n<li><strong>Lock是显式锁(手动开启和关闭锁，别忘记关闭锁)synchronized是隐式锁，出了</strong><br><strong>作用域自动释放</strong></li>\n<li><strong>Lock只有代码块锁，synchronized有代码块锁和方法锁</strong></li>\n<li><strong>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展</strong><br><strong>性（提供更多的子类）</strong></li>\n<li><strong>优先使用顺序：</strong><ul>\n<li><strong>Lock&gt;同步代码块(已经进入了方法体，分配了相应资源)&gt;同步方法（在方</strong><br><strong>法体之外）</strong></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"线程协作\"><a href=\"#线程协作\" class=\"headerlink\" title=\"线程协作\"></a>线程协作</h1><h2 id=\"生产者消费者模式\"><a href=\"#生产者消费者模式\" class=\"headerlink\" title=\"生产者消费者模式\"></a>生产者消费者模式</h2><h3 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h3><p>应用场景：生产者和消费者问题</p>\n<ul>\n<li>假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将<br>仓库中产品取走消费.</li>\n<li>如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到<br>仓库中的产品被消费者取走为止.</li>\n<li>如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，<br>直到仓库中再次放入产品为止.</li>\n</ul>\n<h3 id=\"线程通信-分析\"><a href=\"#线程通信-分析\" class=\"headerlink\" title=\"线程通信-分析\"></a>线程通信-分析</h3><p><strong>这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之</strong><br><strong>间相互依赖，互为条件。</strong></p>\n<ul>\n<li>对于生产者，没有生产，产品之前，要通知消费者等待。而生产了产品之后，又<br>需要马上通知消费者消费</li>\n<li>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产品<br>以供消费。</li>\n<li>在生产者消费者问题中，仅有synchronized,是不够的<ul>\n<li>synchronized可阻止并发更新同一个共享资源，实现了同步</li>\n<li>synchronized不能用来实现不同线程之间的消息传递（通信）</li>\n</ul>\n</li>\n<li><strong>java提供了几个方法解决线程之间的通信问题</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>wait()</td>\n<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody></table>\n<p><font color=\"red\">注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常lllegalMonitorStateException</font></p>\n<h3 id=\"解决方式-1\"><a href=\"#解决方式-1\" class=\"headerlink\" title=\"解决方式 1\"></a>解决方式 1</h3><p>并发协作模型”生产者/消费者模式“–&gt;管程法</p>\n<ul>\n<li>生产者：负责生产数据的模块(可能是方法，对象，线程，进程);</li>\n<li>消费者：负责处理数据的模块(可能是方法，对象，线程，进程)；</li>\n<li>缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区</li>\n</ul>\n<p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产者 ，消费者，产品，缓冲区</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPC</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">synContainer</span> <span class=\"variable\">container</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">synContainer</span>();  <span class=\"comment\">//缓存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Productor</span>(container).start();     <span class=\"comment\">//启动生产者</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>(container).start();      <span class=\"comment\">//消费者</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产者</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Productor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>{</span><br><span class=\"line\">    synContainer container;          <span class=\"comment\">//传入缓冲区对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Productor</span><span class=\"params\">(synContainer container)</span>{</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.container=container;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) {</span><br><span class=\"line\">            container.push(<span class=\"keyword\">new</span> <span class=\"title class_\">Cicken</span>(i));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"生产了\"</span>+i+<span class=\"string\">\"只鸡\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费者</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>{</span><br><span class=\"line\">    synContainer container;       <span class=\"comment\">//传入缓冲区对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Consumer</span><span class=\"params\">(synContainer container)</span>{</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.container=container;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"消费了--&gt;\"</span>+container.pop().id+<span class=\"string\">\"只鸡\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//产品</span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">Cicken</span>{</span><br><span class=\"line\">    <span class=\"type\">int</span> id;  <span class=\"comment\">//产品编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Cicken</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//缓冲区</span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">synContainer</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//产品容器</span></span><br><span class=\"line\">    Cicken[] cickens =<span class=\"keyword\">new</span> <span class=\"title class_\">Cicken</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生产者放入</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">synchronized</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(Cicken cicken)</span>{</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count==<span class=\"number\">10</span>){</span><br><span class=\"line\">            <span class=\"comment\">//通知消费者消费  等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\"></span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">//如果没有满，我们就需要丢入产品</span></span><br><span class=\"line\">        cickens[count]=cicken;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notify();</span><br><span class=\"line\">        <span class=\"comment\">//可以通知消费者消费了</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Cicken <span class=\"title function_\">pop</span><span class=\"params\">()</span>{</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (count==<span class=\"number\">0</span>){</span><br><span class=\"line\">            <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"comment\">//等待生产者生产，消费者等待</span></span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果可以消费</span></span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        Cicken chicken=cickens[count];</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notify();</span><br><span class=\"line\">        <span class=\"comment\">//吃完了，通知生产者生产</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> chicken;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//消费者消费产品</span></span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"解决方式-2\"><a href=\"#解决方式-2\" class=\"headerlink\" title=\"解决方式 2\"></a>解决方式 2</h3><p>并发协作模型”生产者/消费者模式“–&gt;信号灯</p>\n<p>利用</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h3>","categories":["Java"],"tags":["Java"]},{"title":"Java容易忘记的","url":"/posts/8405865f/","content":"<h3 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承:\"></a>什么是继承:</h3><p>将具有<code>相同属性</code>和<code>方法</code>的类中相同属性和方法提取出，构建一个新类，这个新类就是父类，<code>然后由父类再构建子类，子类继承父类的属性和方法，使得子类对象具有父类的特征和行为</code></p>\n<hr>\n<h2 id=\"类变量、类方法与static关键字\"><a href=\"#类变量、类方法与static关键字\" class=\"headerlink\" title=\"类变量、类方法与static关键字:\"></a>类变量、类方法与static关键字:</h2><blockquote>\n<p>static修饰的变量和方法可以通过类名和对象名访问，<code>而不用static修饰的变量和方法只能通过对象名访问。</code></p>\n</blockquote>\n<ul>\n<li>类变量或静态常量：static修饰的属性称为类属性（类变量）<br>如：<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">zhangshan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        Student.play();   <span class=\"comment\">//类的属性 直接用类名调用</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"打游戏\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"方法名的重载和重写\"><a href=\"#方法名的重载和重写\" class=\"headerlink\" title=\"方法名的重载和重写\"></a>方法名的重载和重写</h2><h3 id=\"方法的重载：指同一个类中多个方法：\"><a href=\"#方法的重载：指同一个类中多个方法：\" class=\"headerlink\" title=\"方法的重载：指同一个类中多个方法：\"></a>方法的重载：指同一个类中多个方法：</h3><ul>\n<li><blockquote>\n<p>方法名相同</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>参数列表不同（个数、顺序、类型三者只要有一项不同）</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>与返回值、访问修饰符无关</p>\n</blockquote>\n</li>\n</ul>\n<p><code>发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</code></p>\n<h2 id=\"综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\"><a href=\"#综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\" class=\"headerlink\" title=\"综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\"></a>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</h2><h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写:\"></a>重写:</h2><ol>\n<li><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p>\n</li>\n<li><p>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</p>\n</li>\n<li><p>如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。<br>构造方法无法被重写</p>\n<h2 id=\"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\"><a href=\"#综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\" class=\"headerlink\" title=\"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\"></a>综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。</h2></li>\n</ol>\n<h2 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h2><ul>\n<li><blockquote>\n<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>\n</blockquote>\n<h3 id=\"方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂-Java-讲义》-）：\"><a href=\"#方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂-Java-讲义》-）：\" class=\"headerlink\" title=\"方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂 Java 讲义》 ）：\"></a><strong>方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂 Java 讲义》 ）：</strong></h3></li>\n<li><p>“两同”即方法名相同、形参列表相同；</p>\n</li>\n<li><p>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</p>\n</li>\n<li><p>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</p>\n</li>\n<li><blockquote>\n<p>关于 重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a><strong>extends关键字</strong></h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> health;  <span class=\"comment\">//健康值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> love;    <span class=\"comment\">//亲密值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name+<span class=\"string\">'，'</span>+health+<span class=\"string\">','</span>+love;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> {   <span class=\"comment\">//extends 继承关键字</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span><span class=\"string\">\"Q仔\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span><span class=\"string\">\"Q妹\"</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>有些父类成员不能继承：</strong></p>\n<ul>\n<li><code>private成员</code> </li>\n<li><code>子类与父类不在同包，使用默认访问权限的成员</code></li>\n<li><code>构造方法</code></li>\n</ul>\n<p><strong>继承特性：</strong></p>\n<ul>\n<li>传递性:B类继承A类，C类继承B类，C类也继承A类的属性和方法。</li>\n<li>单根性，一个子类只能继承一个父类。</li>\n</ul>\n<hr>\n<h2 id=\"super关键字\"><a href=\"#super关键字\" class=\"headerlink\" title=\"super关键字\"></a><strong>super关键字</strong></h2><p>子类访问父类的成员使用super。</p>\n<ul>\n<li><code>super():调用父类的构造方法。</code></li>\n<li><code>super.name:访问父类的属性。</code></li>\n<li><code>super.toString():访问父类的方法</code></li>\n</ul>\n<hr>\n<h2 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a><strong>方法的重写</strong></h2><p>在继承关系中，子类会自动继承父类中定义的方法，但有时在子类中需要对继承的方法进行一些修改，即对父类的方法进行重写。</p>\n<ul>\n<li>子类方法与父类方法具有相同的名字。</li>\n<li>参数列表与父类方法相同。</li>\n<li>返回值类型与父类方法相同。</li>\n<li>子类方法访问权限不能比父类更严格。</li>\n<li>抛出的异常<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> {  <span class=\"comment\">//Penguin子类重写toString()</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span> <span class=\"string\">\"Q仔\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span> <span class=\"string\">\"Q妹\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String sex;   <span class=\"comment\">//性别</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>{   <span class=\"comment\">//Penguin子类重写toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"built_in\">super</span>.toString(); <span class=\"comment\">//toString():访问父类的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> info+<span class=\"string\">\",\"</span>+sex;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"抽象类、抽象方法和abstract关键字\"><a href=\"#抽象类、抽象方法和abstract关键字\" class=\"headerlink\" title=\"抽象类、抽象方法和abstract关键字\"></a><strong>抽象类、抽象方法和abstract关键字</strong></h2><h3 id=\"1-抽象类\"><a href=\"#1-抽象类\" class=\"headerlink\" title=\"1. 抽象类\"></a>1. 抽象类</h3><ul>\n<li>在继承关系中，去实例化一个父类没有意义，<code>它的特征和方法无法确定，可以使用抽象类来限制父类被实例化，抽象类是不能被实例化的。</code><br>如：<blockquote>\n<p>Pet ww = new Pet(); //实例化父类没有意义</p>\n</blockquote>\n</li>\n<li>抽象类用关键字abstract来修饰。<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> {   <span class=\"comment\">//抽象类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> health;  <span class=\"comment\">//健康值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> love;    <span class=\"comment\">//亲密值</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> {  <span class=\"comment\">//企鹅类</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">    <span class=\"type\">Pet</span> <span class=\"variable\">ww</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();   <span class=\"comment\">//语法错误，抽象类无法实例化</span></span><br><span class=\"line\">    <span class=\"type\">Pet</span> <span class=\"variable\">zw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>(); <span class=\"comment\">//正确</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"2-抽象方法\"><a href=\"#2-抽象方法\" class=\"headerlink\" title=\"2. 抽象方法\"></a>2. 抽象方法</h3>父类的play方法，<code>每个子类实现步骤都不一样，即方法体没有实际意义的语句</code>，像这样的方法可以写成抽象方法。<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> {  <span class=\"comment\">//子类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>{ </span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> {   <span class=\"comment\">//父类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure></li>\n<li><code>抽象方法用abstract关键字修饰。</code></li>\n<li><code>抽象方法没有方法体。</code></li>\n<li><code>抽象方法必须在抽象类里。</code></li>\n<li><code>抽象方法必须在子类中被实现。</code></li>\n</ul>\n<hr>\n<h2 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a><strong>final关键字</strong></h2><p><code>final关键字修饰的变量的值是最终的值，即不能修改它的值—常量。</code></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span> <span class=\"string\">\"Q仔\"</span>;   <span class=\"comment\">//final 修饰变量的最终值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span> <span class=\"string\">\"Q妹\"</span>;  <span class=\"comment\">//final 修饰变量的最终值</span></span><br></pre></td></tr></tbody></table></figure>\n<p><code>final关键字修饰的类为最终的子类—不能被继承。</code></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span>  {   <span class=\"comment\">//最终只类</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1、final修饰的类不可以被继承，但可以继承其他的类。</p>\n<p>2、final修饰的方法子类可以继承但是不能重写。</p>\n<p>3、子类重写父类的非final方法可以加上final。</p>\n<p>4、被final修饰的基本数据类型的变量可以看作是常量，赋值后不能改变。</p>\n<p>5、被final修饰的引用数据类型变量的引用内存地址值不能改变，可以改变引用数据类型变量的属性值。</p>\n<p>6、被final修饰的成员变量必须在对象创建完成前进行赋值，可以直接赋值，如果没有直接赋值则需要用构造方法进行赋值，如果有多个构造方法则多个构造方法都要为其赋值，但是不能用set方法赋值。</p>\n<p>7、成员变量在堆内存中是有默认值的，final固定的是成员变量的手动赋值不是内存中的默认值。</p>\n<p>8、被final修饰的静态成员变量只能直接赋值或者通过静态代码块赋值。</p>\n<hr>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a><strong>多态性</strong></h2><ol>\n<li>对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类的引用）</li>\n<li>多态的使用，虚拟方法调用有了对象的多态性后,我们在编译期，只能调用父类声明的方法，但在运行期，我们实际指向的是子类重写父类方法。<br><code>总结：编译，看左边；运行,看右边。</code><br>如：<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Pet</span> <span class=\"variable\">qq</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>();  <span class=\"comment\">//对象的多态性：父类的引用指向子类的对象</span></span><br><span class=\"line\"><span class=\"type\">Pet</span> <span class=\"variable\">ww</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();</span><br></pre></td></tr></tbody></table></figure></li>\n<li>多态性的使用前提：<code>只适用于方法，不适用于属性（属性不会被覆盖和重写）</code><br>如：<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Pet qq=<span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>();</span><br><span class=\"line\">System.out.println(qq.j);   <span class=\"comment\">//调用父类的变量</span></span><br></pre></td></tr></tbody></table></figure></li>\n<li>“不要犯傻，如果它不是晚绑定，它就不是多态”</li>\n</ol>\n<h1 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h1><h3 id=\"abstract-抽象的\"><a href=\"#abstract-抽象的\" class=\"headerlink\" title=\"abstract 抽象的\"></a>abstract 抽象的</h3><ol>\n<li>可以用来修饰：类、方法</li>\n<li>具体的</li>\n</ol>\n<p>abstract修饰类：抽象类</p>\n<ul>\n<li><blockquote>\n<p>不能实例化</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>抽象类一定有构造器</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>都会提供抽象类的子类</p>\n</blockquote>\n</li>\n</ul>\n<p>abstract修饰方法：抽象方法</p>\n<ul>\n<li><blockquote>\n<p>抽象方法只方法声明，没方法体</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>包含抽象方法的类，一定是个抽象类。反之，抽象类中可以没有抽象方法的。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>若子类重写了父类中所的抽象方法后，此子类可实例化</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>若子类没重写父类中的所的抽象方法，则子类也是一个抽象类，需要abstract修饰</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li>注意点：</li>\n</ol>\n<ul>\n<li><blockquote>\n<ol>\n<li>abstract不能用来修饰：属性、构造器等结构</li>\n</ol>\n</blockquote>\n</li>\n<li><blockquote>\n<ol start=\"2\">\n<li>abstract不能用来修饰私方法、静态方法、final的方法、final的类</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n","categories":["Java"],"tags":["java"]},{"title":"Linux实用命令","url":"/posts/d4edbcf2/","content":"<h2 id=\"pwd-指令\"><a href=\"#pwd-指令\" class=\"headerlink\" title=\"pwd 指令\"></a><strong>pwd 指令</strong></h2><p><code>显示当前工作目录的绝对路径</code></p>\n<h2 id=\"ls-指令\"><a href=\"#ls-指令\" class=\"headerlink\" title=\"ls 指令\"></a><strong>ls 指令</strong></h2><h3 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h3><blockquote>\n<p><font color=\"#FF0000\"> -a  </font>——<em>显示当前目录所有的文件和目录，包括隐藏的</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> -l  </font>——<em>以列表的方式显示信息</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> -h  </font>——<em>显示文件大小时，以 k , m, G单位显示</em></p>\n</blockquote>\n<h2 id=\"cd-指令\"><a href=\"#cd-指令\" class=\"headerlink\" title=\"cd 指令\"></a><strong>cd 指令</strong></h2><h3 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\"> cd ~  </font>——<em>回到自己的家目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> cd ..  </font>——<em>回到当前目录的上一级目录</em></p>\n</blockquote>\n<h2 id=\"mkdir指令\"><a href=\"#mkdir指令\" class=\"headerlink\" title=\"mkdir指令\"></a><strong>mkdir指令</strong></h2><h3 id=\"常用参数-1\"><a href=\"#常用参数-1\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\"> mkdir /home/zw </font>——<em>创建一个目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> mkdir -p /home/zw </font>——<em>如果目录不存在的就新创建</em>一个。 </p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> mkdir -m 777 /home/zw</font>——<em>建立目录时，同时设置目录权限。</em></p>\n</blockquote>\n<h2 id=\"touch指令\"><a href=\"#touch指令\" class=\"headerlink\" title=\"touch指令\"></a><strong>touch指令</strong></h2><h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\"> touch hello.txt </font>——<em>创建一个空文件 hello.txt</em></p>\n</blockquote>\n<h2 id=\"cp指令-copy-拷贝\"><a href=\"#cp指令-copy-拷贝\" class=\"headerlink\" title=\"cp指令[copy 拷贝]\"></a><strong>cp指令[copy 拷贝]</strong></h2><h3 id=\"常用参数-2\"><a href=\"#常用参数-2\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><h4 id=\"cp-选项-source【源】-dest【目的文件】\"><a href=\"#cp-选项-source【源】-dest【目的文件】\" class=\"headerlink\" title=\"cp [选项] source【源】 dest【目的文件】\"></a>cp [选项] source【源】 dest【目的文件】</h4><blockquote>\n<p><font color=\"#FF0000\"> cp -r /home/zw/hello.txt /home/jj</font>——<em>递归复制整个文件夹,将hello.txt 拷贝到jj目录下</em></p>\n</blockquote>\n<h2 id=\"rm指令\"><a href=\"#rm指令\" class=\"headerlink\" title=\"rm指令\"></a><strong>rm指令</strong></h2><h3 id=\"常用参数-3\"><a href=\"#常用参数-3\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\">rm /home/zw/hello.txt</font>——<em>[选项]  要删除的文件或目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">-r</font>——<em>递归删除整个文件夹</em> </p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">-f</font>——<em>强制删除不提示</em></p>\n</blockquote>\n<h2 id=\"mv指令\"><a href=\"#mv指令\" class=\"headerlink\" title=\"mv指令\"></a><strong>mv指令</strong></h2><h3 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">mv /home/zw/Hello</font>——<em>(功能描述：重命名)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">mv /home/zw/Hello /home/jj</font>——<em>(功能描述：移动文件或目录)</em></p>\n</blockquote>\n<h2 id=\"cat指令\"><a href=\"#cat指令\" class=\"headerlink\" title=\"cat指令\"></a><strong>cat指令</strong></h2><h3 id=\"基本语法-2\"><a href=\"#基本语法-2\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">cat /home/zw/Hello.txt</font>——<em>(功能描述：查看文件内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">cat -n /ect/profile </font>——<em>(功能描述：显示文件内容，并显示行号)</em></p>\n</blockquote>\n<h3 id=\"使用细节\"><a href=\"#使用细节\" class=\"headerlink\" title=\"使用细节\"></a>使用细节</h3><pre><code>   cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more\ncat  xxx.txt | more  (把cat xxx.txt 输出结果交给 more 处理)\n</code></pre>\n<h2 id=\"more指令\"><a href=\"#more指令\" class=\"headerlink\" title=\"more指令\"></a><strong>more指令</strong></h2><p><code>介绍：more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键.</code></p>\n<h3 id=\"基本语法-3\"><a href=\"#基本语法-3\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">more /etc/profile<br> </font>——<em>(功能描述：采用more查看文件 )</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页；</td>\n</tr>\n<tr>\n<td align=\"left\">Enter</td>\n<td align=\"left\">代表向下翻『一行』；</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">代表立刻离开 more ，不再显示该文件内容。</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+F</td>\n<td align=\"left\">向下滚动一屏</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+B</td>\n<td align=\"left\">返回上一屏</td>\n</tr>\n<tr>\n<td align=\"left\">=</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">:f</td>\n<td align=\"left\">输出文件名和当前行的行号</td>\n</tr>\n</tbody></table>\n<h2 id=\"less指令\"><a href=\"#less指令\" class=\"headerlink\" title=\"less指令\"></a><strong>less指令</strong></h2><p><code>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示</code>需要加载内容，<font color=\"#FF0000\">对于显示大型文件具有较高的效率。</font></p>\n<h3 id=\"基本语法-4\"><a href=\"#基本语法-4\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">less /etc/profile<br> </font>——<em>(功能描述：采用more查看文件 )</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页；</td>\n</tr>\n<tr>\n<td align=\"left\">[pagedown]</td>\n<td align=\"left\">向下翻动一页</td>\n</tr>\n<tr>\n<td align=\"left\">[pageup]</td>\n<td align=\"left\">向上翻动一页；</td>\n</tr>\n<tr>\n<td align=\"left\">/字串</td>\n<td align=\"left\">向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td>\n</tr>\n<tr>\n<td align=\"left\">?字串</td>\n<td align=\"left\">向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td>\n</tr>\n<tr>\n<td align=\"left\">=</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">离开 less 这个程序；</td>\n</tr>\n</tbody></table>\n<h2 id=\"echo指令\"><a href=\"#echo指令\" class=\"headerlink\" title=\"echo指令\"></a><strong>echo指令</strong></h2><p><code>echo命令的功能是在终端窗口显示器上显示一段文字，一般起到一个提示的作用。</code></p>\n<p>基本语法</p>\n<blockquote>\n<p><font color=\"#FF0000\">echo ‘That you are a pig is a fact ‘<br> </font>——<em>(功能描述：终端窗口显示器上显示一段文字)</em><br><font color=\"#FF0000\">echo $HOME<br> </font>——<em>(功能描述：显示输出 当前用户的登录子目录)</em></p>\n</blockquote>\n<h2 id=\"head指令\"><a href=\"#head指令\" class=\"headerlink\" title=\"head指令\"></a><strong>head指令</strong></h2><p> <code>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容 基本语法 </code></p>\n<h3 id=\"基本语法-5\"><a href=\"#基本语法-5\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">head /home/Hello.txt<br> </font>——<em>(功能描述：查看文件头10行内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">head -n 5 /home/Hello.txt<br> </font>——<em>(查看文件头5行内容，5可以是任意行数)</em></p>\n</blockquote>\n<h2 id=\"tail指令\"><a href=\"#tail指令\" class=\"headerlink\" title=\"tail指令\"></a><strong>tail指令</strong></h2><h3 id=\"基本语法-6\"><a href=\"#基本语法-6\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">tail /home/Hello.txt<br> </font>——<em>(功能描述：查看文件头10行内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">tail -n 5 /home/Hello.txt<br> </font>——<em>(查看文件头5行内容，5可以是任意行数)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">head -f 5 /home/Hello.txt<br> </font>——<em>(实时追踪该文档的所有更新)</em></p>\n</blockquote>\n","categories":["Linux"],"tags":["Linux"]},{"title":"MyBatis 3.5.7","url":"/posts/7386b498/","content":"<h1 id=\"Mybatis简介\"><a href=\"#Mybatis简介\" class=\"headerlink\" title=\"Mybatis简介\"></a>Mybatis简介</h1><ul>\n<li>Apache 的 开源项目 ibatis → 后成为 MyBatis。</li>\n</ul>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li><strong>定制化SQL</strong>：即可以自己手写SQL语句。</li>\n<li><strong>支持存储过程</strong></li>\n<li><strong>支持高级映射</strong>：即POJO和数据库字段的映射方式可以自定义哦。</li>\n<li>封装了JDBC代码，和结果集的处理过程 → 不用手写JDBC代码和结果集处理的过程啦。</li>\n</ul>\n<h2 id=\"官方下载-amp-文档\"><a href=\"#官方下载-amp-文档\" class=\"headerlink\" title=\"官方下载&amp;文档\"></a>官方下载&amp;文档</h2><p><a href=\"https://github.com/mybatis/mybatis-3\">https://github.com/mybatis/mybatis-3</a></p>\n<h2 id=\"MyBatis-VS-其他持久层框架\"><a href=\"#MyBatis-VS-其他持久层框架\" class=\"headerlink\" title=\"MyBatis VS 其他持久层框架\"></a>MyBatis VS 其他持久层框架</h2><p>对于已经打包部署的项目，需要重新编辑代码再打包部署，非常麻烦。</p>\n<ul>\n<li>JDBC<ul>\n<li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤 </li>\n<li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见 </li>\n<li>代码冗长，开发效率低</li>\n</ul>\n</li>\n<li>Hibernate 和 JPA<ul>\n<li>操作简便，开发效率高</li>\n<li>程序中的长难复杂 SQL 需要绕过框架</li>\n<li>内部自动生产的 SQL，不容易做特殊优化</li>\n<li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li>\n<li>反射操作太多，导致数据库性能下降</li>\n</ul>\n</li>\n<li>MyBatis<ul>\n<li>轻量级，性能出色</li>\n<li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li>\n<li>开发效率稍逊于HIbernate，但是完全能够接受</li>\n</ul>\n</li>\n</ul>\n<p><strong>开发环境</strong></p>\n<table>\n<thead>\n<tr>\n<th>IDE</th>\n<th>构建工具</th>\n<th>MySQL版本</th>\n<th>MyBatis 版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IntelliJ IDEA 2022.2.1 (Ultimate Edition)</td>\n<td>maven-3.6.0</td>\n<td>8.0.30</td>\n<td>MyBatis 3.5.7</td>\n</tr>\n</tbody></table>\n<h1 id=\"快速上手开始准备\"><a href=\"#快速上手开始准备\" class=\"headerlink\" title=\"快速上手开始准备\"></a>快速上手开始准备</h1><p><strong>创建数据库结构</strong></p>\n<img src=\"/posts/7386b498/2.png\" style=\"zoom: 33%;\">\n\n\n\n\n\n<p><strong>项目结构</strong></p>\n<img src=\"/posts/7386b498/1.jpg\" style=\"zoom:67%;\">\n\n<p><strong>mapper</strong></p>\n<blockquote>\n<p>存放接口</p>\n</blockquote>\n<p><strong>pojo</strong></p>\n<blockquote>\n<p>存放实体类</p>\n</blockquote>\n<p><strong>utils</strong></p>\n<blockquote>\n<p>存放工具类</p>\n</blockquote>\n<h2 id=\"各个文件\"><a href=\"#各个文件\" class=\"headerlink\" title=\"各个文件\"></a>各个文件</h2><h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a><strong><font color=\"blue\">pom.xml</font></strong></h3><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- junit测试 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- log4j日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"mybatis-config-xml\"><a href=\"#mybatis-config-xml\" class=\"headerlink\" title=\"mybatis-config.xml\"></a><strong><font color=\"blue\">mybatis-config.xml</font></strong></h3><p><code>习惯上命名：mybatis-config.xml，非强制。将来整合Spring的时候可以省略。</code></p>\n<p><strong>作用：</strong>1. 配置链接数据库的环境  2. 配置MyBatis</p>\n<p><strong>放置位置：<font color=\"orange\">src/main/resources</font></strong></p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">MyBatis核心配置文件中，标签的顺序：</span></span><br><span class=\"line\"><span class=\"comment\">properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class=\"line\"><span class=\"comment\">objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class=\"line\"><span class=\"comment\">plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"jdbc.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引入实体类所在的包--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 下划线 自动映射 驼峰 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapUnderscoreToCamelCase\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 开启延迟加载--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 按需加载--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"aggressiveLazyLoading\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.zw.mybatis.pojo\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.driver}\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.url}\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.user}\"</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.password}\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--引入mybatis的映射文件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.zw.mybatis.mapper\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>environments</strong> </p>\n<blockquote>\n<p>可以配置多个环境，比如测试环境和开发环境 ; 使用id区分，不能重复。</p>\n</blockquote>\n<p><strong>transactionManager</strong> </p>\n<blockquote>\n<p>事务管理器，使用type来设置事务管理方式。</p>\n</blockquote>\n<ul>\n<li>type:</li>\n</ul>\n<blockquote>\n<p>JDBC：表示使用JDBC原生事务管理方式，即可以手动的开启关闭事务，手动的提交和回滚。</p>\n<p>MANAGED：被管理的，例如交给Spring管理。</p>\n</blockquote>\n<p><strong>DataSource</strong></p>\n<blockquote>\n<p>设置数据源，使用type 设置数据源的类型。</p>\n</blockquote>\n<ul>\n<li>type:</li>\n</ul>\n<blockquote>\n<p>POOLED：使用数据库连接池</p>\n<p>UNPOOLED：不使用数据库连接池，链接直接重新创建</p>\n<p>JNDI：表示使用上下文当中的数据源（了解下）</p>\n</blockquote>\n<h3 id=\"jdbc-properties\"><a href=\"#jdbc-properties\" class=\"headerlink\" title=\"jdbc.properties \"></a><font color=\"blue\">jdbc.properties </font></h3><p><strong>这里引入了 jdbc.properties 为了后续更好修改账号密码,对应mybatis-config.xml DataSource属性</strong></p>\n<blockquote>\n<p>resources 下创建 jdbc.properties 文件</p>\n</blockquote>\n<figure class=\"highlight properties\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.driver</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"string\">123456</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"log4j-xml\"><a href=\"#log4j-xml\" class=\"headerlink\" title=\"log4j.xml\"></a>log4j.xml</h3><p><strong>log4j日志 创建位置：</strong> <strong><font color=\"orange\">resources/log4j.xml</font></strong></p>\n<blockquote>\n<p>日志级别：FATAL（致命）&gt; ERROR（错误）&gt;WARN（警告）INFO（信息）&gt; DEBUG（调试） 从左到右打印的内容越来越详细</p>\n</blockquote>\n<p><strong><font color=\"ondine\">需Maven添加log4j日志</font></strong></p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">log4j</span>:configuration <span class=\"keyword\">SYSTEM</span> <span class=\"string\">\"log4j.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">log4j:configuration</span> <span class=\"attr\">xmlns:log4j</span>=<span class=\"string\">\"http://jakarta.apache.org/log4j/\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"STDOUT\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Encoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.PatternLayout\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ConversionPattern\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"%-5p %d{MM-dd HH:mm:ss,SSS}</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">%m (%F:%L) \\n\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"java.sql\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"debug\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"org.apache.ibatis\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"info\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认配置，级别为debug 且根据name为log.console和 log.file两个appender输出--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">level</span> <span class=\"attr\">value</span>=<span class=\"string\">\"debug\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"各个Package下的文件\"><a href=\"#各个Package下的文件\" class=\"headerlink\" title=\"各个Package下的文件\"></a>各个Package下的文件</h3><img src=\"/posts/7386b498/4.png\" style=\"zoom:50%;\">\n\n<h4 id=\"mapper\"><a href=\"#mapper\" class=\"headerlink\" title=\"mapper\"></a>mapper</h4><p><strong><font color=\"blue\">UserMapper.Interface</font></strong></p>\n<p>相当于DAO，但是不用创建实现类，MyBatis会创建代理类，并执行映射文件当中的SQL</p>\n<p><strong>起名规则：<font color=\"ondine\">POJO的名字 + Mapper</font></strong></p>\n<p><strong>放置位置：<font color=\"orange\">src/main/java/com.zw.mybatis/mapper</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zw.mybatis.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zw.mybatis.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> {</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@Description</span> 添加用户信息</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@params</span></span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@DATE</span> 2022/10/25</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span> 添加用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@params</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DATE</span> 2022/10/25</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">updateUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span> 删除用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@params</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DATE</span> 2022/10/25</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">daleteuser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span> 根据id询用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@params</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DATE</span> 2022/10/25</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    User <span class=\"title function_\">getUserById</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span> 查询所有的用户信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@params</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DATE</span> 2022/10/25</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">getAllUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"pojo\"><a href=\"#pojo\" class=\"headerlink\" title=\"pojo\"></a>pojo</h4><p><strong><font color=\"blue\">User.java</font></strong></p>\n<p><strong><font color=\"ondine\">实体类各个类属性值的 无参构造 有参构造  和Getters and Setters 方法</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zw.mybatis.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> User</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> kli</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DATE</span> 2022/10/25 22:58</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  String password;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  String gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  String email;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(Integer id, String username, String password, Integer age, String gender, String email)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.email = email;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getId</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Integer id)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUsername</span><span class=\"params\">(String username)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPassword</span><span class=\"params\">(String password)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getGender</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gender;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGender</span><span class=\"params\">(String gender)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getEmail</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> email;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setEmail</span><span class=\"params\">(String email)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.email = email;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User{\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">                <span class=\"string\">\", username='\"</span> + username + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", password='\"</span> + password + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">                <span class=\"string\">\", gender='\"</span> + gender + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", email='\"</span> + email + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'}'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"utils\"><a href=\"#utils\" class=\"headerlink\" title=\"utils\"></a>utils</h4><p><strong><font color=\"blue\">SqlSessionUtil.java</font></strong></p>\n<p>下方代码：从开始到创建 SqlSessionFactory 只用创建一次即可，因此可以单独封装即可。 <font color=\"blue\"><strong>openSession()</strong> </font>获得 <font color=\"blue\"><strong>SqlSession</strong></font> 默认是不自动提交事务，因此需要自己手动提交。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zw.mybatis.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> SqlSessionUtil</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> kli</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DATE</span> 2022/10/29 12:34</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SqlSessionUtil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SqlSession <span class=\"title function_\">getSqlSession</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        SqlSession sqlSession=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            <span class=\"comment\">// 获取核心文件的输入流</span></span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> Resources.getResourceAsStream(<span class=\"string\">\"mybatis-config.xml\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 获取sqlSessionFactoryBuilder  -&gt; 工厂构建器</span></span><br><span class=\"line\">            <span class=\"type\">SqlSessionFactoryBuilder</span> <span class=\"variable\">sqlSessionFactoryBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionFactoryBuilder</span>();</span><br><span class=\"line\">            <span class=\"comment\">// 获取sqlSessionFactory          -&gt; 创建会话</span></span><br><span class=\"line\">            <span class=\"type\">SqlSessionFactory</span> <span class=\"variable\">sqlSessionFactory</span> <span class=\"operator\">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class=\"line\">            <span class=\"comment\">// 获取sqlSession对象(自动提交事务)</span></span><br><span class=\"line\">            sqlSession = sqlSessionFactory.openSession(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (IOException e) {</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">// 返回sqlSession</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sqlSession;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"sql映射文件\"><a href=\"#sql映射文件\" class=\"headerlink\" title=\"sql映射文件\"></a>sql映射文件</h4><p><strong><font color=\"blue\">UserMapper.xml</font></strong></p>\n<p>Mapper 接口当中的一个抽象方法 对应 映射文件当中的一个SQL语句。</p>\n<p><strong>起名规则：<font color=\"ondine\">POJO名字 + Mapper.xml</font></strong></p>\n<p><strong>放置位置：<font color=\"orange\">在 resources目录下 创建目录  com/zw/mybatis/mapper对应接口mapper接口文件一致</font></strong></p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.zw.mybatis.mapper.UserMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        mapper接口和映射文件要保证两个一致</span></span><br><span class=\"line\"><span class=\"comment\">        1、mapper接口的全类名和映射文件的namespace一致</span></span><br><span class=\"line\"><span class=\"comment\">        2、mapper接口中的方法的方法名要和映射文件中的sql的id保持一致</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--int insertUser();  插入--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertUser\"</span>&gt;</span></span><br><span class=\"line\">        insert into t_user values(null,'admin','123456',23,'男','12345@qq.com')</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--int updateUser();  更新--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateUser\"</span>&gt;</span></span><br><span class=\"line\">        update t_user set username='root',password='123' where id = 7</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--void daleteuser(); 删除--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"daleteuser\"</span>&gt;</span></span><br><span class=\"line\">        delete  from t_user where id = 10</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--User getUserById(); 根据id查询 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--resultType：自动映射，用于属性名和表中字段名一致的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t\tresultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.zw.mybatis.pojo.User\"</span>&gt;</span></span><br><span class=\"line\">        select * from t_user where id = 1</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--List&lt;User&gt; getAllUser(); 查询全部 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getAllUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">        select * from t_user</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>相关概念：ORM（Object Relationship Mapping）对象关系映射。</p>\n<ul>\n<li>对象：Java的实体类对象</li>\n<li>关系：关系型数据库</li>\n<li>映射：二者之间的对应关系</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Java概念</th>\n<th>数据库概念</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类</td>\n<td>表</td>\n</tr>\n<tr>\n<td>属性</td>\n<td>字段/列</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>记录/行</td>\n</tr>\n</tbody></table>\n<h4 id=\"测试类\"><a href=\"#测试类\" class=\"headerlink\" title=\"测试类\"></a>测试类</h4><p><strong><font color=\"blue\">MyBatisTest.java</font></strong></p>\n<p><strong>放置位置：<font color=\"orange\">在\\src\\test\\java\\MyBatisTest.java 创建测试类</font></strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.zw.mybatis.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zw.mybatis.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zw.mybatis.utils.SqlSessionUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> MyBatisTest</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span> TODO</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span> kli</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@DATE</span> 2022/10/29 11:29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBatisTest</span>{</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testInsert</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        <span class=\"comment\">//把环境代码封装进 SqlSessionUtil</span></span><br><span class=\"line\">        SqlSession sqlSession= SqlSessionUtil.getSqlSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span>sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"comment\">// getMapper进行封装，会自动创建mapper的实现类</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>mapper.insertUser();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"结果：\"</span>+result);</span><br><span class=\"line\">        sqlSession.close();     <span class=\"comment\">//关闭sqlSession对象</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUpdate</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        SqlSession sqlSession= SqlSessionUtil.getSqlSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span>sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"comment\">// getMapper进行封装，会自动创建mapper的实现类</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>mapper.updateUser();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"结果：\"</span>+result);</span><br><span class=\"line\">        sqlSession.close();     <span class=\"comment\">//关闭sqlSession对象</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDelete</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        SqlSession sqlSession= SqlSessionUtil.getSqlSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span>sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        mapper.daleteuser();</span><br><span class=\"line\">        sqlSession.close();     <span class=\"comment\">//关闭sqlSession对象</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSelect</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        SqlSession sqlSession= SqlSessionUtil.getSqlSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span>sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span>mapper.getUserById();</span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        sqlSession.close();     <span class=\"comment\">//关闭sqlSession对象</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testGetAllUser</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        SqlSession sqlSession= SqlSessionUtil.getSqlSession();</span><br><span class=\"line\">        <span class=\"type\">UserMapper</span> <span class=\"variable\">mapper</span> <span class=\"operator\">=</span>sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\">        List&lt;User&gt; list =mapper.getAllUser();</span><br><span class=\"line\">        list.forEach(System.out::println);</span><br><span class=\"line\">        sqlSession.close();     <span class=\"comment\">//关闭sqlSession对象</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"pink\">运行结果：</font><font color=\"ondine\">查询显示t_user表所有信息</font></strong></p>\n<p><img src=\"/posts/7386b498/5.png\"></p>\n<h1 id=\"MyBatis的增删改查\"><a href=\"#MyBatis的增删改查\" class=\"headerlink\" title=\"MyBatis的增删改查\"></a>MyBatis的增删改查</h1><h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--int insertUser();--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertUser\"</span>&gt;</span></span><br><span class=\"line\">\tinsert into t_user values(null,'admin','123456',23,'男')</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--int deleteUser();--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deleteUser\"</span>&gt;</span></span><br><span class=\"line\">\tdelete from t_user where id = 7</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--int updateUser();--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateUser\"</span>&gt;</span></span><br><span class=\"line\">\tupdate t_user set username='ybc',password='123' where id = 6</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"查询一个实体类对象\"><a href=\"#查询一个实体类对象\" class=\"headerlink\" title=\"查询一个实体类对象\"></a>查询一个实体类对象</h2><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--User getUserById();--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.atguigu.mybatis.bean.User\"</span>&gt;</span></span><br><span class=\"line\">\tselect * from t_user where id = 2</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"查询list集合\"><a href=\"#查询list集合\" class=\"headerlink\" title=\"查询list集合\"></a>查询list集合</h2><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserList\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.atguigu.mybatis.bean.User\"</span>&gt;</span></span><br><span class=\"line\">\tselect * from t_user</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>注意：</p>\n<p>1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射</p>\n<p>关系</p>\n<p>resultType：自动映射，用于属性名和表中字段名一致的情况</p>\n<p>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</p>\n</blockquote>\n<h1 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h1><h2 id=\"单个字面量类型-基本数据类型\"><a href=\"#单个字面量类型-基本数据类型\" class=\"headerlink\" title=\"单个字面量类型(基本数据类型)\"></a>单个字面量类型(基本数据类型)</h2><blockquote>\n<p>注意 ${} + 单引号的问题。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">getUserByUsername</span><span class=\"params\">(String username)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 占位符方式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserByUsername\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username = #{username};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 字符串拼接方式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserByUsername\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username = '${username}';</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"多个字面量类型-基本数据类型\"><a href=\"#多个字面量类型-基本数据类型\" class=\"headerlink\" title=\"多个字面量类型(基本数据类型)\"></a>多个字面量类型(基本数据类型)</h2><blockquote>\n<p>当 Mapper 接口中有多个参数的时候，MyBatis 会创建Map ，并使用 paramX 或 argX 为Key，参数值为 Value , 且两者均可混合使用。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">checkLogin</span><span class=\"params\">(String username, String password)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkLogin\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username = #{param1} and password = #{param2};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkLogin\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username = #{arg0} and password = #{arg1};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * {username: \"xxxx\"}</span></span><br><span class=\"line\"><span class=\"comment\"> * {password: \"xxxx\"}</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> map</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">User <span class=\"title function_\">checkLoginByMap</span><span class=\"params\">(Map&lt;String, Object&gt; map)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- User checkLoginByMap(Map&lt;String, Object&gt; map); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkLoginByMap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username = #{username} and password = #{password};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"单个POJO-最常用\"><a href=\"#单个POJO-最常用\" class=\"headerlink\" title=\"单个POJO(最常用)\"></a>单个POJO(最常用)</h2><blockquote>\n<p>必须有 getter  / setter；单个POJO会形成一个Map，属性名作为Key, getter 后的值作为 value.</p>\n<p>属性只跟 getter/setter 有关系。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertUser\"</span>&gt;</span></span><br><span class=\"line\">    INSERT INTO t_user VALUES (NULL, #{username}, #{password}, #{age}, #{gender}, #{email})</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"Param-最常用\"><a href=\"#Param-最常用\" class=\"headerlink\" title=\"@Param(最常用)\"></a>@Param(最常用)</h2><blockquote>\n<p>其会替换argXX，即你只能用 {username, param1,  password, param2 } 这四个在配置文件当中。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">checkLogin</span><span class=\"params\">(<span class=\"meta\">@Param(\"username\")</span> String username, <span class=\"meta\">@Param(\"password\")</span> String password)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"checkLogin\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username = #{username} and password = #{password};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"查询功能详解-属性名-x3D-字段名\"><a href=\"#查询功能详解-属性名-x3D-字段名\" class=\"headerlink\" title=\"查询功能详解 (属性名 = 字段名)\"></a>查询功能详解 (属性名 = 字段名)</h1><h2 id=\"POJO\"><a href=\"#POJO\" class=\"headerlink\" title=\"POJO\"></a>POJO</h2><blockquote>\n<p>注意设置 resultType 即可，可以使用别名.<br>当SQL语句返回多条记录的时候，会报：TooManyResultException 的错误.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">getUserById</span><span class=\"params\">(<span class=\"meta\">@Param(\"id\")</span> String id)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE id = #{id}</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"List-lt-POJO-gt\"><a href=\"#List-lt-POJO-gt\" class=\"headerlink\" title=\"List< POJO >\"></a>List&lt; POJO &gt;</h2><blockquote>\n<p>注意设置 resultType 即可，可以使用别名.<br>当SQL语句返回多条记录的时候，会报：TooManyResultException 的错误.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">User <span class=\"title function_\">getUserById</span><span class=\"params\">(<span class=\"meta\">@Param(\"id\")</span> String id)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE id = #{id}</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"单行单列\"><a href=\"#单行单列\" class=\"headerlink\" title=\"单行单列\"></a>单行单列</h2><blockquote>\n<p>MyBatis 为 java中常用的类型设置了类型别名.<br>int → java.lang.Integer<br>string → java.lang.String<br>_int → int<br>map → java.utils.Map;</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Integer <span class=\"title function_\">getCount</span><span class=\"params\">()</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getCount\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"int\"</span>&gt;</span></span><br><span class=\"line\">    SELECT count(1) FROM t_user;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"查询到Map\"><a href=\"#查询到Map\" class=\"headerlink\" title=\"*查询到Map\"></a>*查询到Map</h2><blockquote>\n<p>查询的结果没有对应的实体类的时候，就可以使用Map集合。<br>resultType 设置成 map 即可.</p>\n<p>查询为null 的字段是不会放到Map集合里面。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getUserById</span><span class=\"params\">(<span class=\"meta\">@Param(\"id\")</span> String id)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"map\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE id = ${id}</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>也可以使用 Map 存放多条记录，需要使用到 @MapKey 注解</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@MapKey(\"id\")</span></span><br><span class=\"line\">Map&lt;String, Object&gt; <span class=\"title function_\">getAllUserToMap</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getAllUserToMap\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"map\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Map&lt;id, User&gt;</span></span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"number\">3</span>={password=<span class=\"number\">123</span>, gender=男, id=<span class=\"number\">3</span>, age=<span class=\"number\">23</span>, email=<span class=\"number\">12345</span><span class=\"meta\">@qq</span>.com, username=root}, </span><br><span class=\"line\">  <span class=\"number\">4</span>={password=<span class=\"number\">123456</span>, gender=男, id=<span class=\"number\">4</span>, age=<span class=\"number\">23</span>, email=<span class=\"number\">12345</span><span class=\"meta\">@qq</span>.com, username=admin}, </span><br><span class=\"line\">  <span class=\"number\">5</span>={password=<span class=\"number\">123456</span>, gender=男, id=<span class=\"number\">5</span>, age=<span class=\"number\">23</span>, email=<span class=\"number\">12345</span><span class=\"meta\">@qq</span>.com, username=admin}, </span><br><span class=\"line\">  <span class=\"number\">6</span>={password=<span class=\"number\">123456</span>, gender=男, id=<span class=\"number\">6</span>, age=<span class=\"number\">20</span>, email=geek_zh@<span class=\"number\">163.</span>com, username=zs}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"8-5-List-lt-Map-gt\"><a href=\"#8-5-List-lt-Map-gt\" class=\"headerlink\" title=\"*8.5 List< Map >\"></a>*8.5 List&lt; Map &gt;</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">List&lt;Map&lt;String, Object&gt;&gt; <span class=\"title function_\">getAllUser</span><span class=\"params\">()</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"map\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"特殊SQL\"><a href=\"#特殊SQL\" class=\"headerlink\" title=\"特殊SQL\"></a>特殊SQL</h1><h2 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">getUserByLike</span><span class=\"params\">(<span class=\"meta\">@Param(\"mohu\")</span> String mohu)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserByLike\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username like '%${mohu}%'</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserByLike\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username like CONCAt('%', #{mohu}, '%');</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 第三种方式：用的最多的方式的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserByLike\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_user WHERE username like \"%\"#{mohu}\"%\"</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"批量删除-in\"><a href=\"#批量删除-in\" class=\"headerlink\" title=\"批量删除 in\"></a>批量删除 in</h2><blockquote>\n<p>即传入的参数数量不确定<br>这里直接先构成一个字符串，再使用拼接方式传入即可。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">deleteMore</span><span class=\"params\">(<span class=\"meta\">@Param(\"ids\")</span> String ids)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- ids = \"1,2,3\" --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deleteMore\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"int\"</span>&gt;</span></span><br><span class=\"line\">  DELETE FROM t_user WHERE id in (${ids})</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"动态表名\"><a href=\"#动态表名\" class=\"headerlink\" title=\"动态表名\"></a>动态表名</h2><blockquote>\n<p>表查询的字段相同，但是表名称不相同</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">List&lt;User&gt; <span class=\"title function_\">getUserList</span><span class=\"params\">(<span class=\"meta\">@Param(\"tableName\")</span> String tableName)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getUserList\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"user\"</span>&gt;</span></span><br><span class=\"line\">  SELECT * FROM ${tableName}; </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"获取自增主键\"><a href=\"#获取自增主键\" class=\"headerlink\" title=\"获取自增主键\"></a>获取自增主键</h2><blockquote>\n<p>场景：比如一个班级表和一个学生表，在一个事务当中先创建一个班级（使用的是自增的主键）然后在这个班级里面添加若干的学生。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Integer <span class=\"title function_\">insertUser</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"int\"</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br><span class=\"line\">  INSERT INTO t_user VALUES(NULL, #{username}, #{password}, #{age}, #{gender}, #{email});</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"ResultMap\"><a href=\"#ResultMap\" class=\"headerlink\" title=\"ResultMap\"></a>ResultMap</h1><blockquote>\n<ol>\n<li>字段名 和 属性名不一致（可以尝试别名处理）；2. 一对一 或 一对多 的关系查询.</li>\n</ol>\n</blockquote>\n<h2 id=\"字段名和属性名不一致的情况\"><a href=\"#字段名和属性名不一致的情况\" class=\"headerlink\" title=\"字段名和属性名不一致的情况\"></a>字段名和属性名不一致的情况</h2><blockquote>\n<p>方式一：查询的时候使用别名<br>方式二：开启下划线 → 小驼峰的配置，在 <code>mybatis-config.xml</code> 文件当中添加如下配置。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 下划线 自动映射 驼峰 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapUnderscoreToCamelCase\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<blockquote>\n<p>方式三：使用 ResltMap , 注意 resultMap 和 resultType 是二选一的。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Emp <span class=\"title function_\">getEmpByEmpId</span><span class=\"params\">(<span class=\"meta\">@Param(\"empId\")</span> Integer empId)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.atguigu.mybatis.mapper.EmpMapper\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 相同的属性和名称不用写也行的 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"empResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- id 处理主键和属性字段的映射关系 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- result 处理普通字段和属性的映射关系 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Emp getEmpByEmpId(@Param(\"empId\") Integer empId); --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByEmpId\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"empResultMap\"</span>&gt;</span></span><br><span class=\"line\">        SELECT * FROM t_emp WHERE emp_id = #{empId};</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"多对一关系\"><a href=\"#多对一关系\" class=\"headerlink\" title=\"多对一关系\"></a>多对一关系</h2><blockquote>\n<p>POJO : 多个<code>Emp </code>对应一个 <code>Dept</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Emp</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer empId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String empName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dept dept;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// getter/setter/toString</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<blockquote>\n<p><strong>方式一</strong>：级联方式处理 ，即一次连接出所有字段。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Emp <span class=\"title function_\">getEmpAndDeptByEmpId</span><span class=\"params\">(<span class=\"meta\">@Param(\"empId\")</span> Integer empId)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;resultMap id=<span class=\"string\">\"getEmpAndDeptByEmpId\"</span> type=<span class=\"string\">\"Emp\"</span>&gt;</span><br><span class=\"line\">    &lt;id column=<span class=\"string\">\"emp_id\"</span> property=<span class=\"string\">\"empId\"</span>&gt;&lt;/id&gt;</span><br><span class=\"line\">    &lt;result column=<span class=\"string\">\"emp_name\"</span> property=<span class=\"string\">\"empName\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- 级联方式：多对一的映射关系 --&gt;</span><br><span class=\"line\">    &lt;result column=<span class=\"string\">\"dept_id\"</span> property=<span class=\"string\">\"dept.deptId\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">    &lt;result column=<span class=\"string\">\"dept_name\"</span> property=<span class=\"string\">\"dept.deptName\"</span>&gt;&lt;/result&gt;</span><br><span class=\"line\">&lt;/resultMap&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;select id=<span class=\"string\">\"getEmpAndDeptByEmpId\"</span> resultMap=<span class=\"string\">\"getEmpAndDeptByEmpId\"</span>&gt;</span><br><span class=\"line\">    SELECT *</span><br><span class=\"line\">    FROM t_emp</span><br><span class=\"line\">    LEFT JOIN t_dept</span><br><span class=\"line\">    ON t_emp.dept_id = t_dept.dept_id</span><br><span class=\"line\">    <span class=\"type\">WHERE</span> <span class=\"variable\">emp_id</span> <span class=\"operator\">=</span> #{empId};</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><strong>方式二</strong>： association 标签。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpAndDeptByEmpId\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- association : 专门处理多对一、一对一 的映射关系 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"dept\"</span> <span class=\"attr\">javaType</span>=<span class=\"string\">\"Dept\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpAndDeptByEmpId\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"getEmpAndDeptByEmpId\"</span>&gt;</span></span><br><span class=\"line\">    SELECT *</span><br><span class=\"line\">    FROM t_emp</span><br><span class=\"line\">    LEFT JOIN t_dept</span><br><span class=\"line\">    ON t_emp.dept_id = t_dept.dept_id</span><br><span class=\"line\">    WHERE emp_id = #{empId};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><strong>方式三</strong>：分布查询，先查询出<code>Emp</code>，再根据<code>Emp</code>中<code>deptId </code>查询 <code>Dept</code><br><strong>优点</strong>：可以延迟加载，但必须在核心配置文件设置全局配置 。</p>\n</blockquote>\n<ul>\n<li>EmpMapper.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分步查询的第一步</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> empId</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Emp <span class=\"title function_\">getEmpAndDeptByStepOne</span><span class=\"params\">(<span class=\"meta\">@Param(\"empId\")</span> Integer empId)</span>;</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>DeptMapper.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分步查询的第二步</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> deptId</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Dept <span class=\"title function_\">getEmpAndDeptByStepTwo</span><span class=\"params\">(<span class=\"meta\">@Param(\"deptId\")</span> Integer deptId)</span>;</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>EmpMapper.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpAndDeptByStepResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Emp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        property: 关联的类型</span></span><br><span class=\"line\"><span class=\"comment\">        fetchType: eager 表示全局配置了懒加载，但是这里我还是想立即加载</span></span><br><span class=\"line\"><span class=\"comment\">        select: 第二步查询的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">        column: 第一步查询出来的外键</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">association</span> <span class=\"attr\">property</span>=<span class=\"string\">\"dept\"</span> <span class=\"attr\">fetchType</span>=<span class=\"string\">\"eager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                 <span class=\"attr\">select</span>=<span class=\"string\">\"com.atguigu.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                 <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">association</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Emp getEmpAndDeptByStepOne(@Param(\"empId\") Integer empId); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpAndDeptByStepOne\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"getEmpAndDeptByStepResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_emp WHERE emp_id = #{empId};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>DeptMapper.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Dept getEmpAndDeptByStepTwo(@Param(\"deptId\") Integer deptId);</span></span><br><span class=\"line\"><span class=\"comment\">     这里没有使用 ResultMap, 因为开启了 下划线 转 驼峰的配置</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpAndDeptByStepTwo\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"dept\"</span>&gt;</span></span><br><span class=\"line\">    SELECT * FROM t_dept WHERE dept_id = #{dept_id};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h2><blockquote>\n<p>POJO：一个 Dept 对应多个 Emp</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dept</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer deptId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String deptName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Emp&gt; emps;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// getter/setter/toString</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p><strong>方式一</strong>：级联 + collection</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Dept <span class=\"title function_\">getDeptAndEmpsByDeptId</span><span class=\"params\">(<span class=\"meta\">@Param(\"deptId\")</span> Integer deptId)</span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getDeptAndEmpsByDeptIdResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"dept\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        property: 关联的属性.</span></span><br><span class=\"line\"><span class=\"comment\">        ofType: 集合内部元素的类型.</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"emps\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"emp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"emp_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"empName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Dept getDeptAndEmpsByDeptId(@Param(\"deptId\") Integer deptId); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getDeptAndEmpsByDeptId\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"getDeptAndEmpsByDeptIdResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT *</span><br><span class=\"line\">    FROM t_dept</span><br><span class=\"line\">    LEFT JOIN t_emp</span><br><span class=\"line\">    ON t_dept.dept_id = t_emp.dept_id</span><br><span class=\"line\">    WHERE t_dept.dept_id = #{deptId};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<blockquote>\n<p><strong>方式二</strong>：分布查询，先查询部门，再根据部门的id查询部门下的员工</p>\n</blockquote>\n<ul>\n<li>DeptMapper.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分步查询 查询部门以及部门中的员工的信息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> deptId</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Dept <span class=\"title function_\">getDeptAndEmpdsStepOne</span><span class=\"params\">(<span class=\"meta\">@Param(\"deptId\")</span> Integer deptId)</span>;</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>EmpMapper.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分布查询的第二步：查询出一个部门下的员工</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> empId</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Emp <span class=\"title function_\">getDeptAndEmpdsStepTwo</span><span class=\"params\">(<span class=\"meta\">@Param(\"empId\")</span> Integer empId)</span>;</span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>DeptMapper.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getDeptAndEmpdsStepOneResultMap\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"dept\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptId\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"dept_name\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"deptName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- fetchType=\"eager\" 关闭懒加载 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">\"emps\"</span> <span class=\"attr\">fetchType</span>=<span class=\"string\">\"eager\"</span> <span class=\"attr\">ofType</span>=<span class=\"string\">\"emp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                 <span class=\"attr\">select</span>=<span class=\"string\">\"com.atguigu.mybatis.mapper.EmpMapper.getDeptAndEmpdsStepTwo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                 <span class=\"attr\">column</span>=<span class=\"string\">\"dept_id\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Dept getDeptAndEmpdsStepOne(@Param(\"deptId\") Integer deptId); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getDeptAndEmpdsStepOne\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"getDeptAndEmpdsStepOneResultMap\"</span>&gt;</span></span><br><span class=\"line\">    SELECT *</span><br><span class=\"line\">    FROM t_dept</span><br><span class=\"line\">    WHERE dept_id = #{deptId};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li>EmpMapper.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Emp getDeptAndEmpdsStepTwo(@Param(\"empId\") Integer empId);</span></span><br><span class=\"line\"><span class=\"comment\">     这里没有使用resultMap, 因为已经开启了下划线转驼峰的配置</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getDeptAndEmpdsStepTwo\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"emp\"</span>&gt;</span></span><br><span class=\"line\">    SELECT *</span><br><span class=\"line\">    FROM t_emp</span><br><span class=\"line\">    WHERE emp_id = #{empId};</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h2><p><a href=\"https://blog.csdn.net/QGhurt/article/details/106440525\">https://blog.csdn.net/QGhurt/article/details/106440525</a></p>\n<h1 id=\"动态SQL\"><a href=\"#动态SQL\" class=\"headerlink\" title=\"动态SQL\"></a>动态SQL</h1><blockquote>\n<p>根据传入的参数动态的决定最后执行的SQL语句.</p>\n</blockquote>\n<h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByCondition\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"emp\"</span>&gt;</span></span><br><span class=\"line\">    SELECT *</span><br><span class=\"line\">    FROM t_emp</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"WHERE\"</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">\"AND\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"empName != null and empName != ''\"</span>&gt;</span></span><br><span class=\"line\">            emp_name LIKE \"%\"#{empName}\"%\" AND</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"age != null and age != ''\"</span>&gt;</span></span><br><span class=\"line\">            age = #{age} AND</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"gender != null and gender != ''\"</span>&gt;</span></span><br><span class=\"line\">            gender = #{gender} AND</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"choose-when-otherwise-switch\"><a href=\"#choose-when-otherwise-switch\" class=\"headerlink\" title=\"choose, when, otherwise (switch)\"></a>choose, when, otherwise (switch)</h2><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- List&lt;Emp&gt; getEmpByChoose(Emp emp); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByChoose\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"emp\"</span>&gt;</span></span><br><span class=\"line\">    SELECT *</span><br><span class=\"line\">    FROM t_emp</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"empName != null and empName != ''\"</span>&gt;</span></span><br><span class=\"line\">                emp_name = #{empName}</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">when</span> <span class=\"attr\">test</span>=<span class=\"string\">\"age != null and age != ''\"</span>&gt;</span></span><br><span class=\"line\">                age = #{age}</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">when</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">choose</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"foreach-批量插删，IN\"><a href=\"#foreach-批量插删，IN\" class=\"headerlink\" title=\"foreach(批量插删，IN)\"></a>foreach(批量插删，IN)</h2><blockquote>\n<p>经常用于批量添加 和 批量删除</p>\n</blockquote>\n<ul>\n<li><strong>批量插入</strong>：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- void insertMoreEmp(@Params(\"emps\") List&lt;Emp&gt; emps); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">\"insertMoreEmp\"</span>&gt;</span></span><br><span class=\"line\">    INSERT INTO t_emp</span><br><span class=\"line\">    VALUES </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"emps\"</span> <span class=\"attr\">item</span>=<span class=\"string\">\"emp\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span>&gt;</span></span><br><span class=\"line\">        (NULL, #{emp.empName}, #{emp.age}, #{emp.gender}, null)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><strong>批量删除</strong>：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- void deleteMoreEmp(@Param(\"empIds\") Integer[] empIds); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">\"deleteMoreEmp\"</span>&gt;</span></span><br><span class=\"line\">    DELETE FROM t_emp</span><br><span class=\"line\">    WHERE emp_id</span><br><span class=\"line\">    IN</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">foreach</span> <span class=\"attr\">collection</span>=<span class=\"string\">\"empIds\"</span> <span class=\"attr\">item</span>=<span class=\"string\">\"empId\"</span> <span class=\"attr\">separator</span>=<span class=\"string\">\",\"</span> <span class=\"attr\">open</span>=<span class=\"string\">\"(\"</span> <span class=\"attr\">close</span>=<span class=\"string\">\")\"</span>&gt;</span></span><br><span class=\"line\">        #{empId}</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">foreach</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"SQL片段\"><a href=\"#SQL片段\" class=\"headerlink\" title=\"SQL片段\"></a>SQL片段</h2><blockquote>\n<p>将重复的SQL代码抽取出来被多个语句重复使用</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"empColumns\"</span>&gt;</span></span><br><span class=\"line\">    emp_id, emp_name, age, gender, dept_id</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- List&lt;Emp&gt; getEmpByCondition(Emp emp); --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"getEmpByCondition\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"emp\"</span>&gt;</span></span><br><span class=\"line\">    SELECT  <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"empColumns\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">    FROM t_emp</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">trim</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"WHERE\"</span> <span class=\"attr\">suffixOverrides</span>=<span class=\"string\">\"AND\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"empName != null and empName != ''\"</span>&gt;</span></span><br><span class=\"line\">            emp_name LIKE \"%\"#{empName}\"%\" AND</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"age != null and age != ''\"</span>&gt;</span></span><br><span class=\"line\">            age = #{age} AND</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"gender != null and gender != ''\"</span>&gt;</span></span><br><span class=\"line\">            gender = #{gender} AND</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">trim</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h1><h2 id=\"一级缓存\"><a href=\"#一级缓存\" class=\"headerlink\" title=\"一级缓存\"></a>一级缓存</h2><blockquote>\n<p>一级缓存是SqlSession级别的缓存（即同一个链接），通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据就会从缓存中直接获取，不会从数据库重新访问。</p>\n</blockquote>\n<p><img src=\"/posts/7386b498/6.png\"></p>\n<ul>\n<li>以下四种情况会导致一级缓存失效：<ol>\n<li>不同SqlSession对应不同一级缓存。（即不同SqlSession，即使是相同查询条件也无用）。</li>\n<li>同一个SqlSession但是查询条件不同。</li>\n<li>同一个SqlSession 两次查询期间执行了任何一次针对此表增删改操作。</li>\n<li>同一个SqlSession两次查询期间手动清空了缓存。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sqlSession.clearCache();</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"二级缓存\"><a href=\"#二级缓存\" class=\"headerlink\" title=\"二级缓存\"></a>二级缓存</h2><h3 id=\"开启（四个条件）\"><a href=\"#开启（四个条件）\" class=\"headerlink\" title=\"开启（四个条件）\"></a>开启（四个条件）</h3><blockquote>\n<p>SqlSessionFactory 级别的，多个SqlSession可以共享。</p>\n</blockquote>\n<blockquote>\n<p>核心配置文件，设置全局属性配置 cacheEnabled=”true”, 默认为 true，不需要设置</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">cacheEnabled</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">setting</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>在映射文件中设置<cache></cache></p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.atguigu.mybatis.mapper.DynamicMapperSQLMapper\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 余下代码 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>‼️ 二级缓存必须是在 SQLSession <strong>关闭或提交之后</strong>有效。（即SQLSession关闭或提交后，一级缓存当中的数据才会保存到一级缓存中）</p>\n</blockquote>\n<blockquote>\n<p>‼️ 实体类必须实现 <code>Serializable</code> 接口。</p>\n</blockquote>\n<h3 id=\"失效\"><a href=\"#失效\" class=\"headerlink\" title=\"失效\"></a>失效</h3><blockquote>\n<p>任意一次增删改会清空二级缓存。（唯一情况）</p>\n</blockquote>\n<h3 id=\"二级缓存相关配置-简单了解即可\"><a href=\"#二级缓存相关配置-简单了解即可\" class=\"headerlink\" title=\"二级缓存相关配置(简单了解即可)\"></a>二级缓存相关配置(简单了解即可)</h3><p><img src=\"/posts/7386b498/7.png\"></p>\n<h2 id=\"缓存查询顺序\"><a href=\"#缓存查询顺序\" class=\"headerlink\" title=\"缓存查询顺序\"></a>缓存查询顺序</h2><ol>\n<li>先查询二级缓存，因为二级缓存当中可能会有其他线程已经查询出来的数据。</li>\n<li>二级缓存没有命中，则再查询一级缓存。</li>\n<li>一级缓存也没有命中，则执行查询数据库。</li>\n<li>SQLSession关闭之后，一级缓存当中的数据会写入到二级缓存。</li>\n</ol>\n<hr>\n<p>借鉴详细笔记 <strong><a href=\"https://www.wolai.com/dMH3wn6ZzJgLujGSarrhB6\">MyBatis 3.5.7</a></strong></p>\n<p>视频：<a href=\"https://www.bilibili.com/video/BV1Ya411S7aT/?spm_id_from=333.337.search-card.all.click&amp;vd_source=da6cd73d86d8a2418080a5c4c0bcc024\">【尚硅谷】SSM框架全套教程，MyBatis+Spring+SpringMVC+SSM整合一套通关</a></p>\n","categories":["SSM"],"tags":["SSM"]},{"title":"Scala","url":"/posts/2d68ebe4/","content":"<h1 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h1><p><a href=\"http://distfiles.macports.org/\">http://distfiles.macports.org/</a></p>\n<p><code>镜像下载，Ctrl+F搜索scala下载</code></p>\n<p>这里选择 **<font color=\"red\">scala-2.12.11</font>**进行下载</p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">SCALA_HOME:</span><br><span class=\"line\">D:\\scala\\scala-2.12.11</span><br><span class=\"line\">Path:</span><br><span class=\"line\">%SCALA_HOME%\\bin</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ul>\n<li><p>scalac HelloScala.scala    </p>\n</li>\n<li><p>scala HelloScala</p>\n</li>\n</ul>\n<p><code>和java一样，编译运行</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloScala</span></span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args:<span class=\"type\">Array</span>[<span class=\"type\">String</span>]):<span class=\"type\">Unit</span> ={</span><br><span class=\"line\">        print(<span class=\"string\">\"hello scala\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"在IDEA在线安装插件\"><a href=\"#在IDEA在线安装插件\" class=\"headerlink\" title=\"在IDEA在线安装插件\"></a>在IDEA在线安装插件</h2><p><code>在IDEA中运行需要安装插件！！！</code></p>\n<ul>\n<li>在IDEA软件中搜索插件框里面输入 <strong>Scala</strong>-&gt;点击 <strong>Install</strong>-&gt;点击 <strong>ok</strong>-&gt;点击 <strong>apply</strong>，最后重启 IDEA。</li>\n</ul>\n<h1 id=\"Scala六大特性\"><a href=\"#Scala六大特性\" class=\"headerlink\" title=\"Scala六大特性\"></a>Scala六大特性</h1><h3 id=\"1-无缝-JAVA-互操作\"><a href=\"#1-无缝-JAVA-互操作\" class=\"headerlink\" title=\"1. 无缝 JAVA 互操作\"></a>1. 无缝 JAVA 互操作</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Scala 在 JVM 上运行，因此可以自由混合 Java 和 Scala 堆栈以实现完全无缝集成。</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"2-类型推断-自动推测类型-var\"><a href=\"#2-类型推断-自动推测类型-var\" class=\"headerlink\" title=\"2. 类型推断(自动推测类型 var)\"></a>2. 类型推断(自动推测类型 var)</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">所以类型系统感觉不是那么静态。不要为类型系统工作。让类型系统为您工作！</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-并发和分布（Actor）\"><a href=\"#3-并发和分布（Actor）\" class=\"headerlink\" title=\"3. 并发和分布（Actor）\"></a>3. 并发和分布（Actor）</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">对集合使用数据并行操作，使用参与者进行并发和分发，或使用期货进行异步编程。</span><br><span class=\"line\"></span><br><span class=\"line\">使用scala语言，去进行并发，以及分布式场景下的开发时，它有着得天独厚的优势</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"4-性状\"><a href=\"#4-性状\" class=\"headerlink\" title=\"4. 性状\"></a>4. 性状</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">将 Java 样式接口的灵活性与类的强大功能相结合。考虑原则性的多重继承。</span><br><span class=\"line\"></span><br><span class=\"line\">java当中结合接口以及抽象类的一个结合器，多继承，类似java中interfaces和abstract结合</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"5-模式匹配-switch\"><a href=\"#5-模式匹配-switch\" class=\"headerlink\" title=\"5. 模式匹配(switch)\"></a>5. 模式匹配(switch)</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">匹配类层次结构、序列、常量等。</span><br><span class=\"line\"></span><br><span class=\"line\">类似Java中的switch ...case</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"6-高阶函数\"><a href=\"#6-高阶函数\" class=\"headerlink\" title=\"6. 高阶函数\"></a>6. 高阶函数</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">函数是一流的对象。在保证类型安全的情况下编写它们。在任何地方使用它们，将它们传递给任何东西。</span><br><span class=\"line\"></span><br><span class=\"line\">传递函数</span><br><span class=\"line\">String name = \"zw\"  //静态</span><br><span class=\"line\">n=1,n=\"1\"          //动态</span><br><span class=\"line\"></span><br><span class=\"line\">一句话总结：Scala是一门以jvm为运行环境的静态类型编程语言，具备面向对象及函数式编程的特性。</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>所有的main方法要在，object中被调用</code></p>\n<h1 id=\"Scala基础\"><a href=\"#Scala基础\" class=\"headerlink\" title=\"Scala基础\"></a>Scala基础</h1><h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p><strong>Scala 与 Java有着相同的数据类型，在Scala中数据类型都是对象，也就是说scala没有java中的原生类型。</strong></p>\n<p><strong>Scala数据类型分为两大类 AnyVal(值类型) 和 AnyRef(引用类型)， 注意：不管是AnyVal还是AnyRef 都是对象。</strong></p>\n<p><img src=\"/posts/2d68ebe4/1.png\"></p>\n<p><img src=\"/posts/2d68ebe4/2.png\"></p>\n<p>比较特殊的None,是Option的两个子类之一，另一个是Some,用于安全的函数返回值</p>\n<p>scala推荐在可能返回空的方法使用Option[X]作为返回类型，如果有值就返回Some[X],否则返回None</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span></span>(key : <span class=\"type\">A</span>): <span class=\"type\">Option</span>[<span class=\"type\">B</span>] ={</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (contains(key))</span><br><span class=\"line\">\t\t<span class=\"type\">Some</span>(getValue(key))</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"type\">None</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>Nil表示长度为0的List</p>\n<h3 id=\"Scala中val与var的区别\"><a href=\"#Scala中val与var的区别\" class=\"headerlink\" title=\"Scala中val与var的区别\"></a><a href=\"https://so.csdn.net/so/search?q=Scala&amp;spm=1001.2101.3001.7020\">Scala</a>中val与var的区别</h3><ol>\n<li>val代表value，val修饰的变量，相当于java中的final</li>\n<li>var代表variable，普通变量，可变变量，但是这个可变是有限制的，在scala中，任何变量都必须初始化，初始化后，这个变量的类型也就确定了（类型不可再改变），因此即使是var，也只能在同类型间进行重新赋值，修改值等，不允许跨类修改、</li>\n</ol>\n<h3 id=\"scala变量和常量以及类对象的创建-伴生类-伴生对象\"><a href=\"#scala变量和常量以及类对象的创建-伴生类-伴生对象\" class=\"headerlink\" title=\"scala变量和常量以及类对象的创建 伴生类 伴生对象\"></a>scala变量和常量以及类对象的创建 伴生类 伴生对象</h3><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bigdata.chapter01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/6/21</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: com.bigdata.chapter01</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1.一行的结尾可以省略分号，如果说一行中有多个语句那么可以使用分号进行隔开</span></span><br><span class=\"line\"><span class=\"comment\">    2.var修饰变量，val修饰常量</span></span><br><span class=\"line\"><span class=\"comment\">    3.class默认实现了getter setter方法</span></span><br><span class=\"line\"><span class=\"comment\">    4.class中如果有参数的传入，那么这个构造器就是这个类的默认构造器</span></span><br><span class=\"line\"><span class=\"comment\">    5.重写构造器，必须调用类默认的构造器</span></span><br><span class=\"line\"><span class=\"comment\">    6.class在被new对象的时候，除了方法内部不执行，其他地方的代码都会被执行//按先后顺序来的</span></span><br><span class=\"line\"><span class=\"comment\">    7.object里面不能传递参数，object里面的属性和方法都是静态（类似java中static修饰的东西）类似于java中的工具类（类名，方法）</span></span><br><span class=\"line\"><span class=\"comment\">    8.伴生类和伴生对象:在一个scala文件中，如果class和object名字一样，则互为伴生类和伴生对象，他们可以直接访问互相的私有成员变量</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">xname:<span class=\"type\">String</span>,xage:<span class=\"type\">Int</span></span>)</span>{</span><br><span class=\"line\">   <span class=\"keyword\">val</span> name=xname</span><br><span class=\"line\">   <span class=\"keyword\">val</span> age=xage</span><br><span class=\"line\">   <span class=\"keyword\">var</span> money=<span class=\"number\">100</span></span><br><span class=\"line\">  println(<span class=\"number\">111</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">this</span></span>(xname:<span class=\"type\">String</span>,xage:<span class=\"type\">Int</span>,xmoney:<span class=\"type\">Int</span>){    <span class=\"comment\">//重写构造器必须调用类默认的构造器</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>(xname,xage)</span><br><span class=\"line\">      money=xmoney</span><br><span class=\"line\">    }</span><br><span class=\"line\">  println(<span class=\"number\">222</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span></span>()={</span><br><span class=\"line\">    println(<span class=\"string\">\"你好哦\"</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  println(<span class=\"number\">333</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  {</span><br><span class=\"line\">    println(<span class=\"number\">444</span>)</span><br><span class=\"line\">    println(<span class=\"number\">555</span>)</span><br><span class=\"line\">    println(<span class=\"number\">666</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">HelloWorld</span> </span>{  <span class=\"comment\">//在ovject对象，在对象下，属性，方法，代码块，都是静态</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> height=<span class=\"number\">180</span></span><br><span class=\"line\">  <span class=\"comment\">//public static void main(String[] args)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">      <span class=\"keyword\">val</span> person = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"郑炜\"</span>,<span class=\"number\">18</span>,<span class=\"number\">50</span>)</span><br><span class=\"line\">      println(person.name+<span class=\"string\">\":\"</span>+person.age+<span class=\"string\">\":\"</span>+person.money)</span><br><span class=\"line\">    person.test()</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if  else\"></a>if  else</h3><p>同 java一样的语法结构，单，双，多分支这样几种结构</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * StdIn键盘标准输入 scala.io包下的</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">  <span class=\"keyword\">val</span> age = <span class=\"type\">StdIn</span>.readInt()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span> &amp;&amp; age &lt; <span class=\"number\">100</span>) {</span><br><span class=\"line\">    println(<span class=\"string\">\"成年\"</span>)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (age &gt; <span class=\"number\">0</span> &amp;&amp; age &lt; <span class=\"number\">18</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"未成年\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    println(<span class=\"string\">\"????\"</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"for-while-do…while\"><a href=\"#for-while-do…while\" class=\"headerlink\" title=\"for,while,do…while\"></a>for,while,do…while</h3><ol>\n<li>to 和until的用法（不带步长，带步长的区别）</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * to和until </span></span><br><span class=\"line\"><span class=\"comment\"> * 1 to 10 返回1到10的Range数组，包含10</span></span><br><span class=\"line\"><span class=\"comment\"> * 1 until 10 返回1到10的Range数组，不包含10</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">println(<span class=\"number\">1</span> to <span class=\"number\">10</span>) <span class=\"comment\">//打印1,2,3,4,5,6,7,8,9,10</span></span><br><span class=\"line\">println(<span class=\"number\">1</span> to (<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"number\">1</span> to (<span class=\"number\">10</span>,<span class=\"number\">2</span>)) <span class=\"comment\">//步长为2，从1开始打印 1，3，5，7，9</span></span><br><span class=\"line\">println(<span class=\"number\">1.</span>to(<span class=\"number\">10</span>,<span class=\"number\">2</span>)) <span class=\"comment\">//与上面等价</span></span><br><span class=\"line\"></span><br><span class=\"line\">println(<span class=\"number\">1</span> until <span class=\"number\">10</span>) <span class=\"comment\">//不包含最后一个数,1,2,3,4,5,6,7,8,9</span></span><br><span class=\"line\">println(<span class=\"number\">1</span> until(<span class=\"number\">10</span>))<span class=\"comment\">//与上面等价</span></span><br><span class=\"line\">print(<span class=\"number\">1</span> until(<span class=\"number\">10</span>,<span class=\"number\">3</span>)) <span class=\"comment\">//步长为3，从1开始打印，1，4，7</span></span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li><p>创建for循环</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * for 循环</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>) {</span><br><span class=\"line\">  println(i)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>创建多层for循环</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以分号隔开，构成多层for循环</span></span><br><span class=\"line\"><span class=\"comment\">//scala中 不能写count++ count-- 只能写count+</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span>; j &lt;- <span class=\"number\">1</span> until <span class=\"number\">10</span>){</span><br><span class=\"line\">  println(<span class=\"string\">\"i=\"</span>+ i +<span class=\"string\">\", j=\"</span>+j)</span><br><span class=\"line\">  count += <span class=\"number\">1</span></span><br><span class=\"line\">}</span><br><span class=\"line\">println(count)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例子： 打印小九九</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">1</span> to <span class=\"number\">9</span> ; j &lt;- <span class=\"number\">1</span> to i){    <span class=\"comment\">//后面内嵌循环 j随着i变化而变化</span></span><br><span class=\"line\">      print(j + <span class=\"string\">\"*\"</span> + i + <span class=\"string\">\"=\"</span> + (i * j) + <span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j == i){</span><br><span class=\"line\">        println()</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>*<span class=\"number\">1</span>=<span class=\"number\">1</span>\t</span><br><span class=\"line\"><span class=\"number\">2</span>*<span class=\"number\">1</span>=<span class=\"number\">2</span>\t<span class=\"number\">2</span>*<span class=\"number\">2</span>=<span class=\"number\">4</span>\t</span><br><span class=\"line\"><span class=\"number\">3</span>*<span class=\"number\">1</span>=<span class=\"number\">3</span>\t<span class=\"number\">3</span>*<span class=\"number\">2</span>=<span class=\"number\">6</span>\t<span class=\"number\">3</span>*<span class=\"number\">3</span>=<span class=\"number\">9</span>\t</span><br><span class=\"line\"><span class=\"number\">4</span>*<span class=\"number\">1</span>=<span class=\"number\">4</span>\t<span class=\"number\">4</span>*<span class=\"number\">2</span>=<span class=\"number\">8</span>\t<span class=\"number\">4</span>*<span class=\"number\">3</span>=<span class=\"number\">12</span>\t<span class=\"number\">4</span>*<span class=\"number\">4</span>=<span class=\"number\">16</span>\t</span><br><span class=\"line\"><span class=\"number\">5</span>*<span class=\"number\">1</span>=<span class=\"number\">5</span>\t<span class=\"number\">5</span>*<span class=\"number\">2</span>=<span class=\"number\">10</span>\t<span class=\"number\">5</span>*<span class=\"number\">3</span>=<span class=\"number\">15</span>\t<span class=\"number\">5</span>*<span class=\"number\">4</span>=<span class=\"number\">20</span>\t<span class=\"number\">5</span>*<span class=\"number\">5</span>=<span class=\"number\">25</span>\t</span><br><span class=\"line\"><span class=\"number\">6</span>*<span class=\"number\">1</span>=<span class=\"number\">6</span>\t<span class=\"number\">6</span>*<span class=\"number\">2</span>=<span class=\"number\">12</span>\t<span class=\"number\">6</span>*<span class=\"number\">3</span>=<span class=\"number\">18</span>\t<span class=\"number\">6</span>*<span class=\"number\">4</span>=<span class=\"number\">24</span>\t<span class=\"number\">6</span>*<span class=\"number\">5</span>=<span class=\"number\">30</span>\t<span class=\"number\">6</span>*<span class=\"number\">6</span>=<span class=\"number\">36</span>\t</span><br><span class=\"line\"><span class=\"number\">7</span>*<span class=\"number\">1</span>=<span class=\"number\">7</span>\t<span class=\"number\">7</span>*<span class=\"number\">2</span>=<span class=\"number\">14</span>\t<span class=\"number\">7</span>*<span class=\"number\">3</span>=<span class=\"number\">21</span>\t<span class=\"number\">7</span>*<span class=\"number\">4</span>=<span class=\"number\">28</span>\t<span class=\"number\">7</span>*<span class=\"number\">5</span>=<span class=\"number\">35</span>\t<span class=\"number\">7</span>*<span class=\"number\">6</span>=<span class=\"number\">42</span>\t<span class=\"number\">7</span>*<span class=\"number\">7</span>=<span class=\"number\">49</span>\t</span><br><span class=\"line\"><span class=\"number\">8</span>*<span class=\"number\">1</span>=<span class=\"number\">8</span>\t<span class=\"number\">8</span>*<span class=\"number\">2</span>=<span class=\"number\">16</span>\t<span class=\"number\">8</span>*<span class=\"number\">3</span>=<span class=\"number\">24</span>\t<span class=\"number\">8</span>*<span class=\"number\">4</span>=<span class=\"number\">32</span>\t<span class=\"number\">8</span>*<span class=\"number\">5</span>=<span class=\"number\">40</span>\t<span class=\"number\">8</span>*<span class=\"number\">6</span>=<span class=\"number\">48</span>\t<span class=\"number\">8</span>*<span class=\"number\">7</span>=<span class=\"number\">56</span>\t<span class=\"number\">8</span>*<span class=\"number\">8</span>=<span class=\"number\">64</span>\t</span><br><span class=\"line\"><span class=\"number\">9</span>*<span class=\"number\">1</span>=<span class=\"number\">9</span>\t<span class=\"number\">9</span>*<span class=\"number\">2</span>=<span class=\"number\">18</span>\t<span class=\"number\">9</span>*<span class=\"number\">3</span>=<span class=\"number\">27</span>\t<span class=\"number\">9</span>*<span class=\"number\">4</span>=<span class=\"number\">36</span>\t<span class=\"number\">9</span>*<span class=\"number\">5</span>=<span class=\"number\">45</span>\t<span class=\"number\">9</span>*<span class=\"number\">6</span>=<span class=\"number\">54</span>\t<span class=\"number\">9</span>*<span class=\"number\">7</span>=<span class=\"number\">63</span>\t<span class=\"number\">9</span>*<span class=\"number\">8</span>=<span class=\"number\">72</span>\t<span class=\"number\">9</span>*<span class=\"number\">9</span>=<span class=\"number\">81</span>\t</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>for 循环中可以加条件判断，分号隔开</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以在for循环中加入条件判断</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(i&lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span> ;<span class=\"keyword\">if</span> (i%<span class=\"number\">2</span>) == <span class=\"number\">0</span> ;<span class=\"keyword\">if</span> (i == <span class=\"number\">4</span>) ){</span><br><span class=\"line\">  println(i)</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p>scala中不能使用 count++ ， count– 只能使用 count = count+1 ， count += 1</p>\n</li>\n<li><p>for循环用yield 关键字返回一个集合（ for {子句} yield {变量或表达式} ，原来的集合不会被改变，只会通过你的for/yield构建出一个新的集合。）</p>\n</li>\n<li><p>while循环(两种方式)， while(){}，do {}while()</p>\n</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将for中的符合条件的元素通过yield关键字返回成一个集合</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> list = <span class=\"keyword\">for</span>(i &lt;- <span class=\"number\">1</span> to <span class=\"number\">10</span> ; <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">5</span> )) <span class=\"keyword\">yield</span> i</span><br><span class=\"line\"><span class=\"keyword\">for</span>( w &lt;- list ){</span><br><span class=\"line\">  println(w) </span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * while 循环</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(index &lt; <span class=\"number\">10</span> ){</span><br><span class=\"line\">  println(<span class=\"string\">\"第\"</span>+index+<span class=\"string\">\"次while 循环\"</span>)</span><br><span class=\"line\">  index += <span class=\"number\">1</span> }</span><br><span class=\"line\"></span><br><span class=\"line\">  index = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">do</span>{</span><br><span class=\"line\">  index +=<span class=\"number\">1</span></span><br><span class=\"line\">  println(<span class=\"string\">\"第\"</span>+index+<span class=\"string\">\"次do while 循环\"</span>) </span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">while</span>(index &lt;<span class=\"number\">10</span> )</span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"Scala函数\"><a href=\"#Scala函数\" class=\"headerlink\" title=\"Scala函数\"></a>Scala函数</h1><p>有参函数</p>\n<p>无参函数</p>\n<h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.bigdata.chapter01</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/6/21</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: com.bigdata.chapter01</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1.return关键字可以省略，scala自动将函数的最后一行的值作为函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">    2.{}只有一句语句时，可以省略{}</span></span><br><span class=\"line\"><span class=\"comment\">    3.函数可以省略返回类型(显式)，会进行类型自动推断，(隐式) 。 显示调用return时不能省略返回类型</span></span><br><span class=\"line\"><span class=\"comment\">    4.= 可以省略，如果省略掉了，函数会自动将返回值丢弃，一般用在无返回值的函数中省略</span></span><br><span class=\"line\"><span class=\"comment\">    5.方法的参数是使用val定义的，即方法内只能使用参数而不能修改参数值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">test2</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getMax</span></span>(a:<span class=\"type\">Int</span>,b:<span class=\"type\">Int</span>){</span><br><span class=\"line\">      <span class=\"comment\">//a=20   不能修改参数值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(a&gt;b)</span><br><span class=\"line\">        a</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        b</span><br><span class=\"line\">         <span class=\"comment\">//最后一行什么类型就推断成什么类型</span></span><br><span class=\"line\">      println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    getMax(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意点：</p>\n<ol>\n<li><p>Scala 使用 def 关键字告诉编译器这是一个方法。</p>\n</li>\n<li><p>我们可以通过在参数后面加一个冒号和类型来显式地指定返回类型。</p>\n</li>\n<li><p>方法可以写返回值的类型也可以不写，会自动推断，有时候不能省略，必须写，比如在递归函数中或者函数的返回值是函数类型的时候。</p>\n</li>\n<li><p>Scala 中函数有返回值时，可以写 return ，也可以不写 return ，不写 return 时会把函数中最后一行当做结果返回。当写 return 时，必须要写函数的返回类型。如果返回值可以一行搞定，可以将 {} 省略不写</p>\n</li>\n<li><p>传递给方法的参数可以在方法中使用，并且 scala 规定方法的传过来的参数为 val 的，不是 var的。</p>\n</li>\n<li><p>如果去掉方法体前面的等号，那么这个方法返回类型必定是 Unit 的。这种说法无论方法体里面什么逻辑都成立， scala 可以把任意类型转换为 Unit 。假设，函数里面的逻辑最后返回了一个string ，那么这个返回值会被转换成 Unit ，原本逻辑的值会被丢弃。</p>\n</li>\n</ol>\n<h3 id=\"递归函数，默认值，可变参数\"><a href=\"#递归函数，默认值，可变参数\" class=\"headerlink\" title=\"递归函数，默认值，可变参数\"></a>递归函数，默认值，可变参数</h3><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">test2</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    递归函数：关键点在于递归的定义，终止条件(栈溢出)</span></span><br><span class=\"line\"><span class=\"comment\">    5*4*3..</span></span><br><span class=\"line\"><span class=\"comment\">    递归函数不能省略方法的返回类型(也就是等号旁边的：int)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    def zw(a:Int):Int={</span></span><br><span class=\"line\"><span class=\"comment\">//      if(a==1)</span></span><br><span class=\"line\"><span class=\"comment\">//         a</span></span><br><span class=\"line\"><span class=\"comment\">//      else</span></span><br><span class=\"line\"><span class=\"comment\">//        a*zw(a-1)   //自己调用自己  5*4*3*2*1</span></span><br><span class=\"line\"><span class=\"comment\">//    }</span></span><br><span class=\"line\"><span class=\"comment\">//    println(zw(5))</span></span><br><span class=\"line\"><span class=\"comment\">//    #############################################</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     *   默认值注意：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.默认值的函数中，如果传入的参数个数与函数定义相同，则传入的数值会覆盖默认值</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.如果不想覆盖默认值，传入的参数个数小于定义的函数的参数，则需要指定参数名称</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//      def f2(a:Int=5,b:Int=10)={</span></span><br><span class=\"line\"><span class=\"comment\">//        a+b</span></span><br><span class=\"line\"><span class=\"comment\">//}</span></span><br><span class=\"line\"><span class=\"comment\">//      println(f2())    // 15</span></span><br><span class=\"line\"><span class=\"comment\">//      println(f2(50,100))  //150</span></span><br><span class=\"line\"><span class=\"comment\">//      println(f2(100))     // 110</span></span><br><span class=\"line\"><span class=\"comment\">//      println(f2(b = 100)) //105</span></span><br><span class=\"line\"><span class=\"comment\">//    #############################################</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    可变参数个数函数</span></span><br><span class=\"line\"><span class=\"comment\">    java中写法 int ...a</span></span><br><span class=\"line\"><span class=\"comment\">    注意：多个参数逗号分开</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"><span class=\"comment\">//    def getSum(a:Int*)={</span></span><br><span class=\"line\"><span class=\"comment\">//      var sum=0</span></span><br><span class=\"line\"><span class=\"comment\">//      for(i&lt;-a){</span></span><br><span class=\"line\"><span class=\"comment\">//        sum+=i</span></span><br><span class=\"line\"><span class=\"comment\">//      }</span></span><br><span class=\"line\"><span class=\"comment\">//       sum</span></span><br><span class=\"line\"><span class=\"comment\">//}</span></span><br><span class=\"line\"><span class=\"comment\">//    println(\"可变参数结果：\"+getSum(1,2,3,4,5,6))</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>一共有如下三种：</p>\n<ol>\n<li>有参匿名函数</li>\n<li>无参匿名函数</li>\n<li>有返回值的匿名函数<ul>\n<li>可以将匿名函数返回给val定义的值</li>\n<li>匿名函数不能显式声明函数的返回类型</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 匿名函数  (参数)=&gt;{方法体}</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.有参数匿名函数</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.无参数匿名函数</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.有返回值的匿名函数</span></span><br><span class=\"line\"><span class=\"comment\">    匿名函数 =&gt; 和高阶函数结合使用</span></span><br><span class=\"line\"><span class=\"comment\">    没有名字的函数</span></span><br><span class=\"line\"><span class=\"comment\">    val定义变量接收匿名函数</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意：</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以将匿名函数返回给定义的一个变量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//有参数匿名函数</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> value1 = (a : <span class=\"type\">Int</span>) =&gt; {</span><br><span class=\"line\">   println(a) }</span><br><span class=\"line\">value1(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">//无参数匿名函数</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> value2 = ()=&gt;{</span><br><span class=\"line\">   println(<span class=\"string\">\"我爱中国\"</span>) }</span><br><span class=\"line\">value2()</span><br><span class=\"line\"><span class=\"comment\">//有返回值的匿名函数</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> value3 = (a:<span class=\"type\">Int</span>,b:<span class=\"type\">Int</span>) =&gt;{</span><br><span class=\"line\">   a+b }</span><br><span class=\"line\">println(value3(<span class=\"number\">4</span>,<span class=\"number\">4</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"嵌套函数-偏应用函数\"><a href=\"#嵌套函数-偏应用函数\" class=\"headerlink\" title=\"嵌套函数+偏应用函数\"></a>嵌套函数+偏应用函数</h3><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 嵌套函数</span></span><br><span class=\"line\"><span class=\"comment\"> * 例如：嵌套函数求5的阶乘</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zw</span></span>(num:<span class=\"type\">Int</span>)={   </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jie</span></span>(a:<span class=\"type\">Int</span>):<span class=\"type\">Int</span>={   <span class=\"comment\">//阶乘</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> sum=a</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>)</span><br><span class=\"line\">         <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">          sum*jie(a<span class=\"number\">-1</span>)   <span class=\"comment\">//递归</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">      jie(num)</span><br><span class=\"line\">    }</span><br><span class=\"line\">    println(zw(<span class=\"number\">5</span>))</span><br><span class=\"line\">  }</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"偏应用函数\"><a href=\"#偏应用函数\" class=\"headerlink\" title=\"偏应用函数\"></a>偏应用函数</h3><p>偏应用函数是一种表达式，不需要提供函数需要的所有参数，只需要提供部分，或不提供所需参数。如下场景中，一个参数是完全相同，另一个参数不同，在这样一个情况之下，我们可以使用偏应用函数来进行优化。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"type\">Date</span>   <span class=\"comment\">//java日期包</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 偏应用函数</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以理解为一个表达式，让你不需要提供所有的参数，仅仅提供部分即可，找到变与不变，绑定不变值</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span></span>(date :<span class=\"type\">Date</span>, s :<span class=\"type\">String</span>)= {</span><br><span class=\"line\">   println(<span class=\"string\">\"date is \"</span>+ date +<span class=\"string\">\",log is \"</span>+ s) }</span><br><span class=\"line\"><span class=\"keyword\">val</span> date = <span class=\"keyword\">new</span> <span class=\"type\">Date</span>()</span><br><span class=\"line\">log(date ,<span class=\"string\">\"log1\"</span>)</span><br><span class=\"line\">log(date ,<span class=\"string\">\"log2\"</span>)</span><br><span class=\"line\">log(date ,<span class=\"string\">\"log3\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//想要调用log，以上变化的是第二个参数，可以用偏应用函数处理</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> logWithDate = log(date,_:<span class=\"type\">String</span>)   <span class=\"comment\">//下划线冒号  _: 是变化参数</span></span><br><span class=\"line\">logWithDate(<span class=\"string\">\"log11\"</span>)</span><br><span class=\"line\">logWithDate(<span class=\"string\">\"log22\"</span>)</span><br><span class=\"line\">logWithDate(<span class=\"string\">\"log33\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>​    函数的参数是函数，或者函数的返回类型是函数，或者函数的参数和函数的返回类型是函数的函数。</p>\n<ol>\n<li><p>函数的参数是函数</p>\n</li>\n<li><p>函数的返回是函数</p>\n</li>\n<li><p>函数的参数和函数的返回是函数</p>\n</li>\n</ol>\n<h4 id=\"高阶函数-函数的参数是函数\"><a href=\"#高阶函数-函数的参数是函数\" class=\"headerlink\" title=\"高阶函数(函数的参数是函数)\"></a>高阶函数(函数的参数是函数)</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f7</span></span>(a:<span class=\"type\">Int</span>,f:(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)=&gt;<span class=\"type\">Int</span>): <span class=\"type\">Int</span> ={   <span class=\"comment\">//把函数当参数传入</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = f(<span class=\"number\">1</span>, <span class=\"number\">2</span>)   <span class=\"comment\">//使用函数参数</span></span><br><span class=\"line\">    a*result</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f8</span></span>(a:<span class=\"type\">Int</span>,b:<span class=\"type\">Int</span>):<span class=\"type\">Int</span>=a+b</span><br><span class=\"line\"></span><br><span class=\"line\">println(f7(<span class=\"number\">5</span>, f8))   <span class=\"comment\">//  result=15</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"高阶函数-函数的返回是函数\"><a href=\"#高阶函数-函数的返回是函数\" class=\"headerlink\" title=\"高阶函数(函数的返回是函数)\"></a>高阶函数(函数的返回是函数)</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">函数返回类型是函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f9</span></span>(a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>): (<span class=\"type\">String</span>, <span class=\"type\">String</span>) =&gt; <span class=\"type\">String</span> ={   <span class=\"comment\">//返回类型为函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f10</span></span>(c: <span class=\"type\">String</span>, d: <span class=\"type\">String</span>):<span class=\"type\">String</span>={</span><br><span class=\"line\">  a + <span class=\"string\">\" \"</span> + b + <span class=\"string\">\" \"</span> + c + <span class=\"string\">\" \"</span> + d</span><br><span class=\"line\">  }</span><br><span class=\"line\">  f10   <span class=\"comment\">//返回出去</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">val</span> z: <span class=\"type\">String</span> = <span class=\"string\">\"list\"</span>   <span class=\"comment\">//String</span></span><br><span class=\"line\"><span class=\"comment\">//ctrl+alt+v</span></span><br><span class=\"line\"><span class=\"comment\">//val function1= f9(1, 2)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//alt+enter   显示变量类型 快捷键</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> function: (<span class=\"type\">String</span>, <span class=\"type\">String</span>) =&gt; <span class=\"type\">String</span> = f9(<span class=\"number\">1</span>, <span class=\"number\">2</span>)  <span class=\"comment\">//使用f9函数 返回结果为函数</span></span><br><span class=\"line\">println(function(<span class=\"string\">\"xin\"</span>,<span class=\"string\">\"xin\"</span>))       <span class=\"comment\">//使用返回的f10函数  返回结果为 字符串</span></span><br><span class=\"line\">println(f9(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"string\">\"xin\"</span>,<span class=\"string\">\"xin\"</span>))       <span class=\"comment\">//简化 前一个形参返回函数</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"高阶函数-函数的参数和函数的返回是函数\"><a href=\"#高阶函数-函数的参数和函数的返回是函数\" class=\"headerlink\" title=\"高阶函数(函数的参数和函数的返回是函数)\"></a>高阶函数(函数的参数和函数的返回是函数)</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    参数为函数，返回值为函数的函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f11</span></span>(f:(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)=&gt;<span class=\"type\">Int</span>):(<span class=\"type\">Int</span>,<span class=\"type\">Int</span>)=&gt;<span class=\"type\">Int</span>={  <span class=\"comment\">//传入参数为函数，返回值为函数的函数</span></span><br><span class=\"line\">        f     <span class=\"comment\">//返回f函数</span></span><br><span class=\"line\">}</span><br><span class=\"line\">   <span class=\"keyword\">val</span> zw= f11((a:<span class=\"type\">Int</span>,b:<span class=\"type\">Int</span>)=&gt;{a+b})   <span class=\"comment\">//也可以使用变量来接收 返回的函数</span></span><br><span class=\"line\">    println(zw(<span class=\"number\">100</span>, <span class=\"number\">200</span>))              <span class=\"comment\">//使用返回的函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(f11((a: <span class=\"type\">Int</span>, b: <span class=\"type\">Int</span>) =&gt; {a + b})(<span class=\"number\">100</span>, <span class=\"number\">200</span>))  <span class=\"comment\">//传入匿名函数，返回函数，使用函数   </span></span><br><span class=\"line\">    </span><br><span class=\"line\">                                <span class=\"comment\">//以上这句话还可以写成这样</span></span><br><span class=\"line\">    println(f11(_*_)(<span class=\"number\">100</span>,<span class=\"number\">3</span>))   <span class=\"comment\">//简化 如果函数的参数在方法体中只使用了一次 那么可以写成_表示，也可以把* 改为+ 运算符</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"柯里化函数\"><a href=\"#柯里化函数\" class=\"headerlink\" title=\"柯里化函数\"></a>柯里化函数</h3><p>柯里化–颗粒化，将参数变成颗粒散落简而言之就是将参数拆拆拆。函数柯里化基本是在做这么一件事情：只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。如果写成公式文字就是这样。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">fn(a,b,c,d)=&gt;fn(a)(b)(c)(d)；</span><br><span class=\"line\">fn(a,b,c,d)=&gt;fn(a，b)(c)(d)；</span><br><span class=\"line\">fn(a,b,c,d)=&gt;fn(a)(b，c，d)；</span><br></pre></td></tr></tbody></table></figure>\n\n<p>可以理解为高阶函数的简化。和我们文档中上面的函数的返回类是函数的例子进行比较。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//def fun7(a :Int,b:Int,c:Int,d:Int) = {</span></span><br><span class=\"line\"><span class=\"comment\">// a+b+c+d</span></span><br><span class=\"line\"><span class=\"comment\">//}</span></span><br><span class=\"line\"><span class=\"comment\">//println(fun7(1,2,3,4))</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 柯里化函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun7</span></span>(a :<span class=\"type\">Int</span>,b:<span class=\"type\">Int</span>)(c:<span class=\"type\">Int</span>,d:<span class=\"type\">Int</span>) = {</span><br><span class=\"line\">   a+b+c+d }</span><br><span class=\"line\">println(fun7(<span class=\"number\">1</span>,<span class=\"number\">2</span>)(<span class=\"number\">3</span>,<span class=\"number\">4</span>))<span class=\"comment\">//执行完1+2得出3之后继续往下作为函数执行3+3+4最终求出结果10</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"Scala字符串\"><a href=\"#Scala字符串\" class=\"headerlink\" title=\"Scala字符串\"></a>Scala字符串</h2><h4 id=\"scala中操作符与方法的等价性\"><a href=\"#scala中操作符与方法的等价性\" class=\"headerlink\" title=\"scala中操作符与方法的等价性\"></a>scala中操作符与方法的等价性</h4><h4 id=\"StringBuilder-可变\"><a href=\"#StringBuilder-可变\" class=\"headerlink\" title=\"StringBuilder 可变\"></a>StringBuilder 可变</h4><h4 id=\"string-操作方法举例\"><a href=\"#string-操作方法举例\" class=\"headerlink\" title=\"string 操作方法举例\"></a>string 操作方法举例</h4><h4 id=\"scala中操作符与方法的等价性-1\"><a href=\"#scala中操作符与方法的等价性-1\" class=\"headerlink\" title=\"scala中操作符与方法的等价性\"></a><strong>scala中操作符与方法的等价性</strong></h4><ul>\n<li>比较：equals</li>\n<li>比较忽略大小写：equalsIgnoreCase</li>\n<li>indexOf:如果字符串中有传入的assci码对应的值，返回下标</li>\n</ul>\n<p><strong>scala中操作符即方法、方法即操作符。scala中操作符其实是普通方法调用的另一种表现形式，运算符的使用其实就是隐含地调用对应的方法。</strong>    </p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/6/22</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: com.bigdata.chapter01</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">test2</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> str: <span class=\"type\">String</span> = <span class=\"string\">\"abcd\"</span></span><br><span class=\"line\">    println(str.indexOf(<span class=\"string\">\"a\"</span>))   <span class=\"comment\">//0  下标</span></span><br><span class=\"line\">    println(str.indexOf(<span class=\"number\">99</span>))    <span class=\"comment\">//返回下标2 c</span></span><br><span class=\"line\">    <span class=\"comment\">//如果字符串中有传入的assci码对应的值，返回下标</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> str2=<span class=\"string\">\"ABCD\"</span></span><br><span class=\"line\">    println(str==str)</span><br><span class=\"line\">    println(str.compareToIgnoreCase(str2))   <span class=\"comment\">//忽略大小写比较 true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> stringBuilder = <span class=\"keyword\">new</span> <span class=\"type\">StringBuilder</span></span><br><span class=\"line\">    stringBuilder.append(<span class=\"string\">\"abc\"</span>)          <span class=\"comment\">//添加append</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      stringBuilder.++=(\"d\")</span></span><br><span class=\"line\"><span class=\"comment\">      stringBuilder++=\"d\"      //等价的</span></span><br><span class=\"line\"><span class=\"comment\">      stringbuilder对象可以+=char类型不能+=String类型，普通的+只有char类型追加在后面</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    stringBuilder++=<span class=\"string\">\"e\"</span></span><br><span class=\"line\">    stringBuilder+='f'</span><br><span class=\"line\">    stringBuilder+'f'</span><br><span class=\"line\">    println(stringBuilder)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> x=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> y=<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> num1=x+y;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> num2=x.+(y);    <span class=\"comment\">// 在scala中所有的操作符其实都是在调用函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">\"num1 =\"</span>+num1)</span><br><span class=\"line\">    println(<span class=\"string\">\"num2 =\"</span>+num2)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><p><a href=\"https://blog.csdn.net/m0_46657040/article/details/108581730\">https://blog.csdn.net/m0_46657040/article/details/108581730</a></p>\n<p>Scala提供了一套很好的集合实现，提供了一些集合类型的抽象。Scala 集合分为可变的和不可变的集合。<br>可变集合可以在适当的地方被更新或扩展。这意味着你可以修改，添加，移除一个集合的元素。而不可变集合类，相比之下，永远不会改变。不过，你仍然可以模拟添加，移除或更新操作。但是这些操作将在每一种情况下都返回一个新的集合，同时使原来的集合不发生改变。</p>\n<h3 id=\"Array数组\"><a href=\"#Array数组\" class=\"headerlink\" title=\"Array数组\"></a>Array数组</h3><p>数组分为<strong>不可变长数组（Array）</strong> 和<strong>可变长数组（ArrayBuffer）</strong> 。 如字面意思，前者长度不可变， 已经写死了， 后者长度可变。注:只是长度不可变， 但是对应角标元素可变</p>\n<h4 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h4><p><code>Array数组的第一个元素索引为0，最后一个元素的索引为元素总数（数组长度）减1。</code></p>\n<p><code>在IDEA中显示变量类型可以按 Alt+Enter 显示变量类型</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建数组两种方式：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.指定长度创建：new Array[Any](3)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.直接Array初始化赋值创建</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建类型为 Int 长度为3的数组</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> arr1: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">//创建String 类型的数组，直接初始化赋值</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> arr2: <span class=\"type\">Array</span>[<span class=\"type\">String</span>] =<span class=\"type\">Array</span>[<span class=\"type\">String</span>](<span class=\"string\">\"s100\"</span>,<span class=\"string\">\"s200\"</span>,<span class=\"string\">\"s300\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">arr1(<span class=\"number\">0</span>) = <span class=\"number\">100</span></span><br><span class=\"line\">arr1(<span class=\"number\">1</span>) = <span class=\"number\">200</span></span><br><span class=\"line\">arr1(<span class=\"number\">2</span>) = <span class=\"number\">300</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数组遍历：</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> zw: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] =<span class=\"type\">Array</span>[<span class=\"type\">Int</span>](<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-0</span> until  zw.length)  </span><br><span class=\"line\">\tprint(i)</span><br><span class=\"line\"> <span class=\"comment\">//for(i&lt;-zw)</span></span><br><span class=\"line\"> <span class=\"comment\">//zw.foreach(i=&gt;{print(i)})</span></span><br><span class=\"line\"> <span class=\"comment\">//zw.foreach(print(_))</span></span><br><span class=\"line\"> <span class=\"comment\">//zw.foreach(print）</span></span><br><span class=\"line\"> </span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"创建多维数组\"><a href=\"#创建多维数组\" class=\"headerlink\" title=\"创建多维数组\"></a>创建多维数组</h4><p>多维数组一个数组中的值可以是另一个数组，另一个数组的值也可以是一个数组。矩阵与表格是我们常见的二维数组。</p>\n<p>多维数组的声明：<br>**var 数组名 = Array.ofDim[元素类型]**（第一维的长度，第二维的长度，……）</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   创建多维数组和遍历  以下为二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">   <span class=\"comment\">//第一种创建二维数组(3行3列)</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> matrix=<span class=\"type\">Array</span>[<span class=\"type\">Array</span>[<span class=\"type\">Int</span>]](<span class=\"type\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),<span class=\"type\">Array</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>),<span class=\"type\">Array</span>(<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//第二种创建二维数组(3行3列)</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> arr = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Array</span>[<span class=\"type\">String</span>]](<span class=\"number\">3</span>)</span><br><span class=\"line\">   arr(<span class=\"number\">0</span>)=<span class=\"type\">Array</span>(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">   arr(<span class=\"number\">1</span>)=<span class=\"type\">Array</span>(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>)</span><br><span class=\"line\">   arr(<span class=\"number\">2</span>)=<span class=\"type\">Array</span>(<span class=\"string\">\"7\"</span>,<span class=\"string\">\"8\"</span>,<span class=\"string\">\"9\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//第三种创建 var 数组名 = Array.ofDim[元素类型]（第一维的长度，第二维的长度，……）</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> zw=<span class=\"type\">Array</span>.ofDim[<span class=\"type\">Int</span>](<span class=\"number\">3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i&lt;<span class=\"number\">-0</span> to <span class=\"number\">2</span>;j&lt;<span class=\"number\">-0</span> to <span class=\"number\">2</span>) {</span><br><span class=\"line\">     <span class=\"comment\">//循环赋值</span></span><br><span class=\"line\">     zw(i)(j) = (i + <span class=\"number\">1</span>) * <span class=\"number\">10</span> + (j + <span class=\"number\">1</span>)</span><br><span class=\"line\">   }</span><br><span class=\"line\"></span><br><span class=\"line\">   zw(<span class=\"number\">0</span>)(<span class=\"number\">1</span>)=<span class=\"number\">520</span>  <span class=\"comment\">//arr1 0行0列 修改值</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 二维数组循环打印：</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"comment\">//1.嵌套for循环打印</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(a&lt;-zw){</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(b&lt;-a) {</span><br><span class=\"line\">       print(b+<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">     }</span><br><span class=\"line\">     println()</span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"comment\">//2.foreach  匿名</span></span><br><span class=\"line\">   println(<span class=\"string\">\"----分割----\"</span>)</span><br><span class=\"line\">   matrix.foreach(z=&gt;{</span><br><span class=\"line\">     z.foreach(a=&gt;</span><br><span class=\"line\">       print(a)</span><br><span class=\"line\">     )</span><br><span class=\"line\">     println()</span><br><span class=\"line\">   })</span><br><span class=\"line\">   <span class=\"comment\">//3.foreach  最简写法</span></span><br><span class=\"line\">   println(<span class=\"string\">\"----分割----\"</span>)</span><br><span class=\"line\">   matrix.foreach(arr=&gt; {</span><br><span class=\"line\">     arr.foreach(print)</span><br><span class=\"line\">     println()</span><br><span class=\"line\">   })</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"数组中常用方法举例\"><a href=\"#数组中常用方法举例\" class=\"headerlink\" title=\"数组中常用方法举例\"></a>数组中常用方法举例</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     Array一部分方法:</span></span><br><span class=\"line\"><span class=\"comment\">     1.合并数组:</span></span><br><span class=\"line\"><span class=\"comment\">     def concat[T]( xss: Array[T]* ): Array[T]</span></span><br><span class=\"line\"><span class=\"comment\">     2.填充函数：返回数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充:</span></span><br><span class=\"line\"><span class=\"comment\">     def fill[T]( n: Int )(elem: =&gt; T): Array[T]</span></span><br><span class=\"line\"><span class=\"comment\">     3.填充函数：返回二维数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充。</span></span><br><span class=\"line\"><span class=\"comment\">     def fill[T]( n1: Int, n2: Int )( elem: =&gt; T ): Array[Array[T]]</span></span><br><span class=\"line\"><span class=\"comment\">     4.创建区间数组：创建指定区间内的数组，step 为每个元素间的步长:</span></span><br><span class=\"line\"><span class=\"comment\">     def range( start: Int, end: Int, step: Int ): Array[Int]</span></span><br><span class=\"line\"><span class=\"comment\">     5.返回指定长度的数组:返回指定长度数组，每个数组元素为指定函数的返回值，默认从 0 开始:</span></span><br><span class=\"line\"><span class=\"comment\">     def tabulate[T]( n: Int )(f: (Int)=&gt; T): Array[T]</span></span><br><span class=\"line\"><span class=\"comment\">     6.返回指定长度的数组:返回指定长度的二维数组，每个数组元素为指定函数的返回值，默认从 0 开始:</span></span><br><span class=\"line\"><span class=\"comment\">     def tabulate[T]( n1: Int, n2: Int )( f: (Int, Int ) =&gt; T): Array[Array[T]]</span></span><br><span class=\"line\"><span class=\"comment\">     7.返回指定长度的数组:返回指定长度数组，每个数组元素为指定函数的返回值。</span></span><br><span class=\"line\"><span class=\"comment\">     与tablulate不同之处在于同，iterate可以指定函数参数的初始值：</span></span><br><span class=\"line\"><span class=\"comment\">     def iterate[T]( start: T, len: Int )( f: (T) =&gt; T ): Array[T]</span></span><br><span class=\"line\"><span class=\"comment\">     8.复制数组：复制一个数组到另一个数组上 相等于 Java's System.arraycopy(src, srcPos, dest, destPos, length)</span></span><br><span class=\"line\"><span class=\"comment\">     def copy( src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int ): Unit</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"type\">Array</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> array1: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"type\">Array</span>(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//concat</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array2: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"type\">Array</span>.concat(array, array1)</span><br><span class=\"line\">    println(<span class=\"string\">\"concat：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x &lt;- array2)</span><br><span class=\"line\">      print(x + <span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//fill一维数组：</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array3 = <span class=\"type\">Array</span>.fill(<span class=\"number\">2</span>)(<span class=\"string\">\"Hello scala\"</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"fill一维数组：\"</span>)</span><br><span class=\"line\">    array3.foreach(print)</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//fill二维数组：</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array4 = <span class=\"type\">Array</span>.fill(<span class=\"number\">2</span>, <span class=\"number\">3</span>)(<span class=\"number\">100</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"fill二维数组：\"</span>)</span><br><span class=\"line\">    array4.foreach(x =&gt; {</span><br><span class=\"line\">      x.foreach(x =&gt; {</span><br><span class=\"line\">        print(x + <span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">      })</span><br><span class=\"line\">      println()</span><br><span class=\"line\">    })</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//range</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array5: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"type\">Array</span>.range(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">2</span>) <span class=\"comment\">//10到20步长为2 返回类型为数组</span></span><br><span class=\"line\">    println(<span class=\"string\">\"range：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x &lt;- array5)</span><br><span class=\"line\">      print(x + <span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//tabulate[T]( n: Int )(f: (Int)) 返回为一维数组</span></span><br><span class=\"line\">    <span class=\"comment\">//第一个参数为数组长度，第二个参数为匿名函数  x+5 这里的匿名函数参数x 默认为0 x+100就变成从100开始+1</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array6: <span class=\"type\">Array</span>[<span class=\"type\">Int</span>] = <span class=\"type\">Array</span>.tabulate(<span class=\"number\">6</span>)(x =&gt; x + <span class=\"number\">11</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"tabulate一维数组：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x &lt;- array6)</span><br><span class=\"line\">      print(x + <span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//tabulate[T]( n1: Int, n2: Int )( f: (Int, Int )</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回为二维数组 2行3列</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array7 = <span class=\"type\">Array</span>.tabulate(<span class=\"number\">2</span>, <span class=\"number\">3</span>)((z, w) =&gt; (z + <span class=\"number\">1</span>) * <span class=\"number\">10</span> + (w + <span class=\"number\">1</span>))</span><br><span class=\"line\">    println(<span class=\"string\">\"tabulate二维数组：\"</span>)</span><br><span class=\"line\">    array7.foreach(x =&gt; {</span><br><span class=\"line\">      x.foreach(x =&gt; {</span><br><span class=\"line\">        print(x + <span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">      })</span><br><span class=\"line\">      println()</span><br><span class=\"line\">    })</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//copy</span></span><br><span class=\"line\">    println(<span class=\"string\">\"copy：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> array8 = <span class=\"type\">Array</span>.range(<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">1</span>) <span class=\"comment\">//10,11,12,13,14</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array9 = <span class=\"keyword\">new</span> <span class=\"type\">Array</span>[<span class=\"type\">Int</span>](<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"comment\">//将array8从第2个元素开始，复制3个元素到array9的第0个元素后面</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x &lt;- array8)</span><br><span class=\"line\">      print(x + <span class=\"string\">\",\"</span>)</span><br><span class=\"line\">    <span class=\"type\">Array</span>.copy(array8, <span class=\"number\">2</span>, array9, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    println()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x &lt;- array9)</span><br><span class=\"line\">      print(x + <span class=\"string\">\",\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"可变长度数组\"><a href=\"#可变长度数组\" class=\"headerlink\" title=\"可变长度数组\"></a>可变长度数组</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">可变长度数组：</span></span><br><span class=\"line\"><span class=\"comment\">可变和不可变区别就在于长度。scala中默认都是不可变的，想要使用可变的话需要导包</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ArrayBuffer</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> arr =<span class=\"type\">ArrayBuffer</span>[<span class=\"type\">String</span>](<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>)     <span class=\"comment\">//ArrayBuffer可变数组</span></span><br><span class=\"line\">arr.append(<span class=\"string\">\"d\"</span>,<span class=\"string\">\"e\"</span>,<span class=\"string\">\"f\"</span>)   <span class=\"comment\">//可以添加任意个元素</span></span><br><span class=\"line\">arr.+=(<span class=\"string\">\"end\"</span>)             <span class=\"comment\">//最后追加元素</span></span><br><span class=\"line\">arr.+=:(<span class=\"string\">\"start\"</span>)          <span class=\"comment\">//开头追加元素</span></span><br><span class=\"line\">arr.foreach(println)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"合并Array\"><a href=\"#合并Array\" class=\"headerlink\" title=\"合并Array\"></a>合并Array</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zw=<span class=\"type\">Array</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> xin=<span class=\"type\">Array</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> result =<span class=\"type\">Array</span>.concat(zw,xin)</span><br><span class=\"line\">result.foreach(println)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"List列表-序列\"><a href=\"#List列表-序列\" class=\"headerlink\" title=\"List列表(序列)\"></a>List列表(序列)</h3><p>序列分为<strong>不可变长序列（List）</strong> 和<strong>可变长序列（ListBuffer）</strong>。不可变集合中添加新元素， 会生成一个新集合， 和不可变集合并不矛盾。给集合中添加元素一般都是从集合头部添加， 或者从集合尾部添加</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * List序列</span></span><br><span class=\"line\"><span class=\"comment\"> * 分为变长和不可变长序列，底层是链表</span></span><br><span class=\"line\"><span class=\"comment\"> * 特点：有序，可重复，增删快，查询慢</span></span><br><span class=\"line\"><span class=\"comment\"> * 不可变长序列：长度和角标都不可变</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>Scala 列表类似于数组，它们所有元素的类型都相同，但是它们也有所不同：列表是不可变的，值一旦被定义了就不能改变，其次列表 具有递归的结构（也就是链接表结构）而数组不是。</code></p>\n<ul>\n<li>列表声明：列表的元素类型 T 可以写成 List[T]</li>\n<li>链接表式声明：构造列表的两个基本单位是 Nil 和 ::<ul>\n<li>::表示是链接</li>\n<li>Nil 表示为一个空列表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"创建List\"><a href=\"#创建List\" class=\"headerlink\" title=\"创建List\"></a>创建List</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建List两种方式:</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.指定长度创建：new Array[Any](3)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.直接Array初始化赋值创建</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> list: <span class=\"type\">List</span>[<span class=\"type\">Int</span>] = <span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">  <span class=\"keyword\">val</span> list1: <span class=\"type\">List</span>[<span class=\"type\">String</span>] =<span class=\"string\">\"Google\"</span>::(<span class=\"string\">\"Baidu\"</span>::(<span class=\"string\">\"Sina\"</span>::<span class=\"type\">Nil</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<p>不要忘记 Nil 是 长度为0的List</p>\n<h4 id=\"List的遍历\"><a href=\"#List的遍历\" class=\"headerlink\" title=\"List的遍历\"></a>List的遍历</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">val</span> list: <span class=\"type\">List</span>[<span class=\"type\">Int</span>] =<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i&lt;-list)   <span class=\"comment\">//1.</span></span><br><span class=\"line\">      println(i)</span><br><span class=\"line\">println(<span class=\"string\">\"#####\"</span>)</span><br><span class=\"line\">    list.foreach(i=&gt;{  <span class=\"comment\">//2. </span></span><br><span class=\"line\">      println(i)</span><br><span class=\"line\">    })</span><br><span class=\"line\">println(<span class=\"string\">\"#####\"</span>)</span><br><span class=\"line\">    list.foreach(println)  <span class=\"comment\">//3.</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"List-方法举例\"><a href=\"#List-方法举例\" class=\"headerlink\" title=\"List 方法举例\"></a>List 方法举例</h4><p>List与数组相似，生成、连接List的方法与数组相同</p>\n<p>filter :过滤元素</p>\n<p>count :计算符合条件的元素个数</p>\n<p>map ：对元素操作 传一个逻辑</p>\n<p>flatmap ：压扁扁平,先map再flat</p>\n<p><img src=\"/posts/2d68ebe4/3.png\"></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Array一部分方法:</span></span><br><span class=\"line\"><span class=\"comment\">  1.filter过滤元素：返回列表满足谓词的所有元素</span></span><br><span class=\"line\"><span class=\"comment\">   def filter(p: (A) =&gt; Boolean): List[A]</span></span><br><span class=\"line\"><span class=\"comment\">  2.count计算符合条件的元素个数：</span></span><br><span class=\"line\"><span class=\"comment\">  def count(p: (A) =&gt; Boolean): Int</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//过滤 def filter(p: A =&gt; Boolean)  返回为布尔</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> list: <span class=\"type\">List</span>[<span class=\"type\">Int</span>] =<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> zw: <span class=\"type\">List</span>[<span class=\"type\">Int</span>] = list.filter(x=&gt;{</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"literal\">false</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  计算符合条件的元素个数</span></span><br><span class=\"line\">zw.foreach(println)</span><br><span class=\"line\"><span class=\"keyword\">val</span> xx: <span class=\"type\">Int</span> = list.count(x=&gt;{</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"literal\">false</span></span><br><span class=\"line\">})</span><br><span class=\"line\">println(xx)</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      方法： </span></span><br><span class=\"line\"><span class=\"comment\">      1.map 1 to 1</span></span><br><span class=\"line\"><span class=\"comment\">      2.flatMap     1 to N</span></span><br><span class=\"line\"><span class=\"comment\">    记住:map是将一个东西变成另一个东西！！！ 未改变</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//map</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> list: <span class=\"type\">List</span>[<span class=\"type\">Int</span>] =<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> zw = list.map(x=&gt;{x*<span class=\"number\">2</span>})</span><br><span class=\"line\">    zw.foreach(println)</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> arr = <span class=\"type\">List</span>(<span class=\"string\">\"Hello World\"</span>,<span class=\"string\">\"Hello BeiJing\"</span>,<span class=\"string\">\"Hello GanZhou\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = arr.map(x=&gt;{x.split(<span class=\"string\">\" \"</span>)})</span><br><span class=\"line\">    result.foreach(x=&gt;{x.foreach(println)})</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将map结果，flat压平，最终形成1进多出</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> xin: <span class=\"type\">List</span>[<span class=\"type\">String</span>] =arr.flatMap(x=&gt;x.split(<span class=\"string\">\" \"</span>))   </span><br><span class=\"line\">    xin.foreach(println)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"可变长度List\"><a href=\"#可变长度List\" class=\"headerlink\" title=\"可变长度List\"></a>可变长度List</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">ListBuffer</span></span><br><span class=\"line\"> <span class=\"keyword\">val</span> listBuffer = <span class=\"type\">ListBuffer</span>[<span class=\"type\">Int</span>](<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">    listBuffer.append(<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>) <span class=\"comment\">//追加元素</span></span><br><span class=\"line\">    listBuffer.+=(<span class=\"number\">10</span>) <span class=\"comment\">//在后面追加元素</span></span><br><span class=\"line\">    listBuffer.+=:(<span class=\"number\">100</span>) <span class=\"comment\">//在开头追加元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">\"集合元素:\"</span>)</span><br><span class=\"line\">    listBuffer.foreach(x=&gt;{</span><br><span class=\"line\">      print(x+<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">    })</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    listBuffer.remove(<span class=\"number\">3</span>) <span class=\"comment\">//移除集合第3个元素 即移除 3</span></span><br><span class=\"line\">    println(<span class=\"string\">\"移除集合第3个元素:\"</span>)</span><br><span class=\"line\">    listBuffer.foreach(x=&gt;{</span><br><span class=\"line\">      print(x+<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">    })</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">\"从集合第三个元素开始，移除3个元素:\"</span>)</span><br><span class=\"line\">    listBuffer.remove(<span class=\"number\">3</span>,<span class=\"number\">2</span>) <span class=\"comment\">//移除 4 5</span></span><br><span class=\"line\">    listBuffer.foreach(x=&gt;{</span><br><span class=\"line\">      print(x+<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">    })</span><br><span class=\"line\">    println()</span><br><span class=\"line\"></span><br><span class=\"line\">    println(<span class=\"string\">\"从集合第三个元素开始，插入3个元素:\"</span>)</span><br><span class=\"line\">    listBuffer.insert(<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">//移除 4 5</span></span><br><span class=\"line\">    listBuffer.foreach(x=&gt;{</span><br><span class=\"line\">      print(x+<span class=\"string\">\"\\t\"</span>)</span><br><span class=\"line\">    })</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"合并List\"><a href=\"#合并List\" class=\"headerlink\" title=\"合并List\"></a>合并List</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zw=<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> xin=<span class=\"type\">List</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> result =<span class=\"type\">List</span>.concat(zw,xin)</span><br><span class=\"line\">result.foreach(println)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Set集合\"><a href=\"#Set集合\" class=\"headerlink\" title=\"Set集合\"></a>Set集合</h3><p>也分为<strong>可变长</strong>和<strong>不可变长集合</strong>，特点:无序，不重复。元素虽然无放入顺序， 但是元素在set中的位置是由该元素的HashCode决定的， 其位置其实是固定的。</p>\n<p><code>可变Set和不可变Set都有添加或删除元素的操作，但是有一个非常大的差别。对不可变Set进行操作，会产生一个新的set，原来的set并没有改变，这与List一样。 而对可变Set进行操作，改变的是该Set本身，与ListBuffer类似。</code></p>\n<h4 id=\"创建Set\"><a href=\"#创建Set\" class=\"headerlink\" title=\"创建Set\"></a>创建Set</h4><p>注意： <code>set集合,是一个无序且不重复的元素集合!!!</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> set1 = <span class=\"type\">Set</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> set2 = <span class=\"type\">Set</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>) </span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"遍历Set\"><a href=\"#遍历Set\" class=\"headerlink\" title=\"遍历Set\"></a>遍历Set</h4><p>同样两种方式 for ， foreach</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//遍历</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> set1=<span class=\"type\">Set</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> set2=<span class=\"type\">Set</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">//set集合的创建以及遍历</span></span><br><span class=\"line\">set1.foreach(println)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i&lt;-set1)</span><br><span class=\"line\">      println(i)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Set方法举例\"><a href=\"#Set方法举例\" class=\"headerlink\" title=\"Set方法举例\"></a>Set方法举例</h4><ol>\n<li><p>交集： intersect , &amp;</p>\n</li>\n<li><p>差集： diff , &amp;~</p>\n</li>\n<li><p>子集： subsetOf</p>\n</li>\n<li><p>最大： max</p>\n</li>\n<li><p>最小： min</p>\n</li>\n<li><p>转成数组： toList</p>\n</li>\n<li><p>转成字符串： mkString</p>\n</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法举例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> set1=<span class=\"type\">Set</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> set2=<span class=\"type\">Set</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">//交集:共有部分拿出来 返回新的set集合</span></span><br><span class=\"line\"><span class=\"comment\">//val set5=set1.&amp;(set2).foreach(println)    可使用 &amp;符号代替</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> set5=set1.intersect(set2).foreach(println)  <span class=\"comment\">//  result=3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//差集:共有的内容 去除 返回新的set集合</span></span><br><span class=\"line\"><span class=\"comment\">// val set4=set1.&amp;~(set2).foreach(println)   可使用 &amp;~符号代替</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> set4=set1.diff(set2).foreach(println)   <span class=\"comment\">//共有3 所以去除了 result=1 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子集:测试一个集合是否是另一个集合的子集  是否包含在里面</span></span><br><span class=\"line\">println(set1.subsetOf(set2))  <span class=\"comment\">//  set1是否是set2的子集 false</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//最大值</span></span><br><span class=\"line\">println(set1.max)</span><br><span class=\"line\"><span class=\"comment\">//最小值</span></span><br><span class=\"line\">println(set1.min)  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//转成数组，list</span></span><br><span class=\"line\">set1.toArray.foreach{println}</span><br><span class=\"line\">println(<span class=\"string\">\"****\"</span>)</span><br><span class=\"line\">set1.toList.foreach{println}</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//mkString</span></span><br><span class=\"line\">println(set1.mkString)</span><br><span class=\"line\">println(set1.mkString(<span class=\"string\">\"\\t\"</span>)) <span class=\"comment\">//传参数 不传：去掉括号\\t分割  set转换为String</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"可变长度Set\"><a href=\"#可变长度Set\" class=\"headerlink\" title=\"可变长度Set\"></a>可变长度Set</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">Set</span> <span class=\"comment\">//可变的  需要导包！！！</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> set=<span class=\"type\">Set</span>[<span class=\"type\">Int</span>](<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)   </span><br><span class=\"line\">    set.add(<span class=\"number\">1</span>)    <span class=\"comment\">//add只能加一个元素</span></span><br><span class=\"line\">    set.+=(<span class=\"number\">6</span>,<span class=\"number\">7</span>)   <span class=\"comment\">//+=可以加很多元素</span></span><br><span class=\"line\">    set.foreach(println)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"合并Set\"><a href=\"#合并Set\" class=\"headerlink\" title=\"合并Set\"></a>合并Set</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zw=<span class=\"type\">Set</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> xin=<span class=\"type\">Set</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> result: <span class=\"type\">Set</span>[<span class=\"type\">Int</span>] =zw.++(xin)</span><br><span class=\"line\">   println(result)</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Map映射\"><a href=\"#Map映射\" class=\"headerlink\" title=\"Map映射\"></a>Map映射</h3><ul>\n<li>Map(映射)是一种可迭代的键值对（key/value）结构。所有的值都可以通过键来获取。</li>\n<li>Map 中的键都是唯一的，Map 也叫哈希表（Hash tables）。</li>\n<li>Map 有两种类型，可变与不可变，区别在于可变对象可以修改它，而不可变对象不可以。</li>\n<li>默认情况下 Scala 使用不可变 Map。如果你需要使用可变集合，你需要显式的引入 import scala.collection.mutable.Map 类。在 Scala 中 你可以同时使用可变与不可变 Map，不可变的直接使用 Map，可变的使用 mutable.Map。</li>\n</ul>\n<h4 id=\"创建Map\"><a href=\"#创建Map\" class=\"headerlink\" title=\"创建Map\"></a>创建Map</h4><ul>\n<li><p>Map(“name”-&gt;”kli”) 键 -&gt; 值的对应关系创建</p>\n</li>\n<li><p>Map((“money”,200)) 元组的形式（key，value）</p>\n<p> 创建 map 时，相同的 key 被后面的相同的 key 顶替掉，只保留一个。</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map: <span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">Any</span>] =<span class=\"type\">Map</span>(<span class=\"string\">\"name\"</span>-&gt;<span class=\"string\">\"kli\"</span>,(<span class=\"string\">\"money\"</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\"><span class=\"comment\">//  两种创建方式</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Map基本操作\"><a href=\"#Map基本操作\" class=\"headerlink\" title=\"Map基本操作\"></a>Map基本操作</h4><ul>\n<li>keys：返回 Map 所有的键(key)</li>\n<li>values：返回 Map 所有的值(value)</li>\n<li>isEmpty：在 Map 为空时返回true</li>\n<li>+(key-&gt;value)：添加元素</li>\n<li>++ 运算符或 Map.++() ：来连接两个 Map，Map 合并时会移除重复的 key</li>\n</ul>\n<h4 id=\"获取Map的值\"><a href=\"#获取Map的值\" class=\"headerlink\" title=\"获取Map的值\"></a>获取Map的值</h4><ul>\n<li><strong>map.get(“name”).get</strong></li>\n<li><strong>map.get(<em>“name”</em>).getOrElse(“no value”)</strong> 此种方式如果 map 中没有对应项则赋值为getOrElse 里面的值。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">val</span> map: <span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">Any</span>] =<span class=\"type\">Map</span>(<span class=\"string\">\"name\"</span>-&gt;<span class=\"string\">\"kli\"</span>,(<span class=\"string\">\"money\"</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\">println(map.get(<span class=\"string\">\"name\"</span>).get)</span><br><span class=\"line\">   println(map.get(<span class=\"string\">\"name\"</span>).getOrElse(<span class=\"string\">\"none\"</span>))</span><br><span class=\"line\">   <span class=\"comment\">//如果不确定key存不存在，则使用getOrElse更为稳当</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"遍历key-amp-value\"><a href=\"#遍历key-amp-value\" class=\"headerlink\" title=\"遍历key&amp;value\"></a>遍历key&amp;value</h4><p><code>x._1为：key   x._2为：value</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//map遍历</span></span><br><span class=\"line\">map.foreach(x=&gt;{   <span class=\"comment\">// 1.</span></span><br><span class=\"line\">  \tprintln(map.get(x._1).get)  <span class=\"comment\">//使用key.get</span></span><br><span class=\"line\">    println(x._2)   <span class=\"comment\">//直接获取value</span></span><br><span class=\"line\">  <span class=\"comment\">//println(map.getOrElse(x._1,\"none\"))</span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据key来遍历Map </span></span><br><span class=\"line\"><span class=\"keyword\">val</span> keys: <span class=\"type\">Iterable</span>[<span class=\"type\">String</span>] = map.keys</span><br><span class=\"line\">\tkeys.foreach(x=&gt; {\t<span class=\"comment\">//这里的 x 为key 通过key找到值</span></span><br><span class=\"line\">  \t  println(map.get(x).get)</span><br><span class=\"line\">  <span class=\"comment\">//第一个get返回的为:Option Some(kli) 第二个get返回的为:key对应的值 </span></span><br><span class=\"line\">})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据value遍历Map 获取value</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> values: <span class=\"type\">Iterable</span>[<span class=\"type\">Any</span>] = map.values</span><br><span class=\"line\">    values.foreach(values=&gt;{</span><br><span class=\"line\">      println(values)</span><br><span class=\"line\">    })</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"合并Map\"><a href=\"#合并Map\" class=\"headerlink\" title=\"合并Map\"></a>合并Map</h4><p>注意：map合并：相同的key值对应的value值会发生覆盖</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> map1=<span class=\"type\">Map</span>(<span class=\"string\">\"name\"</span>-&gt;<span class=\"string\">\"kli\"</span>,<span class=\"string\">\"age\"</span>-&gt;<span class=\"number\">18</span>,(<span class=\"string\">\"monney\"</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\"><span class=\"keyword\">val</span> map2=<span class=\"type\">Map</span>(<span class=\"string\">\"name\"</span>-&gt;<span class=\"string\">\"xin\"</span>,<span class=\"string\">\"age\"</span>-&gt;<span class=\"number\">19</span>,(<span class=\"string\">\"monney\"</span>,<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"keyword\">val</span> map3=map1.++(map2)  <span class=\"comment\">//map2 合并 map1 相同值发生覆盖</span></span><br><span class=\"line\"><span class=\"comment\">//val map3=map1.++:(map2)  加了 ： 相当于 map2.++(map1) 相反</span></span><br><span class=\"line\">map3.foreach(x=&gt;{</span><br><span class=\"line\">  println(x._1+<span class=\"string\">\":\"</span>+x._2)</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Map方法\"><a href=\"#Map方法\" class=\"headerlink\" title=\"Map方法\"></a>Map方法</h4><ul>\n<li><p>filter :过滤，留下符合条件的记录</p>\n</li>\n<li><p>count :统计符合条件的记录数</p>\n</li>\n<li><p>contains ： map 中是否包含某个 key</p>\n</li>\n<li><p>exist ：符合条件的记录存在与否</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">val</span> map: <span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">Int</span>] =<span class=\"type\">Map</span>(<span class=\"string\">\"age1\"</span>-&gt;<span class=\"number\">10</span>,(<span class=\"string\">\"age2\"</span>,<span class=\"number\">21</span>),(<span class=\"string\">\"age3\"</span>,<span class=\"number\">30</span>))</span><br><span class=\"line\"><span class=\"comment\">//过滤</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> map1 = map.filter(x =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x._2&gt;<span class=\"number\">20</span>)</span><br><span class=\"line\">      <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"literal\">false</span></span><br><span class=\"line\">    })</span><br><span class=\"line\">    map1.foreach(x=&gt;println(x))</span><br><span class=\"line\"><span class=\"comment\">//统计</span></span><br><span class=\"line\"> <span class=\"keyword\">val</span> result = map.count(x =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x._2&gt;<span class=\"number\">20</span>)</span><br><span class=\"line\">      <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"literal\">false</span></span><br><span class=\"line\">    })</span><br><span class=\"line\">    println(result)</span><br><span class=\"line\"><span class=\"comment\">// map 中是否包含某个 key</span></span><br><span class=\"line\">println(map.contains(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(map.contains(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">      println(map.get(<span class=\"string\">\"name\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      println(<span class=\"string\">\"none\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    println(map.getOrElse(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"no value\"</span>))</span><br><span class=\"line\"><span class=\"comment\">//exist</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> bool= map.exists(x =&gt; {</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(x._2&gt;<span class=\"number\">20</span>) {   <span class=\"comment\">//判断符合逻辑就会停止遍历数据</span></span><br><span class=\"line\">        println(x._1)</span><br><span class=\"line\">        <span class=\"literal\">true</span></span><br><span class=\"line\">      } <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"literal\">false</span></span><br><span class=\"line\">    })</span><br><span class=\"line\">  println(bool)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"可变长度Map\"><a href=\"#可变长度Map\" class=\"headerlink\" title=\"可变长度Map\"></a>可变长度Map</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scala.collection.mutable.<span class=\"type\">Map</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> map: <span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">Any</span>] =<span class=\"type\">Map</span>(<span class=\"string\">\"age1\"</span>-&gt;<span class=\"string\">\"1\"</span>,(<span class=\"string\">\"age2\"</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">    <span class=\"comment\">//如果你想要添加一个原来的map中没有的value类型，要么就手动显示[String，Any]</span></span><br><span class=\"line\">    map+=(<span class=\"string\">\"age3\"</span>-&gt;<span class=\"number\">3</span>)     <span class=\"comment\">//单个添加</span></span><br><span class=\"line\">    map+=(<span class=\"string\">\"age4\"</span>-&gt;<span class=\"number\">4</span>,<span class=\"string\">\"age5\"</span>-&gt;<span class=\"number\">5</span>)<span class=\"comment\">//多个添加</span></span><br><span class=\"line\">    map.foreach(println)</span><br><span class=\"line\">    println(<span class=\"string\">\"============\"</span>)</span><br><span class=\"line\">    map-=(<span class=\"string\">\"age4\"</span>)<span class=\"comment\">//删除直接针对key值。map.remove(\"age\")</span></span><br><span class=\"line\">    map.remove(<span class=\"string\">\"age5\"</span>)</span><br><span class=\"line\">    map.foreach(println)</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"元组-Tuple\"><a href=\"#元组-Tuple\" class=\"headerlink\" title=\"元组 Tuple\"></a>元组 Tuple</h3><ul>\n<li><p>元组与列表一样，元组也是不可变的，但与列表不同的是元组可以包含不同类型的元素。元组的值是通过将单个的值包含在圆括号中构成的。</p>\n</li>\n<li><p>是K/V对偶的集合， 对偶是元组最简单的形式， 元组可以封装多个不同类型的值， 注意元组的角标是从1 开始的 。</p>\n</li>\n</ul>\n<h4 id=\"创建元组\"><a href=\"#创建元组\" class=\"headerlink\" title=\"创建元组\"></a>创建元组</h4><ul>\n<li><p>val tuple = new Tuple(1)</p>\n</li>\n<li><p>val tuple2 = Tuple2(1,2) ，也可以直接写成 val tuple3 =(1,2,3)</p>\n</li>\n<li><p>取值用 ._X 可以获取元组中的值</p>\n</li>\n</ul>\n<p>注意：tuple最多支持<strong>22</strong>个参数。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建，最多支持22个</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> tuple = <span class=\"keyword\">new</span> <span class=\"type\">Tuple1</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tuple2 = <span class=\"type\">Tuple2</span>(<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tuple3 = <span class=\"type\">Tuple3</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tuple4 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tuple18 = <span class=\"type\">Tuple18</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tuple22 = <span class=\"keyword\">new</span> <span class=\"type\">Tuple22</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>,<span class=\"number\">21</span>,<span class=\"number\">22</span>)</span><br><span class=\"line\">    <span class=\"comment\">//使用</span></span><br><span class=\"line\">    println(tuple2._1 + <span class=\"string\">\"\\t\"</span>+tuple2._2)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> t = <span class=\"type\">Tuple2</span>((<span class=\"number\">1</span>,<span class=\"number\">2</span>),(<span class=\"string\">\"zhangsan\"</span>,<span class=\"string\">\"lisi\"</span>))</span><br><span class=\"line\">    println(t._1._2)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"元组简单的方法\"><a href=\"#元组简单的方法\" class=\"headerlink\" title=\"元组简单的方法\"></a>元组简单的方法</h4><pre><code>例如 swap ， toString 方法。注意 swap 的元素翻转只针对二元组。\n</code></pre>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//翻转，只针对二元组</span></span><br><span class=\"line\">println(tuple2.swap)</span><br><span class=\"line\"><span class=\"comment\">//toString</span></span><br><span class=\"line\">println(tuple3.toString())</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"遍历元组\"><a href=\"#遍历元组\" class=\"headerlink\" title=\"遍历元组\"></a>遍历元组</h4><p>虽然元组不是集合，但是在遍历使用时可以当作一个集合来用。</p>\n<p>通过 tuple.productIterator 得到迭代器，进而实现遍历。迭代器只能使用一次，下次还想遍历就需要构建一个新的 iterator 。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> tupleIterator = tuple22.productIterator</span><br><span class=\"line\"><span class=\"comment\">//    while(tupleIterator.hasNext){</span></span><br><span class=\"line\"><span class=\"comment\">//      println(tupleIterator.next())</span></span><br><span class=\"line\"><span class=\"comment\">//    }</span></span><br><span class=\"line\">    tupleIterator.foreach(value =&gt;{</span><br><span class=\"line\">      println(<span class=\"string\">\"value: \"</span>+ value)})</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><ul>\n<li>Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法。</li>\n<li>迭代器 it 的两个基本操作是 next 和 hasNext。调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。调用 it.hasNext() 用于检测集合中是否还有元素。</li>\n<li>让迭代器 it 逐个返回所有元素最简单的方法是使用 while 循环。</li>\n</ul>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> set=<span class=\"type\">Set</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>)</span><br><span class=\"line\">   <span class=\"keyword\">var</span> it =set.toIterator;</span><br><span class=\"line\">   <span class=\"keyword\">while</span>(it.hasNext){</span><br><span class=\"line\">     println(it.next())</span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"comment\">//result=30 20 10</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"trait\"><a href=\"#trait\" class=\"headerlink\" title=\"trait\"></a>trait</h3><p><code>类似java中interfaces和abstract结合</code></p>\n<p>注意：</p>\n<ul>\n<li><p>继承的多个trait中如果有同名的方法和属性，必须要在类中使用 override 重新定义。</p>\n</li>\n<li><p>trait 中不可以传参数</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 在一个二维坐标系内，比较两个点是否是同一位置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">trait</span> <span class=\"title\">Equal</span> </span>{</span><br><span class=\"line\">  <span class=\"comment\">//比较相同</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEqual</span></span>(x: <span class=\"type\">Any</span>): <span class=\"type\">Boolean</span>  <span class=\"comment\">//抽象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//比较不同</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isNotEqual</span></span>(x: <span class=\"type\">Any</span>) = {</span><br><span class=\"line\">    <span class=\"comment\">//感叹号 不等  ！取反</span></span><br><span class=\"line\">    !isEqual(x)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span>(<span class=\"params\">xx: <span class=\"type\">Int</span>, yy: <span class=\"type\">Int</span></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Equal</span> </span>{</span><br><span class=\"line\">  <span class=\"keyword\">val</span> x = xx</span><br><span class=\"line\">  <span class=\"keyword\">val</span> y = yy</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isEqual</span></span>(p: <span class=\"type\">Any</span>): <span class=\"type\">Boolean</span> = {   <span class=\"comment\">//重写抽象 override</span></span><br><span class=\"line\">    <span class=\"comment\">//判断isInstanceOf,如果是该类的对象的话</span></span><br><span class=\"line\">    <span class=\"comment\">// 就是判断是不是一个类的对象然后再执行，if Point类的话就执行下一条</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.isInstanceOf[<span class=\"type\">Point</span>]) {</span><br><span class=\"line\">      <span class=\"keyword\">val</span> point = p.asInstanceOf[<span class=\"type\">Point</span>]</span><br><span class=\"line\">      <span class=\"comment\">//如果传进来的值，相等返回true</span></span><br><span class=\"line\">      xx == point.x &amp;&amp; yy == point.y</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">      <span class=\"literal\">false</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Test_trait</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p1=<span class=\"keyword\">new</span> <span class=\"type\">Point</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> p2=<span class=\"keyword\">new</span> <span class=\"type\">Point</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">//判断</span></span><br><span class=\"line\">    println(p1.isEqual(p2))     <span class=\"comment\">//是否相等</span></span><br><span class=\"line\">    println(p1.isNotEqual(p2))  <span class=\"comment\">//是否不相等</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"模式匹配-match\"><a href=\"#模式匹配-match\" class=\"headerlink\" title=\"模式匹配 match\"></a>模式匹配 match</h3><p>Scala 提供了强大的模式匹配机制，应用也非常广泛。</p>\n<p>一个模式匹配包含了一系列备选项，每个都开始于关键字 case 。</p>\n<p>每个备选项都包含了一个模式及一到多个表达式。箭头符号 =&gt; 隔开了模式和表达式。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Test_Match</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">  <span class=\"keyword\">val</span> tuple4:(<span class=\"type\">Int</span>,<span class=\"type\">String</span>,<span class=\"type\">Float</span>,<span class=\"type\">Char</span>)=(<span class=\"number\">1</span>,<span class=\"string\">\"2\"</span>,<span class=\"number\">3.0</span>f,'d')</span><br><span class=\"line\">  <span class=\"keyword\">val</span> iterator=tuple4.productIterator</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(iterator.hasNext){</span><br><span class=\"line\">      test_Match(iterator.next())</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 注意点：</span></span><br><span class=\"line\"><span class=\"comment\">   * 1.模式匹配不仅可以匹配值，还可以匹配类型</span></span><br><span class=\"line\"><span class=\"comment\">   * 2.模式匹配中，如果匹配到对应的类型或值，就不再继续往下匹配</span></span><br><span class=\"line\"><span class=\"comment\">   * 3.模式匹配中，都匹配不上时，会匹配到 case _ ，相当于default</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_Match</span></span>(x:<span class=\"type\">Any</span>): <span class=\"type\">Unit</span> ={</span><br><span class=\"line\">    x <span class=\"keyword\">match</span> {</span><br><span class=\"line\">      <span class=\"comment\">//匹配类型</span></span><br><span class=\"line\">      <span class=\"comment\">//case _:String=&gt;println(\"mach String\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//匹配值</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>=&gt;println(<span class=\"string\">\"match int 1\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">\"2\"</span>=&gt;println(<span class=\"string\">\"match String 2\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3.0</span>f=&gt;println(<span class=\"string\">\"match String 3.0\"</span>)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> 'd'=&gt;println(<span class=\"string\">\"match char d\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//没有匹配到</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> _=&gt;println(<span class=\"string\">\"no matching\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h4><ul>\n<li><p>模式匹配不仅可以匹配值还可以匹配类型</p>\n</li>\n<li><p>从上到下顺序匹配，如果匹配到则不再往下匹配</p>\n</li>\n<li><p>都匹配不上时，会匹配到 case _ ,相当于 default</p>\n</li>\n<li><p>match 的最外面的 { } 可以去掉看成一个语句</p>\n</li>\n</ul>\n<h3 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h3><p>如果一个方法中没有 match 只有 case ，这个函数可以定义成 PartialFunction偏函数 。偏函数定义时，不能使用括号传参，默认定义 PartialFunction 中传入一个值，匹配上了对应的 case ,返回一个值，只能匹配同种类型。</p>\n<p>一个 case 语句就可以理解为是一段匿名函数。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个函数中只有case 没有match ，可以定义成PartailFunction 偏函数</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Lesson_PartialFunction</span> </span>{</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MyTest</span> </span>: <span class=\"type\">PartialFunction</span>[<span class=\"type\">String</span>,<span class=\"type\">String</span>] = {</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"scala\"</span> =&gt;{<span class=\"string\">\"scala\"</span>}</span><br><span class=\"line\">       <span class=\"keyword\">case</span> <span class=\"string\">\"hello\"</span> =&gt;{<span class=\"string\">\"hello\"</span>}</span><br><span class=\"line\">       <span class=\"keyword\">case</span> _ =&gt; {<span class=\"string\">\"no match ...\"</span>}</span><br><span class=\"line\">  }</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">         println(<span class=\"type\">MyTest</span>(<span class=\"string\">\"scala\"</span>))</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 第二个例子</span></span><br><span class=\"line\"><span class=\"comment\">  * map和collect的区别。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">   <span class=\"keyword\">val</span> list1 = <span class=\"type\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"string\">\"seven\"</span>) map {</span><br><span class=\"line\">       <span class=\"type\">MyTest</span></span><br><span class=\"line\">  }<span class=\"comment\">//List(1, 3, 5, \"seven\") map { case i: Int =&gt; i + 1 }</span></span><br><span class=\"line\">   list1.foreach(println)</span><br><span class=\"line\">   <span class=\"keyword\">val</span> list = <span class=\"type\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"string\">\"seven\"</span>) collect {</span><br><span class=\"line\">       <span class=\"type\">MyTest</span></span><br><span class=\"line\">  }<span class=\"comment\">//List(1, 3, 5, \"seven\") collect { case i: Int =&gt; i + 1 }</span></span><br><span class=\"line\">   list.foreach(println) }</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MyTest</span></span>: <span class=\"type\">PartialFunction</span>[<span class=\"type\">Any</span>, <span class=\"type\">Int</span>] = {</span><br><span class=\"line\">   <span class=\"keyword\">case</span> i: <span class=\"type\">Int</span> =&gt; i + <span class=\"number\">1</span> }</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">println(<span class=\"type\">MyTest</span>(<span class=\"string\">\"scala\"</span>))</span><br><span class=\"line\">     <span class=\"comment\">//val list=List(1,3,5,\"seven\").map{case i:Int =&gt;i+i}</span></span><br><span class=\"line\">     <span class=\"comment\">// 错误：偏函数类型都是要一致的  MatchError  collect可以</span></span><br><span class=\"line\">     <span class=\"keyword\">val</span> list=<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"string\">\"seven\"</span>).collect{<span class=\"keyword\">case</span> i:<span class=\"type\">Int</span> =&gt;i+<span class=\"number\">1</span>}</span><br><span class=\"line\">     list.foreach(println)</span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">MyTest</span></span>:<span class=\"type\">PartialFunction</span>[<span class=\"type\">String</span>,<span class=\"type\">String</span>] ={</span><br><span class=\"line\">     <span class=\"keyword\">case</span> <span class=\"string\">\"Hello\"</span>=&gt;<span class=\"string\">\"Hello\"</span></span><br><span class=\"line\">     <span class=\"keyword\">case</span> <span class=\"string\">\"scala\"</span>=&gt;<span class=\"string\">\"scala\"</span></span><br><span class=\"line\">     <span class=\"keyword\">case</span> _=&gt;<span class=\"string\">\"no matching\"</span></span><br><span class=\"line\">   }</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"样例类\"><a href=\"#样例类\" class=\"headerlink\" title=\"样例类\"></a>样例类</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a><strong>概念</strong></h4><p>​    使用了 case 关键字的类定义就是样例类 case classes ，样例类是种特殊的类。实现了类构造参数的 getter 方法（构造参数默认被声明为 val ），当构造参数是声明为 var 类型的，它将帮你实现setter 和 getter 方法。</p>\n<ul>\n<li><p>样例类默认帮你实现了 toString , equals ， copy 和 hashCode 等方法。</p>\n</li>\n<li><p>样例类可以 new , 也可以不用 new</p>\n</li>\n</ul>\n<h4 id=\"具体写法\"><a href=\"#具体写法\" class=\"headerlink\" title=\"具体写法\"></a>具体写法</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/6/26</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: com.bigdata.chapter01</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//样例类默认帮你实现了 toString , equals ， copy 和 hashCode 等方法。</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span>(<span class=\"params\">name:<span class=\"type\">String</span>,age:<span class=\"type\">Int</span></span>)  <span class=\"comment\">//val</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Test_CaseClass</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">    <span class=\"keyword\">val</span> boy =<span class=\"keyword\">new</span> <span class=\"type\">Boy</span>(<span class=\"string\">\"zw\"</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> boy2=<span class=\"type\">Boy</span>(<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    println(boy)  <span class=\"comment\">//重写的toString方法</span></span><br><span class=\"line\">    println(boy.equals(boy2))  <span class=\"comment\">//重写equals</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> list: <span class=\"type\">List</span>[<span class=\"type\">Boy</span>] =<span class=\"type\">List</span>(boy,boy2)  <span class=\"comment\">//把对象存进List</span></span><br><span class=\"line\">    list.foreach(x=&gt;{</span><br><span class=\"line\">      <span class=\"comment\">//结合模式匹配</span></span><br><span class=\"line\">        x <span class=\"keyword\">match</span> {</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Boy</span>(<span class=\"string\">\"zw\"</span>,<span class=\"number\">18</span>)=&gt;println(<span class=\"string\">\"im zw\"</span>)      <span class=\"comment\">//具体的值</span></span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"type\">Boy</span>(<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">18</span>)=&gt;println(<span class=\"string\">\"im zhangsan\"</span>)</span><br><span class=\"line\">          <span class=\"comment\">//这里想演示的是如果按之前 Int String flat char 类型匹配的话，要找到对应类型的equals方法</span></span><br><span class=\"line\">          <span class=\"comment\">//对于Boy,是具体的值，它属于Boy样例类，已经帮我们写好了，重写了equals方法</span></span><br><span class=\"line\">          <span class=\"comment\">//equals原理就是比较属性值，属性值一一对应就是一个相同的Boy</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">case</span> x:<span class=\"type\">Boy</span>=&gt;println(<span class=\"string\">\"boy\"</span>)                <span class=\"comment\">//具体类型</span></span><br><span class=\"line\">          <span class=\"keyword\">case</span> _=&gt;println(<span class=\"string\">\"no mach\"</span>)</span><br><span class=\"line\">        }</span><br><span class=\"line\">    })</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h1><ul>\n<li><p><a href=\"https://www.yuque.com/asange-3skzu/oxof64\">A三哥</a></p>\n</li>\n<li><p><a href=\"https://www.it610.com/article/1288174765441331200.htm\"><strong>Devin01213</strong></a></p>\n</li>\n<li><p>b站：湖南码歌</p>\n</li>\n</ul>\n","categories":["大数据"],"tags":["大数据"]},{"title":"SparkCore","url":"/posts/6eb4a027/","content":"<h1 id=\"第一章-Spark-概述\"><a href=\"#第一章-Spark-概述\" class=\"headerlink\" title=\"第一章 Spark 概述\"></a>第一章 Spark 概述</h1><p>Spark 是一种基于内存的快速、通用、可扩展的大数据分析计算引擎。</p>\n<h3 id=\"Spark-or-Hadoop\"><a href=\"#Spark-or-Hadoop\" class=\"headerlink\" title=\"Spark or Hadoop\"></a>Spark or Hadoop</h3><p>Hadoop 的 MR 框架和 Spark 框架都是数据处理框架，那么我们在使用时如何选择呢？</p>\n<ul>\n<li><p><strong>Hadoop MapReduce 由于其设计初衷并不是为了满足循环迭代式数据流处理，因此在多并行运行的数据可复 用场景（如：机器学习、图挖掘算法、交互式数据挖掘算法）中存在诸多计算效率等问题</strong>。所以 Spark 应运而生， Spark 就是在传统的 MapReduce 计算框架的基础上，利用其计算过程的优化，从而大大加快了数据分析、挖掘的 运行和读写速度，并将计算单元缩小到更适合并行计算和重复使用的 RDD 计算模型。</p>\n</li>\n<li><p><strong>机器学习中 ALS、凸优化梯度下降等。这些都需要基于数据集或者数据集的衍生数据反复查询反复操作。MR 这种模式不太合适，即使多 MR 串行处理，性能和时间也是一个问题。数据的共享依赖于磁盘。另外一种是交互式 数据挖掘，MR 显然不擅长。而Spark 所基于的 scala 语言恰恰擅长函数的处理。</strong></p>\n</li>\n<li><p>Spark 是一个分布式数据快速分析项目。<strong>它的核心技术是弹性分布式数据集</strong>（Resilient Distributed Datasets），提供了比 MapReduce 丰富的模型，可以快速在内存中对数据集进行多次迭代，来支持复杂的数据挖 掘算法和图形计算算法。</p>\n</li>\n<li><p><strong>Spark 和Hadoop 的根本差异是多个作业之间的数据通信问题</strong> <strong>:</strong> <strong><font color=\"red\">Spark 多个作业之间数据通信是基于内存</font>， <font color=\"red\">而 Hadoop 是基于磁盘。</font></strong></p>\n</li>\n<li><p><strong><font color=\"red\">Spark Task 的启动时间快。Spark 采用 fork 线程的方式，而 Hadoop 采用创建新的进程的方式。</font></strong></p>\n</li>\n<li><p><strong><font color=\"red\">Spark 只有在 shuffle 的时候将数据写入磁盘，而 Hadoop 中多个 MR 作业之间的数据交互都要依赖于磁盘交互</font></strong></p>\n</li>\n<li><p><strong><font color=\"red\">Spark 的缓存机制比 HDFS 的缓存机制高效。</font></strong></p>\n</li>\n</ul>\n<h3 id=\"hadoop的一次性计算\"><a href=\"#hadoop的一次性计算\" class=\"headerlink\" title=\"hadoop的一次性计算\"></a>hadoop的一次性计算</h3><p>框架在处理数据的时候，会从存储设备中读取数据，进行逻辑操作，然后将处理的结果重新存储到介质中。</p>\n<p><img src=\"/posts/6eb4a027/1.png\"></p>\n<p><code>上一次的计算结果给下一次使用，他们作业之间的关联靠的是磁盘交互，所以磁盘io,会非常影响性能</code></p>\n<p>经过上面的比较，我们可以看出在绝大多数的数据计算场景中，Spark 确实会比 MapReduce更有优势。<strong>但是 Spark 是基于内存的，所以在实际的生产环境中，由于内存的限制，可能会由于内存资源不够导致 Job 执行失败， 此时，MapReduce 其实是一个更好的选择，所以 Spark并不能完全替代 MR。</strong></p>\n<h1 id=\"第二章-Spark-快速上手\"><a href=\"#第二章-Spark-快速上手\" class=\"headerlink\" title=\"第二章 Spark 快速上手\"></a>第二章 Spark 快速上手</h1><p>在大数据早期的课程中我们已经学习了 MapReduce 框架的原理及基本使用，并了解了其底层数据处理的实现方式。接下来，就让咱们走进 Spark 的世界，了解一下它是如何带领我们完成数据处理的。</p>\n<h3 id=\"创建-Maven-项目\"><a href=\"#创建-Maven-项目\" class=\"headerlink\" title=\"创建 Maven 项目\"></a>创建 Maven 项目</h3><p><strong>创建Project</strong></p>\n<ul>\n<li>File-&gt;new-&gt;Project-&gt;Maven-&gt;名字如：<strong>Bigdata.zw</strong></li>\n<li>项目右键new-&gt;Module-&gt;Maven-&gt;名字如：<strong>spark-core</strong></li>\n</ul>\n<p><strong>安装Scala</strong></p>\n<p>如果电脑未安装scala就点击，<strong>File</strong>下的<strong>Project Setting</strong>s，选择<strong>Global Libraries</strong>，点击左上角的+号，选择<strong>Scala SDK</strong>，点击最左边按钮，<strong>Download</strong>进行选择版本下载，选择版本 <strong>2.12.11</strong></p>\n<p><strong>安装scala插件</strong></p>\n<p>IDEA里选择File下的setting，点击Plugin，在插件里面搜索Scala，可以下载Scala插件，然后按老师选择Scala的SDK，可以用插件直接选择Scala版本下载</p>\n<p><strong>添加框架支持</strong></p>\n<ul>\n<li>在创建的spark-core右键add frameworks support（添加框架支持）-&gt;选择scala</li>\n<li>在新建的sprak-core-&gt;src-&gt;main-&gt;java-&gt;右键-Package-&gt;名字如：<strong>com.zw.bigdata.spark.core</strong></li>\n<li>最后检测环境是否可以使用 右键package-&gt;new-&gt; scalaClass-&gt;Object <strong>创建scala程序运行hello</strong></li>\n</ul>\n<h3 id=\"增加依赖关系\"><a href=\"#增加依赖关系\" class=\"headerlink\" title=\"增加依赖关系\"></a>增加依赖关系</h3><p><strong>修改 Maven 项目中的 POM 文件，增加 Spark 框架的依赖关系。本课件基于 Spark3.0 版本，使用时请注意对应版本。</strong><font color=\"red\">要求hadoop版本也是3.0.0</font></p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.spark<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spark-core_2.12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>复制代码到创建的<strong>spark-core</strong>(添加了scala框架支持的文件夹)的<strong>pom.xml</strong>  <font color=\"red\">project标签里</font>进行下载依赖</p>\n<p>添加依赖后，如果下载速度缓慢可使用教程对应的阿里云镜像进行下载：<a href=\"https://blog.csdn.net/qq_37887131/article/details/89383051\">https://blog.csdn.net/qq_37887131/article/details/89383051</a></p>\n<h3 id=\"WordCount案例\"><a href=\"#WordCount案例\" class=\"headerlink\" title=\"WordCount案例\"></a>WordCount案例</h3><h4 id=\"具体流程\"><a href=\"#具体流程\" class=\"headerlink\" title=\"具体流程\"></a><center><font color=\"red\">具体流程</font></center></h4><p><img src=\"/posts/6eb4a027/3.png\"></p>\n<h4 id=\"WordCount不同方法实现1\"><a href=\"#WordCount不同方法实现1\" class=\"headerlink\" title=\"WordCount不同方法实现1\"></a>WordCount不同方法实现1</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.rdd.<span class=\"type\">RDD</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.{<span class=\"type\">SparkConf</span>, <span class=\"type\">SparkContext</span>}   <span class=\"comment\">//环境</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/7/2</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: test</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Spark01_WorldCount</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Application</span></span><br><span class=\"line\">    <span class=\"comment\">//Spark框架</span></span><br><span class=\"line\">    <span class=\"comment\">// TODO 建立和Spark框架的连接</span></span><br><span class=\"line\">    <span class=\"comment\">//JDBC:Connection</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local\"</span>).setAppName(<span class=\"string\">\"WordCount\"</span>)  <span class=\"comment\">//Spark基础配置对象</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sc = <span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)   <span class=\"comment\">//环境对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//TODO 执行业务操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//1.读取文件，获取一行一行的数据</span></span><br><span class=\"line\">    <span class=\"comment\">// hello world</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> lines: <span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = sc.textFile(<span class=\"string\">\"datas\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2.将一行数据进行拆分，形成一个一个的单词（分词）</span></span><br><span class=\"line\">    <span class=\"comment\">// 扁平化</span></span><br><span class=\"line\">    <span class=\"comment\">// “hello world”=&gt; hello,world,hello,world</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> words: <span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = lines.flatMap(_.split(<span class=\"string\">\" \"</span>)) <span class=\"comment\">// 等价于 s=&gt;s.split(\" \")</span></span><br><span class=\"line\">    <span class=\"comment\">//3.将数据根据单词进行分组，便于统计</span></span><br><span class=\"line\">    <span class=\"comment\">//  (hello,hello,hello)，(world,world)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> wordGroup: <span class=\"type\">RDD</span>[(<span class=\"type\">String</span>, <span class=\"type\">Iterable</span>[<span class=\"type\">String</span>])] = words.groupBy(word =&gt;word)</span><br><span class=\"line\">    <span class=\"comment\">//4.对分组后的数据进行转换</span></span><br><span class=\"line\">    <span class=\"comment\">//  (hello,hello,hello)，(world,world)</span></span><br><span class=\"line\">    <span class=\"comment\">//  (hello,3) ，(world,2)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> wordToCount: <span class=\"type\">RDD</span>[(<span class=\"type\">String</span>, <span class=\"type\">Int</span>)] = wordGroup.map{</span><br><span class=\"line\">      <span class=\"keyword\">case</span> (word,list)=&gt;{</span><br><span class=\"line\">        (word,list.size)  <span class=\"comment\">//单词 数组的长度</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//5.将转换结果采集到控制台打印出来</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> array: <span class=\"type\">Array</span>[(<span class=\"type\">String</span>, <span class=\"type\">Int</span>)] = wordToCount.collect()</span><br><span class=\"line\">    array.foreach(println)</span><br><span class=\"line\">    <span class=\"comment\">//TODO 关闭连接</span></span><br><span class=\"line\">    sc.stop()</span><br><span class=\"line\"></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"WorldCount不同方法实现2\"><a href=\"#WorldCount不同方法实现2\" class=\"headerlink\" title=\"WorldCount不同方法实现2\"></a>WorldCount不同方法实现2</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local\"</span>).setAppName(<span class=\"string\">\"WordCount\"</span>)  <span class=\"comment\">//Spark基础配置对象</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> sc = <span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)   <span class=\"comment\">//环境对象</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> lines: <span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = sc.textFile(<span class=\"string\">\"datas\"</span>)  <span class=\"comment\">//文件</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> words: <span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = lines.flatMap(_.split(<span class=\"string\">\" \"</span>)) <span class=\"comment\">// 等价于 s=&gt;s.split(\" \") 切分</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">val</span> wordToOne: <span class=\"type\">RDD</span>[(<span class=\"type\">String</span>, <span class=\"type\">Int</span>)] =words.map(</span><br><span class=\"line\">        word=&gt;(word,<span class=\"number\">1</span>)   <span class=\"comment\">//表示单词出现了一次 单词对应1</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">      <span class=\"keyword\">val</span> wordGroup: <span class=\"type\">RDD</span>[(<span class=\"type\">String</span>, <span class=\"type\">Iterable</span>[(<span class=\"type\">String</span>, <span class=\"type\">Int</span>)])] = wordToOne.groupBy(</span><br><span class=\"line\">        t =&gt; t._1 <span class=\"comment\">//对 word 进行分组</span></span><br><span class=\"line\">     )</span><br><span class=\"line\">      <span class=\"keyword\">val</span> wordToCount=wordGroup.map{</span><br><span class=\"line\">        <span class=\"keyword\">case</span> (word,list)=&gt;{</span><br><span class=\"line\">            list.reduce(  <span class=\"comment\">//聚合计算</span></span><br><span class=\"line\">            (t1,t2)=&gt;{</span><br><span class=\"line\">              (t1._1,t1._2+t2._2)  <span class=\"comment\">//hello 1+1   </span></span><br><span class=\"line\">            }</span><br><span class=\"line\">          )</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">      <span class=\"keyword\">val</span> array=wordToCount.collect()</span><br><span class=\"line\">      array.foreach(println)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"WorldCount不同方法实现3\"><a href=\"#WorldCount不同方法实现3\" class=\"headerlink\" title=\"WorldCount不同方法实现3\"></a>WorldCount不同方法实现3</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local\"</span>).setAppName(<span class=\"string\">\"WordCount\"</span>)  <span class=\"comment\">//Spark基础配置对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> sc = <span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)   <span class=\"comment\">//环境对象</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> lines: <span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = sc.textFile(<span class=\"string\">\"datas\"</span>)  <span class=\"comment\">//文件</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> words: <span class=\"type\">RDD</span>[<span class=\"type\">String</span>] = lines.flatMap(_.split(<span class=\"string\">\" \"</span>)) <span class=\"comment\">// 等价于 s=&gt;s.split(\" \") 切分</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> wordToOne: <span class=\"type\">RDD</span>[(<span class=\"type\">String</span>, <span class=\"type\">Int</span>)] =words.map(</span><br><span class=\"line\">          word=&gt;(word,<span class=\"number\">1</span>)   <span class=\"comment\">//表示单词出现了一次 单词对应1</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">       <span class=\"comment\">//Spark框架提供了更多的功能，可以将分组和聚合使用一个方法实现</span></span><br><span class=\"line\">       <span class=\"comment\">//reduceByKey:相同的key的数据，可以对value进行reduce聚合</span></span><br><span class=\"line\">       <span class=\"comment\">//wordToOne.reduceByKey((x,y)=&gt;{x+y})</span></span><br><span class=\"line\">       <span class=\"comment\">//wordToOne.reduceByKey((x,y)=&gt;x+y)</span></span><br><span class=\"line\">      <span class=\"comment\">//// 将转换结构后的数据按照相同的单词进行分组聚合</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> wordToCount=wordToOne.reduceByKey(_+_)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> array=wordToCount.collect()</span><br><span class=\"line\">        array.foreach(println)</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<p><a href=\"https://blog.csdn.net/qq_26442553/article/details/108362390\">具体方法</a></p>\n<h4 id=\"方便查看输出结果设置\"><a href=\"#方便查看输出结果设置\" class=\"headerlink\" title=\"方便查看输出结果设置\"></a>方便查看输出结果设置</h4><p>执行过程中，会产生大量的执行日志，如果为了能够更好的查看程序的执行结果，可以在项目的 resources 目录 中创建 log4j.properties 文件，并添加日志配置信息：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">log4j.rootCategory=ERROR, console</span><br><span class=\"line\">log4j.appender.console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.console.target=System.err</span><br><span class=\"line\">log4j.appender.console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n</span><br><span class=\"line\">log4j.logger.org.apache.spark.repl.Main=ERROR</span><br><span class=\"line\"># Settings to quiet third party logs that are too verbose</span><br><span class=\"line\">log4j.logger.org.spark_project.jetty=ERROR</span><br><span class=\"line\">log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle=ERROR</span><br><span class=\"line\">log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=ERROR</span><br><span class=\"line\">log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=ERROR</span><br><span class=\"line\">log4j.logger.org.apache.parquet=ERROR</span><br><span class=\"line\">log4j.logger.parquet=ERROR</span><br><span class=\"line\"># SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in</span><br><span class=\"line\">SparkSQL with Hive support</span><br><span class=\"line\">log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler=FATAL</span><br><span class=\"line\">log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry=ERROR</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><p><strong>1.  <font color=\"red\">Failed to locate the winutils binary in the hadoop binary path</font></strong>     </p>\n<p> <strong><font color=\"red\">java.io.IOException:Could not locate executable null\\bin\\winutils.exe in the Hadoop binaries.</font></strong></p>\n<p><strong>解决：安装hadoop-3.0.0配置环境变量</strong>(zip)</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">PATH:%HADOOP_HOME%\\bin</span><br><span class=\"line\">HADOOP_HOME: E:\\BigData\\hadoop-3.0.0</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>2.</strong>  <strong><font color=\"red\">Exception in thread “main” java.lang.ExceptionInInitializerError异常</font></strong></p>\n<p><strong>解决：SDK版本过高，进入项目，降低java版本，降为15即可</strong></p>\n<p><code>设置完重启IDEA</code></p>\n<h1 id=\"第三章-Spark运行环境\"><a href=\"#第三章-Spark运行环境\" class=\"headerlink\" title=\"第三章 Spark运行环境\"></a>第三章 Spark运行环境</h1><h4 id=\"Local\"><a href=\"#Local\" class=\"headerlink\" title=\"Local\"></a>Local</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sc.textFile(<span class=\"string\">\"../data/word.txt\"</span>).flatMap(_.split(<span class=\"string\">\" \"</span>)).map((_,<span class=\"number\">1</span>)).reduceByKey(_+_).collect</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p>提交应用：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">bin/spark-submit \\</span><br><span class=\"line\">--class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">--master local[2] \\</span><br><span class=\"line\">./examples/jars/spark-examples_2.12-3.0.0.jar \\</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">bin/spark-submit \\</span><br><span class=\"line\">--class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">--master spark://node01:7077 \\</span><br><span class=\"line\">./examples/jars/spark-examples_2.12-3.0.0.jar \\</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">bin/spark-submit \\</span><br><span class=\"line\">--class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">--master yarn \\</span><br><span class=\"line\">--deploy-mode cluster \\</span><br><span class=\"line\">./examples/jars/spark-examples_2.12-3.0.0.jar \\</span><br><span class=\"line\">10</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"第五章-Spark核心编程\"><a href=\"#第五章-Spark核心编程\" class=\"headerlink\" title=\"第五章 Spark核心编程\"></a>第五章 Spark核心编程</h1><h2 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h2><p><img src=\"/posts/6eb4a027/5.png\"></p>\n<h2 id=\"RDD\"><a href=\"#RDD\" class=\"headerlink\" title=\"RDD\"></a>RDD</h2><h3 id=\"什么是RDD\"><a href=\"#什么是RDD\" class=\"headerlink\" title=\"什么是RDD\"></a>什么是RDD</h3><p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是 Spark 中最基本的<font color=\"red\">数据处理模型</font>。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的集合</p>\n<p><img src=\"/posts/6eb4a027/4.png\"></p>\n<p><strong>RDD的数据处理方式类似于IO流，也有装饰者设计模式</strong></p>\n<p><strong>RDD的数据只有在调用collect方法时，才会真正执行业务逻辑操作。之前的封装全部都是功能的扩展</strong></p>\n<p><strong>RDD是不保存数据。但是IO可以临时保存一部分数据</strong></p>\n<p><img src=\"/posts/6eb4a027/6.png\"></p>\n<ul>\n<li><p>弹性</p>\n<ul>\n<li>存储的弹性：内存与磁盘的自动切换；</li>\n</ul>\n</li>\n<li><p>容错的弹性：数据丢失可以自动恢复；</p>\n</li>\n<li><p>计算的弹性：计算出错重试机制；</p>\n</li>\n<li><p>分片的弹性：可根据需要重新分片</p>\n</li>\n<li><p>分布式：数据存储在大数据集群不同节点上。</p>\n</li>\n<li><p>数据集：RDD 封装了计算逻辑，并不保存数据</p>\n</li>\n<li><p>数据抽象：RDD 是一个抽象类，需要子类具体实现</p>\n</li>\n<li><p>不可变：RDD 封装了计算逻辑，是不可以改变的，想要改变，只能产生新的RDD，在新的RDD 里面封装计算逻辑</p>\n</li>\n<li><p>可分区、并行计算</p>\n</li>\n</ul>\n<h3 id=\"核心属性\"><a href=\"#核心属性\" class=\"headerlink\" title=\"核心属性\"></a>核心属性</h3><p>IDEA中查看RDD.scala源码方法：</p>\n<p><a href=\"https://blog.csdn.net/m0_56602092/article/details/119217924\">https://blog.csdn.net/m0_56602092/article/details/119217924</a></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Internally, each RDD is characterized by five main properties:</span></span><br><span class=\"line\"><span class=\"comment\">A list of partitions</span></span><br><span class=\"line\"><span class=\"comment\">A function for computing each split</span></span><br><span class=\"line\"><span class=\"comment\">A list of dependencies on other RDDs</span></span><br><span class=\"line\"><span class=\"comment\">Optionally, a Partitioner for key-value RDDs (e.g. to say that the RDD is hash-partitioned)</span></span><br><span class=\"line\"><span class=\"comment\">Optionally, a list of preferred locations to compute each split on (e.g. block locations for an HDFS file)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"分区列表\"><a href=\"#分区列表\" class=\"headerlink\" title=\"分区列表\"></a>分区列表</h4><p>RDD 数据结构中存在分区列表，用于<strong>执行任务时并行计算</strong>，是实现分布式计算的重要属性。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implemented by subclasses to return the set of partitions in this RDD. This method will only</span></span><br><span class=\"line\"><span class=\"comment\"> * be called once, so it is safe to implement a time-consuming computation in it.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The partitions in this array must satisfy the following property:</span></span><br><span class=\"line\"><span class=\"comment\"> *   `rdd.partitions.zipWithIndex.forall { case (partition, index) =&gt; partition.index == index }`</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getPartitions</span></span>: <span class=\"type\">Array</span>[<span class=\"type\">Partition</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"分区计算函数\"><a href=\"#分区计算函数\" class=\"headerlink\" title=\"分区计算函数\"></a>分区计算函数</h4><p>Spark 在计算时，是<strong>使用分区函数对每一个分区进行计算</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * :: DeveloperApi ::</span></span><br><span class=\"line\"><span class=\"comment\"> * Implemented by subclasses to compute a given partition.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@DeveloperApi</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute</span></span>(split: <span class=\"type\">Partition</span>, context: <span class=\"type\">TaskContext</span>): <span class=\"type\">Iterator</span>[<span class=\"type\">T</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"RDD-之间的依赖关系\"><a href=\"#RDD-之间的依赖关系\" class=\"headerlink\" title=\"RDD 之间的依赖关系\"></a>RDD 之间的依赖关系</h4><p>RDD 是计算模型的封装，当<strong>需求中需要将多个计算模型进行组合时，就需要将多个 RDD 建立依赖关系</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Implemented by subclasses to return how this RDD depends on parent RDDs. This method will only</span></span><br><span class=\"line\"><span class=\"comment\"> * be called once, so it is safe to implement a time-consuming computation in it.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getDependencies</span></span>: <span class=\"type\">Seq</span>[<span class=\"type\">Dependency</span>[_]] = deps</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"分区器（可选）\"><a href=\"#分区器（可选）\" class=\"headerlink\" title=\"分区器（可选）\"></a>分区器（可选）</h4><p>当数据为 KV 类型数据时，可以<strong>通过设定分区器自定义数据的分区</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Optionally overridden by subclasses to specify how they are partitioned. */</span></span><br><span class=\"line\"><span class=\"meta\">@transient</span> <span class=\"keyword\">val</span> partitioner: <span class=\"type\">Option</span>[<span class=\"type\">Partitioner</span>] = <span class=\"type\">None</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"首选位置（可选）\"><a href=\"#首选位置（可选）\" class=\"headerlink\" title=\"首选位置（可选）\"></a>首选位置（可选）</h4><p>计算数据时，<strong>可以根据计算节点的状态选择不同的节点位置进行计算</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Optionally overridden by subclasses to specify placement preferences.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getPreferredLocations</span></span>(split: <span class=\"type\">Partition</span>): <span class=\"type\">Seq</span>[<span class=\"type\">String</span>] = <span class=\"type\">Nil</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/6eb4a027/7.png\"></p>\n<h3 id=\"执行原理\"><a href=\"#执行原理\" class=\"headerlink\" title=\"执行原理\"></a>执行原理</h3><h3 id=\"基础编程\"><a href=\"#基础编程\" class=\"headerlink\" title=\"基础编程\"></a>基础编程</h3><p>RDD创建</p>\n<p>在 Spark 中创建RDD 的创建方式可以分为四种：</p>\n<h4 id=\"从集合（内存）中创建-RDD\"><a href=\"#从集合（内存）中创建-RDD\" class=\"headerlink\" title=\"从集合（内存）中创建 RDD\"></a>从集合（内存）中创建 RDD</h4><p>从集合中创建RDD，Spark主要提供了两个方法：parallelize 和 makeRDD</p>\n<p>从底层代码实现来讲，makeRDD 方法其实就是parallelize 方法</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//TODO 创建RDD</span></span><br><span class=\"line\">   <span class=\"comment\">//从内存中创建RDD,将内存中集合的数据作为处理的数据源</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> seq = <span class=\"type\">Seq</span>[<span class=\"type\">Int</span>](<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//parallelize:并行</span></span><br><span class=\"line\">   <span class=\"comment\">//val rdd=sc.parallelize(seq)</span></span><br><span class=\"line\">   <span class=\"comment\">//makeRDD方法在底层实现时就是调用了rdd对下的parallelize方法</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> rdd: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] =sc.makeRDD(seq)</span><br><span class=\"line\">   rdd.collect().foreach(println)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//TODO 关闭环境</span></span><br><span class=\"line\">   sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>ctrl+P 提示函数所要用的参数</code></p>\n<h4 id=\"从外部存储（文件）创建RDD\"><a href=\"#从外部存储（文件）创建RDD\" class=\"headerlink\" title=\"从外部存储（文件）创建RDD\"></a>从外部存储（文件）创建RDD</h4><p>由外部存储系统的数据集创建RDD 包括：本地的文件系统，所有Hadoop 支持的数据集， 比如HDFS、HBase 等</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//TODO 创建RDD</span></span><br><span class=\"line\">   <span class=\"comment\">//从文件中创建RDD,将文件中的数据作为处理的数据源</span></span><br><span class=\"line\">   <span class=\"comment\">//path路径默认以当前环境的根路径作为基准。可以写绝对路径，或相对路径</span></span><br><span class=\"line\">   <span class=\"comment\">//path路径可以是文件的具体路径,也可以是目录名称</span></span><br><span class=\"line\">   <span class=\"comment\">// *是通配符 datas/1*.txt 可以匹配1开头的txt文件</span></span><br><span class=\"line\">   <span class=\"comment\">//path还可以是分布式存储系统路径:HDFS 如 hdfs://linux1:8020/test.txt</span></span><br><span class=\"line\">   <span class=\"comment\">//val rdd: RDD[String] = sc.textFile(\"datas/*\")</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//两种：</span></span><br><span class=\"line\">   <span class=\"comment\">//1.textFile: 以行为单位来读取数据，读取的数据都是字符串</span></span><br><span class=\"line\">   <span class=\"comment\">//2.wholeTextFiles: 以文件为单位读取数据</span></span><br><span class=\"line\">   <span class=\"comment\">// 读取的结果为元组，第一个元素表示路径，第二个元素表示文件内容</span></span><br><span class=\"line\"><span class=\"comment\">//val rdd = sc.textFile(\"datas//1.txt\")</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> rdd: <span class=\"type\">RDD</span>[(<span class=\"type\">String</span>, <span class=\"type\">String</span>)] = sc.wholeTextFiles(<span class=\"string\">\"datas\"</span>)</span><br><span class=\"line\">   rdd.collect().foreach(println)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//TODO 关闭环境</span></span><br><span class=\"line\">   sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"RDD-并行度与分区\"><a href=\"#RDD-并行度与分区\" class=\"headerlink\" title=\"RDD 并行度与分区\"></a>RDD 并行度与分区</h3><p>默认情况下，Spark 可以将一个作业切分多个任务后，发送给 Executor 节点并行计算，而能够并行计算的任务数量我们称之为并行度。这个数量可以在构建RDD 时指定。记住，这里的并行执行的任务数量，并不是指的切分任务的数量，不要混淆了。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">sparkConf.set(<span class=\"string\">\"spark.default.parallelism\"</span>,<span class=\"string\">\"5\"</span>)  <span class=\"comment\">//设置 5个分区</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 创建RDD</span></span><br><span class=\"line\"><span class=\"comment\">//RDD的并行度 &amp; 分区</span></span><br><span class=\"line\"><span class=\"comment\">//def makeRDD[T : ClassTag](seq: Seq[T], numSlices: Int = defaultParallelism): RDD[T]</span></span><br><span class=\"line\"><span class=\"comment\">// makeRDD方法可以传递第二个参数，这个参数表示分区的数量</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数是可以不传递的，那么makeRDD方法会使用默认值：defaultParallelism(默认并行度)</span></span><br><span class=\"line\"><span class=\"comment\">// scheduler.conf.getInt(\"spark.default.parallelism\", totalCores)</span></span><br><span class=\"line\"><span class=\"comment\">// 会从配置的对象当中取配置的参数</span></span><br><span class=\"line\"><span class=\"comment\">// 如果没有配会取默认值 totalCores属性取值为当前环境最大可用核数</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"comment\">// val rdd = sc.makeRDD(List(1,2,3,4),2) //设置为两个分区 </span></span><br><span class=\"line\"><span class=\"comment\">// 将处理的数据保存成分区文件  </span></span><br><span class=\"line\">rdd.saveAsTextFile(<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 关闭环境</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>分区数据分配-案例分析</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 创建RDD</span></span><br><span class=\"line\"><span class=\"comment\">//1.数据以行为单位进行读取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    分区大小=总字节/minPartitions；如果剩余大小&gt;分区大小10%,则新增一个分区  7/2=3...1</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">单个文件：1.txt</span></span><br><span class=\"line\"><span class=\"comment\">1234567@@  =》 012345678   @为回车和换行</span></span><br><span class=\"line\"><span class=\"comment\">89@@       =》 9101112</span></span><br><span class=\"line\"><span class=\"comment\">0          =》 13</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">[0,7]   =&gt; 1234567     对应偏移量这里其实8也被读到了(对应第一行数据012345678字符总数)，读取后不会重复读取一行</span></span><br><span class=\"line\"><span class=\"comment\">[7,14]  =&gt; 890</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">每个分区大小= 文件字节总/分区数量            如文件大小为 15  (1) [0-7]  (2)[7-14]    如果有余数就到最后 [15]</span></span><br><span class=\"line\"><span class=\"comment\">每行字符总数= 每行数据大小+回车换行两个偏移量   满足每个分区的大小就会被读取,没有就读下一行  一行数据读取后，不会重复读区一行</span></span><br><span class=\"line\"><span class=\"comment\">如果数据源为多个文件，那么计算分区时以文件为单位进行分区</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd=sc.textFile(<span class=\"string\">\"datas\"</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">rdd.saveAsTextFile(<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//TODO 关闭环境</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>RDD方法=&gt;RDD算子</strong></p>\n<p><strong>转换：</strong>功能的补充和封装，将旧的RDD包装成新的RDD  flatMap,map</p>\n<p><strong>行动：</strong>触发任务的调度和作业的执行 collect</p>\n<h2 id=\"RDD转化算子\"><a href=\"#RDD转化算子\" class=\"headerlink\" title=\"RDD转化算子\"></a>RDD转化算子</h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p><strong>函数签名：</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">map</span></span>[<span class=\"type\">U</span>: <span class=\"type\">ClassTag</span>](f: <span class=\"type\">T</span> =&gt; <span class=\"type\">U</span>): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>]</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>函数说明：</strong></p>\n<p>将处理的数据<font color=\"red\">逐条</font>进行映射转换，这里的转换可以是类型的转换，也可以是值的转换。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// TODO 算子 -map</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">    <span class=\"comment\">//1,2,3,4</span></span><br><span class=\"line\">    <span class=\"comment\">//2,4,6,8</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//转换函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapFunction</span></span>(num:<span class=\"type\">Int</span>)={</span><br><span class=\"line\">         num*<span class=\"number\">2</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"><span class=\"comment\">//    val mapRDD: RDD[Int] =rdd.map(mapFunction)</span></span><br><span class=\"line\"><span class=\"comment\">//    val mapRDD: RDD[Int] =rdd.map((num:Int)=&gt;{num*2})</span></span><br><span class=\"line\"><span class=\"comment\">//    val mapRDD: RDD[Int] =rdd.map((num:Int)=&gt;num*2)</span></span><br><span class=\"line\"><span class=\"comment\">//    val mapRDD: RDD[Int] =rdd.map((num)=&gt;num*2)</span></span><br><span class=\"line\"><span class=\"comment\">//    val mapRDD: RDD[Int] =rdd.map(num=&gt;num*2)</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> mapRDD = rdd.map(_*<span class=\"number\">2</span>)</span><br><span class=\"line\">      mapRDD.collect().foreach(println)</span><br><span class=\"line\">\t  <span class=\"comment\">//结果：2，4，6，8</span></span><br><span class=\"line\">\t  sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// TODO 算子 -map</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> rdd = sc.textFile(<span class=\"string\">\"datas/apache.log\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">val</span> makDRR = rdd.map {</span><br><span class=\"line\">     line =&gt; {</span><br><span class=\"line\">       <span class=\"keyword\">val</span> data = line.split(<span class=\"string\">\" \"</span>)   <span class=\"comment\">//利用空格拆分</span></span><br><span class=\"line\">       data(<span class=\"number\">6</span>)</span><br><span class=\"line\">     }</span><br><span class=\"line\">   }</span><br><span class=\"line\">   makDRR.collect().foreach(println)</span><br><span class=\"line\">   <span class=\"comment\">//结果：把.log 数据按空格拆分，取下标为六的数据</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>map并行</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// TODO 算子 -map</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 1. rdd的计算一个分区内的数据是一个执行逻辑</span></span><br><span class=\"line\">   <span class=\"comment\">// 只有前面一个数据全部的逻辑执行完毕后，才会执行下一个数据</span></span><br><span class=\"line\">   <span class=\"comment\">// 分区内数据的执行是有序的</span></span><br><span class=\"line\">   <span class=\"comment\">// 2. 不同分区数据计算是无序的</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> mapRDD=rdd.map{</span><br><span class=\"line\">     num=&gt;{</span><br><span class=\"line\">       println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>+num)</span><br><span class=\"line\">       num</span><br><span class=\"line\">     }</span><br><span class=\"line\">   }</span><br><span class=\"line\">   <span class=\"keyword\">var</span> mapRDD1=mapRDD.map{</span><br><span class=\"line\">     num=&gt;{</span><br><span class=\"line\">       println(<span class=\"string\">\"#########\"</span>+num)</span><br><span class=\"line\">       num</span><br><span class=\"line\">     }</span><br><span class=\"line\">   }</span><br><span class=\"line\">   mapRDD1.collect()</span><br><span class=\"line\"><span class=\"comment\">//结果：无规律的因为是并行</span></span><br><span class=\"line\">   sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"mapPartitions\"><a href=\"#mapPartitions\" class=\"headerlink\" title=\"mapPartitions\"></a>mapPartitions</h3><p><strong>函数签名：</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapPartitions</span></span>[<span class=\"type\">U</span>: </span><br><span class=\"line\">       <span class=\"type\">ClassTag</span>]( f: <span class=\"type\">Iterator</span>[<span class=\"type\">T</span>] =&gt;</span><br><span class=\"line\">       <span class=\"type\">Iterator</span>[<span class=\"type\">U</span>],</span><br><span class=\"line\">\t   preservesPartitioning: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>]</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>函数说明：</strong></p>\n<p>将待处理的数据<font color=\"red\">以分区为单位</font>发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子 -mapPartitions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//   迭代器</span></span><br><span class=\"line\"><span class=\"comment\">//mapPartitions : 可以以分区为单位进行数据转换操作</span></span><br><span class=\"line\"><span class=\"comment\">//                但是会将整个分区的数据加载到内存进行引用</span></span><br><span class=\"line\"><span class=\"comment\">//                如果处理完的数据是不会释放掉，存在对象的引用</span></span><br><span class=\"line\"><span class=\"comment\">//                在内存较小，数据量较大的场合下，容易出现内存溢出</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">//  【1，2】，【3，4】</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> mpRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd.mapPartitions(</span><br><span class=\"line\">  iter =&gt; {</span><br><span class=\"line\">    println(<span class=\"string\">\"&gt;&gt;&gt;&gt;&gt;\"</span>)  <span class=\"comment\">//出现几次就代表用了几个分区</span></span><br><span class=\"line\">    iter.map(_ * <span class=\"number\">2</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">)</span><br><span class=\"line\">mpRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果 2 4 6 8</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>小功能：获取每个数据分区的最大值</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// TODO 算子 -mapPartitions</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// iter为迭代器</span></span><br><span class=\"line\">   <span class=\"comment\">// mapPartitions方法 def mapPartitions[U : ClassTag](f: Iterator[T] =&gt; Iterator[U], preservesPartitioning: Boolean = false): RDD[U]</span></span><br><span class=\"line\">   <span class=\"comment\">// 返回类型为：迭代器，max返回类型不是迭代器 就用List包装一下返回迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\">   <span class=\"comment\">//  【1，2】，【3，4】</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mpRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd.mapPartitions(</span><br><span class=\"line\">      iter =&gt; {</span><br><span class=\"line\">        println(<span class=\"string\">\"&lt;&lt;&lt;&lt;&lt;&lt;&lt;\"</span>)</span><br><span class=\"line\">        <span class=\"type\">List</span>(iter.max).iterator</span><br><span class=\"line\">      }</span><br><span class=\"line\">    )</span><br><span class=\"line\">    mpRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果：2 4</span></span><br><span class=\"line\">    sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>思考一个问题：map 和 mapPartitions 的区别？</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">\t数据处理角度:</span><br><span class=\"line\"><span class=\"type\">Map</span> 算子是分区内一个数据一个数据的执行，类似于串行操作。而 mapPartitions 算子是以分区为单位进行批处理操作。</span><br><span class=\"line\"></span><br><span class=\"line\">\t功能的角度:</span><br><span class=\"line\"><span class=\"type\">Map</span> 算子主要目的将数据源中的数据进行转换和改变。但是不会减少或增多数据。<span class=\"type\">MapPartitions</span> 算子需要传递一个迭代器，返回一个迭代器，没有要求的元素的个数保持不变， 所以可以增加或减少数据</span><br><span class=\"line\"></span><br><span class=\"line\">\t性能的角度:</span><br><span class=\"line\"><span class=\"type\">Map</span> 算子因为类似于串行操作，所以性能比较低，而是 mapPartitions 算子类似于批处理，所以性能较高。但是mapPartitions 算子会长时间占用内存，那么这样会导致内存可能不够用，出现内存溢出的错误。所以在内存有限的情况下，不推荐使用。使用 map 操作。</span><br><span class=\"line\"></span><br><span class=\"line\">不用考虑太多 完成比完美更重要！！！</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"mapPartitionsWithIndex\"><a href=\"#mapPartitionsWithIndex\" class=\"headerlink\" title=\"mapPartitionsWithIndex\"></a>mapPartitionsWithIndex</h3><p><strong>函数签名：</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mapPartitionsWithIndex</span></span>[<span class=\"type\">U</span>:</span><br><span class=\"line\">       <span class=\"type\">ClassTag</span>]( f: (<span class=\"type\">Int</span>, <span class=\"type\">Iterator</span>[<span class=\"type\">T</span>]) =&gt; </span><br><span class=\"line\">       <span class=\"type\">Iterator</span>[<span class=\"type\">U</span>],</span><br><span class=\"line\">\t   preservesPartitioning: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明：</strong></p>\n<p>将待处理的数据以分区为单位发送到计算节点进行处理，这里的处理是指可以进行任意的处理，哪怕是过滤数据，在处理时同时可以获取当前分区索引。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"> <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// TODO 算子 -mapPartitionsWithIndex  显示 分区和数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">val</span> mpRDD = rdd.mapPartitionsWithIndex(</span><br><span class=\"line\">   (index,inter) =&gt; {</span><br><span class=\"line\">   inter.map(num=&gt;{</span><br><span class=\"line\">     (index,num)   <span class=\"comment\">//参数1：输出 index 为分区   参数2：num 为分区的所有数据,进行迭代</span></span><br><span class=\"line\">   })</span><br><span class=\"line\"> }</span><br><span class=\"line\"> )</span><br><span class=\"line\">   mpRDD.collect().foreach(println)</span><br><span class=\"line\"> <span class=\"comment\">/*结果：</span></span><br><span class=\"line\"><span class=\"comment\"> (0,1)  1在0号分区</span></span><br><span class=\"line\"><span class=\"comment\"> (0,2)</span></span><br><span class=\"line\"><span class=\"comment\"> (1,3)  3在1号分区</span></span><br><span class=\"line\"><span class=\"comment\"> (1,4)</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>小功能：获取第二个数据分区的数据</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子 -mapPartitionsWithIndex 获取第二个数据分区的数据`</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">//总共就分两个区 【1，2】 【3，4】 为分区 0、1</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> mpRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd.mapPartitionsWithIndex(</span><br><span class=\"line\">  (index,iter)=&gt;{  </span><br><span class=\"line\"><span class=\"comment\">// index为分区编号 iter为迭代器所有数据  </span></span><br><span class=\"line\"><span class=\"comment\">// 返回类型为：迭代器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(index==<span class=\"number\">1</span>){</span><br><span class=\"line\">      iter</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">      <span class=\"type\">Nil</span>.iterator</span><br><span class=\"line\">      <span class=\"comment\">//Nil叫空集合 它的迭代器就叫空迭代器，把迭代器所有数据清空</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">)</span><br><span class=\"line\">mpRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果： 3 4 把分区0的数据清空了</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"flatMap\"><a href=\"#flatMap\" class=\"headerlink\" title=\"flatMap\"></a>flatMap</h3><p><strong>函数签名：</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flatMap</span></span>[<span class=\"type\">U</span>: <span class=\"type\">ClassTag</span>](f: <span class=\"type\">T</span> =&gt; <span class=\"type\">TraversableOnce</span>[<span class=\"type\">U</span>]): <span class=\"type\">RDD</span>[<span class=\"type\">U</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明：</strong></p>\n<p>将处理的数据进行扁平化后再进行映射处理，所以算子也称之为扁平映射</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子 -flatMap</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(</span><br><span class=\"line\">  <span class=\"string\">\"Hello Scala\"</span>,<span class=\"string\">\"Hello Spark\"</span></span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> flatRDD = rdd.flatMap(</span><br><span class=\"line\">  s =&gt; {</span><br><span class=\"line\">    s.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">)</span><br><span class=\"line\">flatRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//Hello</span></span><br><span class=\"line\"><span class=\"comment\">//Scala</span></span><br><span class=\"line\"><span class=\"comment\">//Hello</span></span><br><span class=\"line\"><span class=\"comment\">//Spark</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>小功能：将 List(List(1,2),3,List(4,5))进行扁平化操作</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子 -flatMap 将 List(List(1,2),3,List(4,5))进行扁平化操作`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>),<span class=\"number\">3</span>,<span class=\"type\">List</span>(<span class=\"number\">4</span>,<span class=\"number\">5</span>)))   <span class=\"comment\">//两层List</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> flatRDD = rdd.flatMap(</span><br><span class=\"line\">  s =&gt; {</span><br><span class=\"line\">    s <span class=\"keyword\">match</span> {</span><br><span class=\"line\">      <span class=\"keyword\">case</span> list:<span class=\"type\">List</span>[_]=&gt;list  <span class=\"comment\">//如果为一个集合类型，返回整个集合</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> data=&gt;<span class=\"type\">List</span>(data)   <span class=\"comment\">//如果为数字 3 不是集合就把他变成集合</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">)</span><br><span class=\"line\">flatRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//2</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//4</span></span><br><span class=\"line\"><span class=\"comment\">//5</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"glom\"><a href=\"#glom\" class=\"headerlink\" title=\"glom\"></a>glom</h3><p><strong>函数签名：</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">glom</span></span>(): <span class=\"type\">RDD</span>[<span class=\"type\">Array</span>[<span class=\"type\">T</span>]]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//flatmap 整体分解成个体</span></span><br><span class=\"line\"><span class=\"comment\">//glom    个体合并成整体  Array</span></span><br><span class=\"line\">    <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// TODO 算子  glom</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> golmRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Array</span>[<span class=\"type\">Int</span>]] = rdd.glom()</span><br><span class=\"line\">    golmRDD.collect().foreach(data=&gt; println(data.mkString(<span class=\"string\">\",\"</span>)))</span><br><span class=\"line\">    <span class=\"comment\">//结果：</span></span><br><span class=\"line\">    <span class=\"comment\">//1,2</span></span><br><span class=\"line\">    <span class=\"comment\">//3,4</span></span><br><span class=\"line\">    sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>小功能：计算所有分区最大值求和（分区内取最大值，分区间最大值求和）</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子 小功能：计算所有分区最大值求和（分区内取最大值，分区间最大值求和）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rdd=sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> golmRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Array</span>[<span class=\"type\">Int</span>]] = rdd.glom()</span><br><span class=\"line\"><span class=\"keyword\">val</span> mapRDD=golmRDD.map(</span><br><span class=\"line\">  data=&gt;{</span><br><span class=\"line\">    data.max  <span class=\"comment\">//分区内取最大值</span></span><br><span class=\"line\">    <span class=\"comment\">//分区1：2   分区2：4</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">)</span><br><span class=\"line\">println(mapRDD.collect().sum)</span><br><span class=\"line\"><span class=\"comment\">//结果： 2+4</span></span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"groupBy\"></a>groupBy</h3><p><strong>函数签名：</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">groupBy</span></span>[<span class=\"type\">K</span>](f: <span class=\"type\">T</span> =&gt; <span class=\"type\">K</span>)(<span class=\"keyword\">implicit</span> kt: <span class=\"type\">ClassTag</span>[<span class=\"type\">K</span>]): <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, <span class=\"type\">Iterable</span>[<span class=\"type\">T</span>])]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>将数据根据指定的规则进行分组, 分区默认不变，但是数据会被<font color=\"red\">打乱重新组合</font>，我们将这样的操作称之为<font color=\"red\">shuffle</font>。极限情况下，数据可能被分在同一个分区中</p>\n<p><font color=\"red\">一个组的数据在一个分区中，但是并不是说一个分区中只有一个组</font></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子- groupBy</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"comment\">// groupBy会将数据源中的每一个数据进行分组判断，根据返回的分组key进行分组</span></span><br><span class=\"line\"><span class=\"comment\">// 相同的key值的数据会放置在一个组中</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> groupRDD = rdd.groupBy(_ % <span class=\"number\">2</span>)  <span class=\"comment\">//匿名函数  进行奇偶划分</span></span><br><span class=\"line\">groupRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"comment\">//(0,CompactBuffer(2, 4))</span></span><br><span class=\"line\"><span class=\"comment\">//(1,CompactBuffer(1, 3))</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>小功能：将 List(\"Hello\", \"hive\", \"hbase\", \"Hadoop\")根据单词首写字母进行分组</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子- groupBy 将 List(\"Hello\", \"hive\", \"hbase\", \"Hadoop\")根据单词首写字母进行分组`</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"hive\"</span>, <span class=\"string\">\"hbase\"</span>, <span class=\"string\">\"Hadoop\"</span>))</span><br><span class=\"line\"><span class=\"comment\">// groupBy会将数据源中的每一个数据进行分组判断，根据返回的分组key进行分组</span></span><br><span class=\"line\"><span class=\"comment\">// 相同的key值的数据会放置在一个组中</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> groupRDD = rdd.groupBy(_.charAt(<span class=\"number\">0</span>))  <span class=\"comment\">//匿名函数  按第一个字母进行分组</span></span><br><span class=\"line\">groupRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//(h,CompactBuffer(hive, hbase))</span></span><br><span class=\"line\"><span class=\"comment\">//(H,CompactBuffer(Hello, Hadoop))</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>小功能：从服务器日志数据 apache.log 中获取每个时间段访问量。</code></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子- groupBy 从服务器日志数据 apache.log 中获取每个时间段访问量。</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.textFile(<span class=\"string\">\"datas/apache.log\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> timeRDD: <span class=\"type\">RDD</span>[(<span class=\"type\">String</span>, <span class=\"type\">Iterable</span>[(<span class=\"type\">String</span>, <span class=\"type\">Int</span>)])] = rdd.map(</span><br><span class=\"line\">  line =&gt; {</span><br><span class=\"line\">    <span class=\"comment\">//parse()返回的是⼀个Date类型数据，format返回的是⼀个StringBuffer类型的数据</span></span><br><span class=\"line\">    <span class=\"comment\">//1.先把文本格式化为日期 2.转换为Date数据 2.取到小时数据，3.返回元组，按小时数据进行分组，取到一个就迭代器+1</span></span><br><span class=\"line\">    <span class=\"comment\">//SimpleDateFormat函数语法：</span></span><br><span class=\"line\">    <span class=\"comment\">//y 年</span></span><br><span class=\"line\">    <span class=\"comment\">//M 月</span></span><br><span class=\"line\">    <span class=\"comment\">//d 日</span></span><br><span class=\"line\">    <span class=\"comment\">//h 时 在上午或下午 (1~12)</span></span><br><span class=\"line\">    <span class=\"comment\">//H 时 在一天中 (0~23)</span></span><br><span class=\"line\">    <span class=\"comment\">//m 分</span></span><br><span class=\"line\">    <span class=\"comment\">//s 秒</span></span><br><span class=\"line\">    <span class=\"comment\">//S 毫秒</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> datas = line.split(<span class=\"string\">\" \"</span>) <span class=\"comment\">//所有数据空格拆分</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> time = datas(<span class=\"number\">3</span>) <span class=\"comment\">// 获取到时间一行  17/05/2015:10:05:34</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sdf  =<span class=\"keyword\">new</span> <span class=\"type\">SimpleDateFormat</span>(<span class=\"string\">\"dd/MM/yyyy:HH:mm:ss\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> date =sdf.parse(time)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> sdf1 =<span class=\"keyword\">new</span> <span class=\"type\">SimpleDateFormat</span>(<span class=\"string\">\"HH\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> hour =sdf1.format(date)     <span class=\"comment\">//把小时转换为String类型</span></span><br><span class=\"line\">    (hour,<span class=\"number\">1</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">).groupBy(_._1)    <span class=\"comment\">//匿名函数  按返回的参数1  也就是返回的hour进行分组</span></span><br><span class=\"line\">timeRDD.map{</span><br><span class=\"line\">  <span class=\"keyword\">case</span>(hour,iter)=&gt;{</span><br><span class=\"line\">    (hour,iter.size)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//(06,366)</span></span><br><span class=\"line\"><span class=\"comment\">//(20,486)</span></span><br><span class=\"line\"><span class=\"comment\">//(19,493)</span></span><br><span class=\"line\"><span class=\"comment\">//(15,496)</span></span><br><span class=\"line\"><span class=\"comment\">//(00,361)</span></span><br><span class=\"line\"><span class=\"comment\">//等等....</span></span><br><span class=\"line\"></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p> <strong>函数签名:</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter</span></span>(f: <span class=\"type\">T</span> =&gt; <span class=\"type\">Boolean</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>将数据根据指定的规则进行<strong>筛选过滤</strong>，符合规则的数据保留，不符合规则的数据丢弃。当数据进行筛选过滤后，分区不变，但是分区内的数据可能不均衡，生产环境下，可能会出现<font color=\"red\">数据倾斜</font></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子-  filter</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> filterRDD = rdd.filter(_%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)</span><br><span class=\"line\">filterRDD.collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"sample\"><a href=\"#sample\" class=\"headerlink\" title=\"sample\"></a>sample</h3><p> <strong>函数签名:</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sample</span></span>( withReplacement: </span><br><span class=\"line\">           <span class=\"type\">Boolean</span>, fraction: <span class=\"type\">Double</span>,</span><br><span class=\"line\">\t\t   seed: <span class=\"type\">Long</span> = <span class=\"type\">Utils</span>.random.nextLong): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>根据指定的规则从数据集中抽取<font color=\"red\">数据</font></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子-\tsample</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"comment\">//sample算子需要转递三个参数</span></span><br><span class=\"line\"><span class=\"comment\">//1.第一个参数表示，抽取数据后是否将数据返回 true(放回)，false(丢弃)</span></span><br><span class=\"line\"><span class=\"comment\">//2.第二个参数表示：</span></span><br><span class=\"line\"><span class=\"comment\">//       如果抽取不放回的场合，数据源中每一条数据被抽取的概率，基准值的概念</span></span><br><span class=\"line\"><span class=\"comment\">//       如果抽取放回的场合：表示数据源中的每一条数据被抽取的可能次数</span></span><br><span class=\"line\"><span class=\"comment\">//3.第三个参数表示：抽取数据时随机算法的种子</span></span><br><span class=\"line\"><span class=\"comment\">//               如果不传递第三个参数，那么使用的是当前系统时间</span></span><br><span class=\"line\">println(rdd.sample(</span><br><span class=\"line\">  <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"number\">0.4</span></span><br><span class=\"line\">  <span class=\"comment\">// 1</span></span><br><span class=\"line\">).collect().mkString(<span class=\"string\">\",\"</span>))</span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h3><p> <strong>函数签名:</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distinct</span></span>()(<span class=\"keyword\">implicit</span> ord: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>] = <span class=\"literal\">null</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">distinct</span></span>(numPartitions: <span class=\"type\">Int</span>)(<span class=\"keyword\">implicit</span> ord: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>] = <span class=\"literal\">null</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>将数据集中重复的数据去重</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子-\tdistinct</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">rdd.distinct().collect().foreach(println)</span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//1 2 3 4</span></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"coalesce\"><a href=\"#coalesce\" class=\"headerlink\" title=\"coalesce\"></a>coalesce</h3><p> <strong>函数签名:</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">coalesce</span></span>(numPartitions: <span class=\"type\">Int</span>, shuffle: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t\t\tpartitionCoalescer: <span class=\"type\">Option</span>[<span class=\"type\">PartitionCoalescer</span>] = <span class=\"type\">Option</span>.empty) </span><br><span class=\"line\">\t\t\t\t\t(<span class=\"keyword\">implicit</span> ord: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>] = <span class=\"literal\">null</span>)</span><br><span class=\"line\">: <span class=\"type\">RDD</span>[<span class=\"type\">T</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>根据数据量<font color=\"red\">缩减分区</font>，用于大数据集过滤后，提高小数据集的执行效率</p>\n<p>当 spark 程序中，存在过多的小任务的时候，可以通过 coalesce 方法，收缩合并分区，减少分区的个数，减小任务调度成本</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// TODO 算子-\tcoalesce</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">4</span>)</span><br><span class=\"line\">   <span class=\"comment\">//coalesce方法默认情况下不会将分区的数据打乱重新组合</span></span><br><span class=\"line\">   <span class=\"comment\">//这种情况下的缩减分区可能会导致数据不均衡，出现数据倾斜</span></span><br><span class=\"line\">   <span class=\"comment\">//如果想要将数据均衡，可以进行shuffle处理,第二个参数填true  但是数据会被打乱</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">val</span> newRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd.coalesce(<span class=\"number\">2</span>)</span><br><span class=\"line\">   <span class=\"comment\">// val newRDD: RDD[Int] = rdd.coalesce(2,true)</span></span><br><span class=\"line\">   newRDD.saveAsTextFile(<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"repartition\"><a href=\"#repartition\" class=\"headerlink\" title=\"repartition\"></a>repartition</h3><p> <strong>函数签名:</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">repartition</span></span>(numPartitions: <span class=\"type\">Int</span>)(<span class=\"keyword\">implicit</span> ord: <span class=\"type\">Ordering</span>[<span class=\"type\">T</span>] = <span class=\"literal\">null</span>): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>该操作内部其实执行的是 coalesce 操作，参数 shuffle 的默认值为 true。无论是将分区数多的RDD 转换为分区数少的RDD，还是将分区数少的 RDD 转换为分区数多的RDD，repartition 操作都可以完成，因为无论如何都会经 shuffle 过程。</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// TODO 算子-\trepartition</span></span><br><span class=\"line\">   <span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//coalesce算子可以扩大分区的，但是如果不进行shuffle操作，是没有意义，不起作用</span></span><br><span class=\"line\">   <span class=\"comment\">//所以如果想要实现扩大分区的效果，需要使用shuffle操作</span></span><br><span class=\"line\">   <span class=\"comment\">//spark提供了一个简化的操作</span></span><br><span class=\"line\">   <span class=\"comment\">//缩减分区：coalesce,如果想要数据均衡，可以采用shuffle 默认为flase</span></span><br><span class=\"line\">   <span class=\"comment\">//扩大分区：repartition,底层代码调用的就是coalesce,而且肯定采用shuffle  默认为true</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">val</span> newRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd.repartition(<span class=\"number\">3</span>)</span><br><span class=\"line\">   newRDD.saveAsTextFile(<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"sortBy\"><a href=\"#sortBy\" class=\"headerlink\" title=\"sortBy\"></a>sortBy</h3><p> <strong>函数签名:</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> </span></span><br><span class=\"line\">\tsortBy[<span class=\"type\">K</span>]( f: </span><br><span class=\"line\">    (<span class=\"type\">T</span>) =&gt; <span class=\"type\">K</span>,</span><br><span class=\"line\">    ascending: <span class=\"type\">Boolean</span> =  <span class=\"literal\">true</span>, numPartitions: <span class=\"type\">Int</span> = <span class=\"keyword\">this</span>.partitions.length)</span><br><span class=\"line\">(<span class=\"keyword\">implicit</span> ord: <span class=\"type\">Ordering</span>[<span class=\"type\">K</span>], ctag: <span class=\"type\">ClassTag</span>[<span class=\"type\">K</span>]): <span class=\"type\">RDD</span>[<span class=\"type\">T</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>该操作用于排序数据。<strong>在排序之前，可以将数据通过 f 函数进行处理，之后按照 f 函数处理的结果进行排序，默认为升序排列</strong>。排序后新产生的 RDD 的分区数与原RDD 的分区数一致。<strong>中间存在 shuffle 的过程</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子-\tsortBy</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>((<span class=\"string\">\"1\"</span>,<span class=\"number\">1</span>),(<span class=\"string\">\"11\"</span>,<span class=\"number\">2</span>),(<span class=\"string\">\"2\"</span>,<span class=\"number\">3</span>)),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//sortBy方法可以根据指定的规则对数据源中的数据进行排序，默认为升序 第二个参数可以改变排序的方式</span></span><br><span class=\"line\"><span class=\"comment\">//sortBy默认情况下，不会改变分区。但是中间存在shuffle操作</span></span><br><span class=\"line\"><span class=\"comment\">//false:降序  true:升序  默认为true  升序：小到大</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> newRDD = rdd.sortBy(t=&gt;t._1.toInt,<span class=\"literal\">true</span>)</span><br><span class=\"line\">newRDD.collect().foreach(println)</span><br><span class=\"line\"></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"双-Value-类型\"><a href=\"#双-Value-类型\" class=\"headerlink\" title=\"双 Value 类型\"></a><strong>双</strong> <strong>Value</strong> <strong>类型</strong></h3><ul>\n<li>交集： <strong>intersection</strong></li>\n</ul>\n<p>对源RDD 和参数RDD 求交集后返回一个新的RDD</p>\n<ul>\n<li>并集： <strong>union</strong></li>\n</ul>\n<p>对源RDD 和参数RDD 求并集后返回一个新的RDD</p>\n<ul>\n<li>差集： <strong>subtract</strong></li>\n</ul>\n<p>以一个 RDD 元素为主，去除两个 RDD 中重复元素，将其他元素保留下来。求差集</p>\n<ul>\n<li>拉链： <strong>zip</strong></li>\n</ul>\n<p>将两个 RDD 中的元素，以键值对的形式进行合并。其中，键值对中的Key 为第 1 个 RDD中的元素，Value 为第 2 个 RDD 中的相同位置的元素</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子-\t双Value类型</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd1 = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd2 = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>))</span><br><span class=\"line\"><span class=\"comment\">//交集，并集和差集要求两个数据源数据类型报错一致</span></span><br><span class=\"line\"><span class=\"comment\">//拉链操作两个数据的类型可以不一致，两个数据源要求分区数据数量保持一致</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集：【3,4】   intersection</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd3: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd1.intersection(rdd2)</span><br><span class=\"line\">println(rdd3.collect().mkString(<span class=\"string\">\",\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集： 【1,2,3,4,5,6】  union</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd4: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd1.union(rdd2)</span><br><span class=\"line\">println(rdd4.collect().mkString(<span class=\"string\">\",\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//差集：【1,2】     subtract</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd5: <span class=\"type\">RDD</span>[<span class=\"type\">Int</span>] = rdd1.subtract(rdd2)</span><br><span class=\"line\">println(rdd5.collect().mkString(<span class=\"string\">\",\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拉链：【1-3,2-4,3-5,4-6】   zip</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd6: <span class=\"type\">RDD</span>[(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>)] = rdd1.zip(rdd2)</span><br><span class=\"line\">println(rdd6.collect().mkString(<span class=\"string\">\",\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>思考一个问题：如果两个RDD 数据类型不一致怎么办？</li>\n</ul>\n<p>交集，并集和差集要求两个数据源数据类型报错一致,但拉链操作两个数据的类型可以不一致</p>\n<ul>\n<li><p>思考一个问题：如果两个RDD 数据分区不一致怎么办？</p>\n</li>\n<li><p>思考一个问题：如果两个RDD 分区数据数量不一致怎么办？</p>\n<p>交集，并集和差集 可以不一致    但拉链要求一致</p>\n</li>\n</ul>\n<h3 id=\"Key-Value-类型\"><a href=\"#Key-Value-类型\" class=\"headerlink\" title=\"Key - Value 类型\"></a><strong>Key - Value</strong> <strong>类型</strong></h3><h3 id=\"partitionBy\"><a href=\"#partitionBy\" class=\"headerlink\" title=\"partitionBy\"></a><strong>partitionBy</strong></h3><p><strong>函数签名:</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partitionBy</span></span>(partitioner: <span class=\"type\">Partitioner</span>): <span class=\"type\">RDD</span>[(<span class=\"type\">K</span>, <span class=\"type\">V</span>)]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>函数说明:</strong></p>\n<p>将数据按照指定Partitioner 重新进行分区。Spark 默认的分区器是HashPartitioner</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//TODO 准备环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"RDD\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> sc=<span class=\"keyword\">new</span> <span class=\"type\">SparkContext</span>(sparkConf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO 算子-\tKey-Value类型</span></span><br><span class=\"line\"><span class=\"comment\">//指数据不是单一的值，是特点的类型叫键值类型</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> rdd = sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>),<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用map将int转换为tape类型，形成了键值类型,partitionBy就可以使用了</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> mapRDD: <span class=\"type\">RDD</span>[(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>)] = rdd.map((_, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">//RDD=&gt;PairRDDFunctions</span></span><br><span class=\"line\"><span class=\"comment\">//隐式转换(二次编译)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//partitionBy根据指定的分区规则(HashPartitioner)对数据进程重分区</span></span><br><span class=\"line\">mapRDD.partitionBy(<span class=\"keyword\">new</span> <span class=\"type\">HashPartitioner</span>(<span class=\"number\">2</span>)).saveAsTextFile(<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sc.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>思考一个问题：如果重分区的分区器和当前RDD 的分区器一样怎么办?</li>\n</ul>\n<p>如果数量和类型是一样的，什么都不会做，但是类型不匹配，数量不匹配，就会产生新的RDD</p>\n<ul>\n<li>思考一个问题：Spark 还有其他分区器吗？</li>\n</ul>\n<p>RangePartitioner(排序范围)、PythonPartitioner、HashPartitioner(哈希)</p>\n<p>像sortBy(排序)方法里就使用了RangePartitioner</p>\n<ul>\n<li>思考一个问题：如果想按照自己的方法进行数据分区怎么办？</li>\n</ul>\n<p>可以自己写个分区器</p>\n<p>  <code>思考一个问题：哪那么多问题？</code></p>\n","categories":["大数据"],"tags":["大数据"]},{"title":"Spring","url":"/posts/6c92115f/","content":"<h1 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h1><h2 id=\"Spring简介\"><a href=\"#Spring简介\" class=\"headerlink\" title=\"Spring简介\"></a>Spring简介</h2><h3 id=\"Spring概述\"><a href=\"#Spring概述\" class=\"headerlink\" title=\"Spring概述\"></a>Spring概述</h3><p>官网地址：<a href=\"https://spring.io/\">https://spring.io/</a></p>\n<blockquote>\n<p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用</p>\n<p>Spring 框架来创建性能好、易于测试、可重用的代码。</p>\n<p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首</p>\n<p>次在 Apache 2.0 许可下发布。</p>\n<p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p>\n<p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应</p>\n<p>用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO</p>\n<p>编程模型来促进良好的编程实践。</p>\n</blockquote>\n<h3 id=\"Spring家族\"><a href=\"#Spring家族\" class=\"headerlink\" title=\"Spring家族\"></a>Spring家族</h3><p>项目列表：<a href=\"https://spring.io/projects\">https://spring.io/projects</a></p>\n<h3 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h3><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework为基础的。</p>\n<h4 id=\"Spring-Framework特性\"><a href=\"#Spring-Framework特性\" class=\"headerlink\" title=\"Spring Framework特性\"></a>Spring Framework特性</h4><ul>\n<li>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常</li>\n</ul>\n<p>小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会</p>\n<p>破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序</p>\n<p>时结构清晰、简洁优雅。</p>\n<ul>\n<li>控制反转：IOC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源</li>\n</ul>\n<p>变成环境将资源准备好，我们享受资源注入。</p>\n<ul>\n<li>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功</li>\n</ul>\n<p>能。</p>\n<ul>\n<li>容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化</li>\n</ul>\n<p>的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发</p>\n<p>效率。</p>\n<ul>\n<li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML</li>\n</ul>\n<p>和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭</p>\n<p>建超大型复杂应用系统。</p>\n<ul>\n<li><p>声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现。</p>\n</li>\n<li><p>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且</p>\n</li>\n</ul>\n<p>Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基</p>\n<p>础上全部使用 Spring 来实现。</p>\n<h4 id=\"Spring-Framework五大功能模块\"><a href=\"#Spring-Framework五大功能模块\" class=\"headerlink\" title=\"Spring Framework五大功能模块\"></a>Spring Framework五大功能模块</h4><table>\n<thead>\n<tr>\n<th><strong>功能模块</strong></th>\n<th><strong>功能介绍</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Core Container</td>\n<td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td>\n</tr>\n<tr>\n<td>AOP&amp;Aspects</td>\n<td>面向切面编程</td>\n</tr>\n<tr>\n<td>Testing</td>\n<td>提供了对 junit 或 TestNG 测试框架的整合。</td>\n</tr>\n<tr>\n<td>Data Access/Integration</td>\n<td>提供了对数据访问/集成的功能。</td>\n</tr>\n<tr>\n<td>Spring MVC</td>\n<td>提供了面向Web应用程序的集成功能。</td>\n</tr>\n</tbody></table>\n<h1 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h1><h2 id=\"IOC容器\"><a href=\"#IOC容器\" class=\"headerlink\" title=\"IOC容器\"></a>IOC容器</h2><h3 id=\"IOC思想\"><a href=\"#IOC思想\" class=\"headerlink\" title=\"IOC思想\"></a>IOC思想</h3><p>IOC：Inversion of Control，翻译过来是<strong>反转控制</strong>。</p>\n<h4 id=\"①获取资源的传统方式\"><a href=\"#①获取资源的传统方式\" class=\"headerlink\" title=\"①获取资源的传统方式\"></a>①获取资源的传统方式</h4><p>自己做饭：买菜、洗菜、择菜、改刀、炒菜，全过程参与，费时费力，必须清楚了解资源创建整个过程中的全部细节且熟练掌握。</p>\n<p>在应用程序中的组件需要获取资源时，传统的方式是组件<strong>主动</strong>的从容器中获取所需要的资源，在这样的</p>\n<p>模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率。</p>\n<h4 id=\"②反转控制方式获取资源\"><a href=\"#②反转控制方式获取资源\" class=\"headerlink\" title=\"②反转控制方式获取资源\"></a>②反转控制方式获取资源</h4><p>点外卖：下单、等、吃，省时省力，不必关心资源创建过程的所有细节。</p>\n<p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的<strong>被动</strong>形式。</p>\n<h4 id=\"③DI\"><a href=\"#③DI\" class=\"headerlink\" title=\"③DI\"></a>③DI</h4><p>DI：Dependency Injection，翻译过来是<strong>依赖注入</strong>。</p>\n<p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器</p>\n<p>的资源注入。相对于IOC而言，这种表述更直接。</p>\n<p>所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p>\n<h3 id=\"IOC容器在Spring中的实现\"><a href=\"#IOC容器在Spring中的实现\" class=\"headerlink\" title=\"IOC容器在Spring中的实现\"></a>IOC容器在Spring中的实现</h3><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。在创建bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式：</p>\n<h4 id=\"①BeanFactory\"><a href=\"#①BeanFactory\" class=\"headerlink\" title=\"①BeanFactory\"></a>①BeanFactory</h4><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p>\n<h4 id=\"②ApplicationContext\"><a href=\"#②ApplicationContext\" class=\"headerlink\" title=\"②ApplicationContext\"></a>②ApplicationContext</h4><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用</p>\n<p>ApplicationContext 而不是底层的 BeanFactory。</p>\n<h4 id=\"③ApplicationContext的主要实现类\"><a href=\"#③ApplicationContext的主要实现类\" class=\"headerlink\" title=\"③ApplicationContext的主要实现类\"></a>③ApplicationContext的主要实现类</h4><p>![5](C:/Users/zw/Desktop/ssm md格式笔记/img/5.png)</p>\n<table>\n<thead>\n<tr>\n<th><strong>类型名</strong></th>\n<th><strong>简介</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ClassPathXmlApplicationContext</td>\n<td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td>\n</tr>\n<tr>\n<td>FileSystemXmlApplicationContext</td>\n<td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td>\n</tr>\n<tr>\n<td>ConfigurableApplicationContext</td>\n<td>ApplicationContext 的子接口，包含一些扩展方法refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td>\n</tr>\n<tr>\n<td>WebApplicationContext</td>\n<td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td>\n</tr>\n</tbody></table>\n<h2 id=\"基于XML管理bean\"><a href=\"#基于XML管理bean\" class=\"headerlink\" title=\"基于XML管理bean\"></a>基于XML管理bean</h2><h3 id=\"实验一：入门案例\"><a href=\"#实验一：入门案例\" class=\"headerlink\" title=\"实验一：入门案例\"></a>实验一：入门案例</h3><h4 id=\"①创建Maven-Module\"><a href=\"#①创建Maven-Module\" class=\"headerlink\" title=\"①创建Maven Module\"></a>①创建Maven Module</h4><h4 id=\"②引入依赖\"><a href=\"#②引入依赖\" class=\"headerlink\" title=\"②引入依赖\"></a>②引入依赖</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- junit测试 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>![6](C:/Users/zw/Desktop/ssm md格式笔记/img/6.png)</p>\n<h4 id=\"③创建类HelloWorld\"><a href=\"#③创建类HelloWorld\" class=\"headerlink\" title=\"③创建类HelloWorld\"></a>③创建类HelloWorld</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"helloworld\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>![7](C:/Users/zw/Desktop/ssm md格式笔记/img/7.png)</p>\n<p>![8](C:/Users/zw/Desktop/ssm md格式笔记/img/8.png)</p>\n<h4 id=\"⑤在Spring的配置文件中配置bean\"><a href=\"#⑤在Spring的配置文件中配置bean\" class=\"headerlink\" title=\"⑤在Spring的配置文件中配置bean\"></a>⑤在Spring的配置文件中配置bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">\t配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理</span></span><br><span class=\"line\"><span class=\"comment\">\t通过bean标签配置IOC容器所管理的bean</span></span><br><span class=\"line\"><span class=\"comment\">\t属性：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tid：设置bean的唯一标识</span></span><br><span class=\"line\"><span class=\"comment\">\t\tclass：设置bean所对应类型的全类名</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloworld\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.HelloWorld\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑥创建测试类测试\"><a href=\"#⑥创建测试类测试\" class=\"headerlink\" title=\"⑥创建测试类测试\"></a>⑥创建测试类测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHelloWorld</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> newClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">HelloWorld</span> <span class=\"variable\">helloworld</span> <span class=\"operator\">=</span> (HelloWorld) ac.getBean(<span class=\"string\">\"helloworld\"</span>);</span><br><span class=\"line\">    helloworld.sayHello();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑦思路\"><a href=\"#⑦思路\" class=\"headerlink\" title=\"⑦思路\"></a>⑦思路</h4><p>![9](C:/Users/zw/Desktop/ssm md格式笔记/img/9.png)</p>\n<h4 id=\"⑧注意\"><a href=\"#⑧注意\" class=\"headerlink\" title=\"⑧注意\"></a>⑧注意</h4><p>Spring 底层默认通过反射技术调用组件类的无参构造器来创建组件对象，这一点需要注意。如果在需要无参构造器时，没有无参构造器，则会抛出下面的异常：</p>\n<blockquote>\n<p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name</p>\n<p>‘helloworld’ defined in class path resource [applicationContext.xml]: Instantiation of bean</p>\n<p>failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed</p>\n<p>to instantiate [com.atguigu.spring.bean.HelloWorld]: No default constructor found; nested</p>\n<p>exception is java.lang.NoSuchMethodException: com.atguigu.spring.bean.HelloWorld.</p>\n<p><init>()</init></p>\n</blockquote>\n<h3 id=\"实验二：获取bean\"><a href=\"#实验二：获取bean\" class=\"headerlink\" title=\"实验二：获取bean\"></a>实验二：获取bean</h3><h4 id=\"①方式一：根据id获取\"><a href=\"#①方式一：根据id获取\" class=\"headerlink\" title=\"①方式一：根据id获取\"></a>①方式一：根据id获取</h4><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。</p>\n<p>上个实验中我们使用的就是这种方式。</p>\n<h4 id=\"②方式二：根据类型获取\"><a href=\"#②方式二：根据类型获取\" class=\"headerlink\" title=\"②方式二：根据类型获取\"></a>②方式二：根据类型获取</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHelloWorld</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">HelloWorld</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> ac.getBean(HelloWorld.class);</span><br><span class=\"line\">    bean.sayHello();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③方式三：根据id和类型\"><a href=\"#③方式三：根据id和类型\" class=\"headerlink\" title=\"③方式三：根据id和类型\"></a>③方式三：根据id和类型</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testHelloWorld</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> newClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">HelloWorld</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">\"helloworld\"</span>, HelloWorld.class);</span><br><span class=\"line\">    bean.sayHello();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④注意\"><a href=\"#④注意\" class=\"headerlink\" title=\"④注意\"></a>④注意</h4><p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p>\n<p>当IOC容器中一共配置了两个：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloworldOne\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.HelloWorld\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"helloworldTwo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.HelloWorld\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>根据类型获取时会抛出异常：</p>\n<blockquote>\n<p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean</p>\n<p>of type ‘com.atguigu.spring.bean.HelloWorld’ available: expected single matching bean but</p>\n<p>found 2: helloworldOne,helloworldTwo</p>\n</blockquote>\n<h4 id=\"⑤扩展\"><a href=\"#⑤扩展\" class=\"headerlink\" title=\"⑤扩展\"></a>⑤扩展</h4><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p>\n<blockquote>\n<p>可以，前提是bean唯一</p>\n</blockquote>\n<p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p>\n<blockquote>\n<p>不行，因为bean不唯一</p>\n</blockquote>\n<h4 id=\"⑥结论\"><a href=\"#⑥结论\" class=\"headerlink\" title=\"⑥结论\"></a>⑥结论</h4><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类</p>\n<p>型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p>\n<h3 id=\"实验三：依赖注入之setter注入\"><a href=\"#实验三：依赖注入之setter注入\" class=\"headerlink\" title=\"实验三：依赖注入之setter注入\"></a>实验三：依赖注入之setter注入</h3><h4 id=\"①创建学生类Student\"><a href=\"#①创建学生类Student\" class=\"headerlink\" title=\"①创建学生类Student\"></a>①创建学生类Student</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sex;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getId</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Integer id)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getSex</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSex</span><span class=\"params\">(String sex)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Student{\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">            <span class=\"string\">\", name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">            <span class=\"string\">\", sex='\"</span> + sex + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">'}'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②配置bean时为属性赋值\"><a href=\"#②配置bean时为属性赋值\" class=\"headerlink\" title=\"②配置bean时为属性赋值\"></a>②配置bean时为属性赋值</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentOne\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1001\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张三\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"23\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"男\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③测试\"><a href=\"#③测试\" class=\"headerlink\" title=\"③测试\"></a>③测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDIBySet</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"springdi.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">Student</span> <span class=\"variable\">studentOne</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">\"studentOne\"</span>, Student.class);</span><br><span class=\"line\">    System.out.println(studentOne);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验四：依赖注入之构造器注入\"><a href=\"#实验四：依赖注入之构造器注入\" class=\"headerlink\" title=\"实验四：依赖注入之构造器注入\"></a>实验四：依赖注入之构造器注入</h3><h4 id=\"①在Student类中添加有参构造\"><a href=\"#①在Student类中添加有参构造\" class=\"headerlink\" title=\"①在Student类中添加有参构造\"></a>①在Student类中添加有参构造</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Student</span><span class=\"params\">(Integer id, String name, Integer age, String sex)</span> {</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②配置bean\"><a href=\"#②配置bean\" class=\"headerlink\" title=\"②配置bean\"></a>②配置bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentTwo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1002\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"李四\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"33\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>注意：</p>\n<p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p>\n<ul>\n<li>index属性：指定参数所在位置的索引（从0开始）</li>\n<li>name属性：指定参数名</li>\n</ul>\n</blockquote>\n<h4 id=\"③测试-1\"><a href=\"#③测试-1\" class=\"headerlink\" title=\"③测试\"></a>③测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDIBySet</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"springdi.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">Student</span> <span class=\"variable\">studentOne</span> <span class=\"operator\">=</span> ac.getBean(<span class=\"string\">\"studentTwo\"</span>, Student.class);</span><br><span class=\"line\">    System.out.println(studentOne);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验五：特殊值处理\"><a href=\"#实验五：特殊值处理\" class=\"headerlink\" title=\"实验五：特殊值处理\"></a>实验五：特殊值处理</h3><h4 id=\"①字面量赋值\"><a href=\"#①字面量赋值\" class=\"headerlink\" title=\"①字面量赋值\"></a>①字面量赋值</h4><blockquote>\n<p>什么是字面量？</p>\n<p>int a = 10;</p>\n<p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a</p>\n<p>的时候，我们实际上拿到的值是10。</p>\n<p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面</p>\n<p>量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张三\"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②null值\"><a href=\"#②null值\" class=\"headerlink\" title=\"②null值\"></a>②null值</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">null</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>注意：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"null\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>以上写法，为name所赋的值是字符串null</p>\n</blockquote>\n<h4 id=\"③xml实体\"><a href=\"#③xml实体\" class=\"headerlink\" title=\"③xml实体\"></a>③xml实体</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"expression\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"a <span class=\"symbol\">&amp;lt;</span> b\"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④CDATA节\"><a href=\"#④CDATA节\" class=\"headerlink\" title=\"④CDATA节\"></a>④CDATA节</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"expression\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验六：为类类型属性赋值\"><a href=\"#实验六：为类类型属性赋值\" class=\"headerlink\" title=\"实验六：为类类型属性赋值\"></a>实验六：为类类型属性赋值</h3><h4 id=\"①创建班级类Clazz\"><a href=\"#①创建班级类Clazz\" class=\"headerlink\" title=\"①创建班级类Clazz\"></a>①创建班级类Clazz</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Clazz</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer clazzId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String clazzName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getClazzId</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazzId;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setClazzId</span><span class=\"params\">(Integer clazzId)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clazzId = clazzId;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getClazzName</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazzName;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setClazzName</span><span class=\"params\">(String clazzName)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clazzName = clazzName;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Clazz{\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"clazzId=\"</span> + clazzId +</span><br><span class=\"line\">            <span class=\"string\">\", clazzName='\"</span> + clazzName + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">'}'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Clazz</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Clazz</span><span class=\"params\">(Integer clazzId, String clazzName)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clazzId = clazzId;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.clazzName = clazzName;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②修改Student类\"><a href=\"#②修改Student类\" class=\"headerlink\" title=\"②修改Student类\"></a>②修改Student类</h4><p>在Student类中添加以下代码：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Clazz clazz;</span><br><span class=\"line\"><span class=\"keyword\">public</span> Clazz <span class=\"title function_\">getClazz</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setClazz</span><span class=\"params\">(Clazz clazz)</span> {</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.clazz = clazz;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③方式一：引用外部已声明的bean\"><a href=\"#③方式一：引用外部已声明的bean\" class=\"headerlink\" title=\"③方式一：引用外部已声明的bean\"></a>③方式一：引用外部已声明的bean</h4><p>配置Clazz类型的bean：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clazzOne\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Clazz\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1111\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"财源滚滚班\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>为Student中的clazz属性赋值：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentFour\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1004\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"赵六\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"26\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"clazzOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>错误演示：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentFour\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1004\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"赵六\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"26\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"clazzOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException:</p>\n<p>Cannot convert value of type ‘java.lang.String’ to required type</p>\n<p>‘com.atguigu.spring.bean.Clazz’ for property ‘clazz’: no matching editors or conversion</p>\n<p>strategy found</p>\n<p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个</p>\n<p>属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p>\n</blockquote>\n<h4 id=\"④方式二：内部bean\"><a href=\"#④方式二：内部bean\" class=\"headerlink\" title=\"④方式二：内部bean\"></a>④方式二：内部bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentFour\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1004\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"赵六\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"26\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clazzInner\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Clazz\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2222\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"远大前程班\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③方式三：级联属性赋值\"><a href=\"#③方式三：级联属性赋值\" class=\"headerlink\" title=\"③方式三：级联属性赋值\"></a>③方式三：级联属性赋值</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentFour\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1004\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"赵六\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"26\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"clazzOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz.clazzId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3333\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz.clazzName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"最强王者班\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验七：为数组类型属性赋值\"><a href=\"#实验七：为数组类型属性赋值\" class=\"headerlink\" title=\"实验七：为数组类型属性赋值\"></a>实验七：为数组类型属性赋值</h3><h4 id=\"①修改Student类\"><a href=\"#①修改Student类\" class=\"headerlink\" title=\"①修改Student类\"></a>①修改Student类</h4><p>在Student类中添加以下代码：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String[] hobbies;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String[] getHobbies() {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hobbies;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setHobbies</span><span class=\"params\">(String[] hobbies)</span> {</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hobbies = hobbies;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②配置bean-1\"><a href=\"#②配置bean-1\" class=\"headerlink\" title=\"②配置bean\"></a>②配置bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentFour\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1004\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"赵六\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"26\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"clazzOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobbies\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>抽烟<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>喝酒<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>烫头<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验八：为集合类型属性赋值\"><a href=\"#实验八：为集合类型属性赋值\" class=\"headerlink\" title=\"实验八：为集合类型属性赋值\"></a>实验八：为集合类型属性赋值</h3><h4 id=\"①为List集合类型属性赋值\"><a href=\"#①为List集合类型属性赋值\" class=\"headerlink\" title=\"①为List集合类型属性赋值\"></a>①为List集合类型属性赋值</h4><p>在Clazz类中添加以下代码：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> List&lt;Student&gt; students;</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">getStudents</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> students;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setStudents</span><span class=\"params\">(List&lt;Student&gt; students)</span> {</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.students = students;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置bean：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clazzTwo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Clazz\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4444\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Javaee0222\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"students\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"studentOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"studentTwo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"studentThree\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p>\n</blockquote>\n<h4 id=\"②为Map集合类型属性赋值\"><a href=\"#②为Map集合类型属性赋值\" class=\"headerlink\" title=\"②为Map集合类型属性赋值\"></a>②为Map集合类型属性赋值</h4><p>创建教师类Teacher：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Teacher</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer teacherId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String teacherName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getTeacherId</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> teacherId;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTeacherId</span><span class=\"params\">(Integer teacherId)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacherId = teacherId;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getTeacherName</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> teacherName;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTeacherName</span><span class=\"params\">(String teacherName)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacherName = teacherName;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Teacher</span><span class=\"params\">(Integer teacherId, String teacherName)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacherId = teacherId;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.teacherName = teacherName;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Teacher</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Teacher{\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"teacherId=\"</span> + teacherId +</span><br><span class=\"line\">            <span class=\"string\">\", teacherName='\"</span> + teacherName + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">'}'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在Student类中添加以下代码：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, Teacher&gt; teacherMap;</span><br><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String, Teacher&gt; <span class=\"title function_\">getTeacherMap</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> teacherMap;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTeacherMap</span><span class=\"params\">(Map&lt;String, Teacher&gt; teacherMap)</span> {</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.teacherMap = teacherMap;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>配置bean：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"teacherOne\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Teacher\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teacherId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10010\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teacherName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"大宝\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"teacherTwo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Teacher\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teacherId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10086\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teacherName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"二宝\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentFour\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1004\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"赵六\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"26\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"clazzOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobbies\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>抽烟<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>喝酒<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>烫头<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teacherMap\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>10010<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"teacherOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>10086<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"teacherTwo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③引用集合类型的bean\"><a href=\"#③引用集合类型的bean\" class=\"headerlink\" title=\"③引用集合类型的bean\"></a>③引用集合类型的bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--list集合类型的bean--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">util:list</span> <span class=\"attr\">id</span>=<span class=\"string\">\"students\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"studentOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"studentTwo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"studentThree\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">util:list</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--map集合类型的bean--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">util:map</span> <span class=\"attr\">id</span>=<span class=\"string\">\"teacherMap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>10010<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"teacherOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>10086<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ref</span> <span class=\"attr\">bean</span>=<span class=\"string\">\"teacherTwo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ref</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">util:map</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"clazzTwo\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Clazz\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzId\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4444\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazzName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Javaee0222\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"students\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"students\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentFour\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1004\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"赵六\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"26\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"clazz\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"clazzOne\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobbies\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>抽烟<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>喝酒<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>烫头<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">array</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"teacherMap\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"teacherMap\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>使用util:list、util:map标签必须引入相应的命名空间，可以通过idea的提示功能选择</p>\n</blockquote>\n<h3 id=\"实验九：p命名空间\"><a href=\"#实验九：p命名空间\" class=\"headerlink\" title=\"实验九：p命名空间\"></a>实验九：p命名空间</h3><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"studentSix\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.spring.bean.Student\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">p:id</span>=<span class=\"string\">\"1006\"</span> <span class=\"attr\">p:name</span>=<span class=\"string\">\"小明\"</span> <span class=\"attr\">p:clazz-ref</span>=<span class=\"string\">\"clazzOne\"</span> <span class=\"attr\">p:teacherMap-ref</span>=<span class=\"string\">\"teacherMap\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验十：引入外部属性文件\"><a href=\"#实验十：引入外部属性文件\" class=\"headerlink\" title=\"实验十：引入外部属性文件\"></a>实验十：引入外部属性文件</h3><h4 id=\"①加入依赖\"><a href=\"#①加入依赖\" class=\"headerlink\" title=\"①加入依赖\"></a>①加入依赖</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.31<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②创建外部属性文件\"><a href=\"#②创建外部属性文件\" class=\"headerlink\" title=\"②创建外部属性文件\"></a>②创建外部属性文件</h4><p>![10](C:/Users/zw/Desktop/ssm md格式笔记/img/10.png)</p>\n<figure class=\"highlight properties\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"string\">atguigu</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.driver</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③引入属性文件\"><a href=\"#③引入属性文件\" class=\"headerlink\" title=\"③引入属性文件\"></a>③引入属性文件</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④配置bean\"><a href=\"#④配置bean\" class=\"headerlink\" title=\"④配置bean\"></a>④配置bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"druidDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.url}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.driver}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.user}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.password}\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑤测试\"><a href=\"#⑤测试\" class=\"headerlink\" title=\"⑤测试\"></a>⑤测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDataSource</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException {</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"spring-datasource.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">DataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> ac.getBean(DataSource.class);</span><br><span class=\"line\">    <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection();</span><br><span class=\"line\">    System.out.println(connection);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验十一：bean的作用域\"><a href=\"#实验十一：bean的作用域\" class=\"headerlink\" title=\"实验十一：bean的作用域\"></a>实验十一：bean的作用域</h3><h4 id=\"①概念\"><a href=\"#①概念\" class=\"headerlink\" title=\"①概念\"></a>①概念</h4><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p>\n<table>\n<thead>\n<tr>\n<th><strong>取值</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>创建对象的时机</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>singleton（默认）</td>\n<td>在IOC容器中，这个bean的对象始终为单实例</td>\n<td>IOC容器初始化时</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>这个bean在IOC容器中有多个实例</td>\n<td>获取bean时</td>\n</tr>\n</tbody></table>\n<p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p>\n<table>\n<thead>\n<tr>\n<th><strong>取值</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>request</td>\n<td>在一个请求范围内有效</td>\n</tr>\n<tr>\n<td>session</td>\n<td>在一个会话范围内有效</td>\n</tr>\n</tbody></table>\n<h4 id=\"②创建类User\"><a href=\"#②创建类User\" class=\"headerlink\" title=\"②创建类User\"></a>②创建类User</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> {</span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"><span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(Integer id, String username, String password, Integer age)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getId</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Integer id)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUsername</span><span class=\"params\">(String username)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPassword</span><span class=\"params\">(String password)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User{\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">            <span class=\"string\">\", username='\"</span> + username + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">\", password='\"</span> + password + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">            <span class=\"string\">'}'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③配置bean\"><a href=\"#③配置bean\" class=\"headerlink\" title=\"③配置bean\"></a>③配置bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建</span></span><br><span class=\"line\"><span class=\"comment\">对象 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.bean.User\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④测试\"><a href=\"#④测试\" class=\"headerlink\" title=\"④测试\"></a>④测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBeanScope</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"spring-scope.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user1</span> <span class=\"operator\">=</span> ac.getBean(User.class);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> ac.getBean(User.class);</span><br><span class=\"line\">    System.out.println(user1==user2);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"实验十二：bean的生命周期\"><a href=\"#实验十二：bean的生命周期\" class=\"headerlink\" title=\"实验十二：bean的生命周期\"></a>实验十二：bean的生命周期</h3><h4 id=\"①具体的生命周期过程\"><a href=\"#①具体的生命周期过程\" class=\"headerlink\" title=\"①具体的生命周期过程\"></a>①具体的生命周期过程</h4><ul>\n<li>bean对象创建（调用无参构造器）</li>\n<li>给bean对象设置属性</li>\n<li>bean对象初始化之前操作（由bean的后置处理器负责）</li>\n<li>bean对象初始化（需在配置bean时指定初始化方法）</li>\n<li>bean对象初始化之后操作（由bean的后置处理器负责）</li>\n<li>bean对象就绪可以使用</li>\n<li>bean对象销毁（需在配置bean时指定销毁方法）</li>\n<li>IOC容器关闭</li>\n</ul>\n<h4 id=\"②修改类User\"><a href=\"#②修改类User\" class=\"headerlink\" title=\"②修改类User\"></a>②修改类User</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"生命周期：1、创建对象\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(Integer id, String username, String password, Integer age)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getId</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Integer id)</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"生命周期：2、依赖注入\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> username;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUsername</span><span class=\"params\">(String username)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.username = username;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> password;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPassword</span><span class=\"params\">(String password)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.password = password;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getAge</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(Integer age)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initMethod</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"生命周期：3、初始化\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroyMethod</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"生命周期：5、销毁\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User{\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"id=\"</span> + id +</span><br><span class=\"line\">            <span class=\"string\">\", username='\"</span> + username + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">\", password='\"</span> + password + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">            <span class=\"string\">\", age=\"</span> + age +</span><br><span class=\"line\">            <span class=\"string\">'}'</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p>\n</blockquote>\n<h4 id=\"③配置bean-1\"><a href=\"#③配置bean-1\" class=\"headerlink\" title=\"③配置bean\"></a>③配置bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.bean.User\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span> <span class=\"attr\">init-method</span>=<span class=\"string\">\"initMethod\"</span><span class=\"attr\">destroy-method</span>=<span class=\"string\">\"destroyMethod\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1001\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"admin\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"123456\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"age\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"23\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④测试-1\"><a href=\"#④测试-1\" class=\"headerlink\" title=\"④测试\"></a>④测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testLife</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ClassPathXmlApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> newClassPathXmlApplicationContext(<span class=\"string\">\"spring-lifecycle.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> ac.getBean(User.class);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"生命周期：4、通过IOC容器获取bean并使用\"</span>);</span><br><span class=\"line\">    ac.close();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑤bean的后置处理器\"><a href=\"#⑤bean的后置处理器\" class=\"headerlink\" title=\"⑤bean的后置处理器\"></a>⑤bean的后置处理器</h4><p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，</p>\n<p>且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</p>\n<p>创建bean的后置处理器：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.spring.process;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBeanProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> BeansException {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"☆☆☆\"</span> + beanName + <span class=\"string\">\" = \"</span> + bean);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> BeansException {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"★★★\"</span> + beanName + <span class=\"string\">\" = \"</span> + bean);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在IOC容器中配置后置处理器：</p>\n<blockquote>\n<!-- bean的后置处理器要放入IOC容器才能生效 -->\n\n<p>&lt;bean id=”myBeanProcessor”class=”com.atguigu.spring.process.MyBeanProcessor”/&gt;</p>\n</blockquote>\n<h3 id=\"实验十三：FactoryBean\"><a href=\"#实验十三：FactoryBean\" class=\"headerlink\" title=\"实验十三：FactoryBean\"></a>实验十三：FactoryBean</h3><h4 id=\"①简介\"><a href=\"#①简介\" class=\"headerlink\" title=\"①简介\"></a>①简介</h4><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个</p>\n<p>FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是</p>\n<p>getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p>\n<p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* Copyright 2002-2020 the original author or authors.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* Licensed under the Apache License, Version 2.0 (the \"License\");</span></span><br><span class=\"line\"><span class=\"comment\">* you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\">* You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">* distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\">* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\">* See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\">* limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> org.springframework.beans.factory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.lang.Nullable;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Interface to be implemented by objects used within a {<span class=\"doctag\">@link</span> BeanFactory}</span></span><br><span class=\"line\"><span class=\"comment\">which</span></span><br><span class=\"line\"><span class=\"comment\">* are themselves factories for individual objects. If a bean implements this</span></span><br><span class=\"line\"><span class=\"comment\">* interface, it is used as a factory for an object to expose, not directly as a</span></span><br><span class=\"line\"><span class=\"comment\">* bean instance that will be exposed itself.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal</span></span><br><span class=\"line\"><span class=\"comment\">bean.&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* A FactoryBean is defined in a bean style, but the object exposed for bean</span></span><br><span class=\"line\"><span class=\"comment\">* references ({<span class=\"doctag\">@link</span> #getObject()}) is always the object that it creates.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span></span><br><span class=\"line\"><span class=\"comment\">* objects lazily on demand or eagerly on startup. The {<span class=\"doctag\">@link</span> SmartFactoryBean}</span></span><br><span class=\"line\"><span class=\"comment\">* interface allows for exposing more fine-grained behavioral metadata.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;This interface is heavily used within the framework itself, for example</span></span><br><span class=\"line\"><span class=\"comment\">for</span></span><br><span class=\"line\"><span class=\"comment\">* the AOP {<span class=\"doctag\">@link</span> org.springframework.aop.framework.ProxyFactoryBean} or the</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@link</span> org.springframework.jndi.JndiObjectFactoryBean}. It can be used for</span></span><br><span class=\"line\"><span class=\"comment\">* custom components as well; however, this is only common for infrastructure</span></span><br><span class=\"line\"><span class=\"comment\">code.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;&lt;b&gt;{<span class=\"doctag\">@code</span> FactoryBean} is a programmatic contract. Implementations are not</span></span><br><span class=\"line\"><span class=\"comment\">* supposed to rely on annotation-driven injection or other reflective</span></span><br><span class=\"line\"><span class=\"comment\">facilities.&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@link</span> #getObjectType()} {<span class=\"doctag\">@link</span> #getObject()} invocations may arrive early in</span></span><br><span class=\"line\"><span class=\"comment\">the</span></span><br><span class=\"line\"><span class=\"comment\">* bootstrap process, even ahead of any post-processor setup. If you need access</span></span><br><span class=\"line\"><span class=\"comment\">to</span></span><br><span class=\"line\"><span class=\"comment\">* other beans, implement {<span class=\"doctag\">@link</span> BeanFactoryAware} and obtain them</span></span><br><span class=\"line\"><span class=\"comment\">programmatically.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the</span></span><br><span class=\"line\"><span class=\"comment\">FactoryBean</span></span><br><span class=\"line\"><span class=\"comment\">* instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt;</span></span><br><span class=\"line\"><span class=\"comment\">Therefore,</span></span><br><span class=\"line\"><span class=\"comment\">* a destroy method on an exposed bean object (such as {<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\">java.io.Closeable#close()}</span></span><br><span class=\"line\"><span class=\"comment\">* will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should</span></span><br><span class=\"line\"><span class=\"comment\">implement</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@link</span> DisposableBean} and delegate any such close call to the underlying</span></span><br><span class=\"line\"><span class=\"comment\">object.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory's</span></span><br><span class=\"line\"><span class=\"comment\">* synchronization of bean creation. There is usually no need for internal</span></span><br><span class=\"line\"><span class=\"comment\">* synchronization other than for purposes of lazy initialization within the</span></span><br><span class=\"line\"><span class=\"comment\">* FactoryBean itself (or the like).</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Rod Johnson</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span> Juergen Hoeller</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@since</span> 08.03.2003</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> &lt;T&gt; the bean type</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> org.springframework.beans.factory.BeanFactory</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FactoryBean</span>&lt;T&gt; {</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The name of an attribute that can be</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@link</span> org.springframework.core.AttributeAccessor#setAttribute set} on a</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@link</span> org.springframework.beans.factory.config.BeanDefinition} so that</span></span><br><span class=\"line\"><span class=\"comment\">* factory beans can signal their object type when it can't be deduced from</span></span><br><span class=\"line\"><span class=\"comment\">* the factory bean class.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@since</span> 5.2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">OBJECT_TYPE_ATTRIBUTE</span> <span class=\"operator\">=</span> <span class=\"string\">\"factoryBeanObjectType\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Return an instance (possibly shared or independent) of the object</span></span><br><span class=\"line\"><span class=\"comment\">* managed by this factory.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;As with a {<span class=\"doctag\">@link</span> BeanFactory}, this allows support for both the</span></span><br><span class=\"line\"><span class=\"comment\">* Singleton and Prototype design pattern.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span></span><br><span class=\"line\"><span class=\"comment\">* the call (for example because it is involved in a circular reference),</span></span><br><span class=\"line\"><span class=\"comment\">* throw a corresponding {<span class=\"doctag\">@link</span> FactoryBeanNotInitializedException}.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return {<span class=\"doctag\">@code</span> null}</span></span><br><span class=\"line\"><span class=\"comment\">* objects. The factory will consider this as normal value to be used; it</span></span><br><span class=\"line\"><span class=\"comment\">* will not throw a FactoryBeanNotInitializedException in this case anymore.</span></span><br><span class=\"line\"><span class=\"comment\">* FactoryBean implementations are encouraged to throw</span></span><br><span class=\"line\"><span class=\"comment\">* FactoryBeanNotInitializedException themselves now, as appropriate.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> an instance of the bean (can be {<span class=\"doctag\">@code</span> null})</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@throws</span> Exception in case of creation errors</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> FactoryBeanNotInitializedException</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    T <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Return the type of object that this FactoryBean creates,</span></span><br><span class=\"line\"><span class=\"comment\">* or {<span class=\"doctag\">@code</span> null} if not known in advance.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;This allows one to check for specific types of beans without</span></span><br><span class=\"line\"><span class=\"comment\">* instantiating objects, for example on autowiring.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;In the case of implementations that are creating a singleton object,</span></span><br><span class=\"line\"><span class=\"comment\">* this method should try to avoid singleton creation as far as possible;</span></span><br><span class=\"line\"><span class=\"comment\">* it should rather estimate the type in advance.</span></span><br><span class=\"line\"><span class=\"comment\">* For prototypes, returning a meaningful type here is advisable too.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span></span><br><span class=\"line\"><span class=\"comment\">* been fully initialized. It must not rely on state created during</span></span><br><span class=\"line\"><span class=\"comment\">* initialization; of course, it can still use such state if available.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;&lt;b&gt;<span class=\"doctag\">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@code</span> null} here. Therefore it is highly recommended to implement</span></span><br><span class=\"line\"><span class=\"comment\">* this method properly, using the current state of the FactoryBean.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> the type of object that this FactoryBean creates,</span></span><br><span class=\"line\"><span class=\"comment\">* or {<span class=\"doctag\">@code</span> null} if not known at the time of the call</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> ListableBeanFactory#getBeansOfType</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    Class&lt;?&gt; getObjectType();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Is the object managed by this factory a singleton? That is,</span></span><br><span class=\"line\"><span class=\"comment\">* will {<span class=\"doctag\">@link</span> #getObject()} always return the same object</span></span><br><span class=\"line\"><span class=\"comment\">* (a reference that can be cached)?</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;&lt;b&gt;<span class=\"doctag\">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span></span><br><span class=\"line\"><span class=\"comment\">* the object returned from {<span class=\"doctag\">@code</span> getObject()} might get cached</span></span><br><span class=\"line\"><span class=\"comment\">* by the owning BeanFactory. Hence, do not return {<span class=\"doctag\">@code</span> true}</span></span><br><span class=\"line\"><span class=\"comment\">* unless the FactoryBean always exposes the same reference.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;The singleton status of the FactoryBean itself will generally</span></span><br><span class=\"line\"><span class=\"comment\">* be provided by the owning BeanFactory; usually, it has to be</span></span><br><span class=\"line\"><span class=\"comment\">* defined as singleton there.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;&lt;b&gt;<span class=\"doctag\">NOTE:</span>&lt;/b&gt; This method returning {<span class=\"doctag\">@code</span> false} does not</span></span><br><span class=\"line\"><span class=\"comment\">* necessarily indicate that returned objects are independent instances.</span></span><br><span class=\"line\"><span class=\"comment\">* An implementation of the extended {<span class=\"doctag\">@link</span> SmartFactoryBean} interface</span></span><br><span class=\"line\"><span class=\"comment\">* may explicitly indicate independent instances through its</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@link</span> SmartFactoryBean#isPrototype()} method. Plain {<span class=\"doctag\">@link</span> FactoryBean}</span></span><br><span class=\"line\"><span class=\"comment\">* implementations which do not implement this extended interface are</span></span><br><span class=\"line\"><span class=\"comment\">* simply assumed to always return independent instances if the</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@code</span> isSingleton()} implementation returns {<span class=\"doctag\">@code</span> false}.</span></span><br><span class=\"line\"><span class=\"comment\">* &lt;p&gt;The default implementation returns {<span class=\"doctag\">@code</span> true}, since a</span></span><br><span class=\"line\"><span class=\"comment\">* {<span class=\"doctag\">@code</span> FactoryBean} typically manages a singleton instance.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> whether the exposed object is a singleton</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> #getObject()</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@see</span> SmartFactoryBean#isPrototype()</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②创建类UserFactoryBean\"><a href=\"#②创建类UserFactoryBean\" class=\"headerlink\" title=\"②创建类UserFactoryBean\"></a>②创建类UserFactoryBean</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">FactoryBean</span>&lt;User&gt; {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User.class;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③配置bean-2\"><a href=\"#③配置bean-2\" class=\"headerlink\" title=\"③配置bean\"></a>③配置bean</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.bean.UserFactoryBean\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④测试-2\"><a href=\"#④测试-2\" class=\"headerlink\" title=\"④测试\"></a>④测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUserFactoryBean</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"comment\">//获取IOC容器</span></span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"spring\u0002factorybean.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> (User) ac.getBean(<span class=\"string\">\"user\"</span>);</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-2-14、实验十四：基于xml的自动装配\"><a href=\"#2-2-14、实验十四：基于xml的自动装配\" class=\"headerlink\" title=\"2.2.14、实验十四：基于xml的自动装配\"></a>2.2.14、实验十四：基于xml的自动装配</h4><blockquote>\n<p>自动装配：</p>\n<p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类</p>\n<p>型属性赋值</p>\n</blockquote>\n<h4 id=\"①场景模拟\"><a href=\"#①场景模拟\" class=\"headerlink\" title=\"①场景模拟\"></a>①场景模拟</h4><p>创建类UserController</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserService</span><span class=\"params\">(UserService userService)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userService = userService;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        userService.saveUser();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建接口UserService</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建类UserServiceImpl实现接口UserService</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserDao</span><span class=\"params\">(UserDao userDao)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userDao = userDao;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        userDao.saveUser();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建接口UserDao</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建类UserDaoImpl实现接口UserDao</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDao</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"保存成功\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②配置bean-2\"><a href=\"#②配置bean-2\" class=\"headerlink\" title=\"②配置bean\"></a>②配置bean</h4><blockquote>\n<p>使用bean标签的autowire属性设置自动装配效果</p>\n<p>自动装配方式：byType</p>\n<p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p>\n<p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值</p>\n<p>null</p>\n<p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常</p>\n<p>NoUniqueBeanDefinitionException</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userController\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.controller.UserController\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.service.impl.UserServiceImpl\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.dao.impl.UserDaoImpl\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>自动装配方式：byName</p>\n<p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userController\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.controller.UserController\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.service.impl.UserServiceImpl\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userServiceImpl\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.service.impl.UserServiceImpl\"</span> <span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDao\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.dao.impl.UserDaoImpl\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userDaoImpl\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.atguigu.autowire.xml.dao.impl.UserDaoImpl\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③测试-2\"><a href=\"#③测试-2\" class=\"headerlink\" title=\"③测试\"></a>③测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAutoWireByXML</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"autowire-xml.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">UserController</span> <span class=\"variable\">userController</span> <span class=\"operator\">=</span> ac.getBean(UserController.class);</span><br><span class=\"line\">    userController.saveUser();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"基于注解管理bean\"><a href=\"#基于注解管理bean\" class=\"headerlink\" title=\"基于注解管理bean\"></a>基于注解管理bean</h2><h3 id=\"实验一：标记与扫描\"><a href=\"#实验一：标记与扫描\" class=\"headerlink\" title=\"实验一：标记与扫描\"></a>实验一：标记与扫描</h3><h4 id=\"①注解\"><a href=\"#①注解\" class=\"headerlink\" title=\"①注解\"></a>①注解</h4><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测</p>\n<p>到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p>\n<p>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行。</p>\n<p>举例：元旦联欢会要布置教室，蓝色的地方贴上元旦快乐四个字，红色的地方贴上拉花，黄色的地方贴上气球。</p>\n<p>![11](C:/Users/zw/Desktop/ssm md格式笔记/img/11.png)</p>\n<p>班长做了所有标记，同学们来完成具体工作。墙上的标记相当于我们在代码中使用的注解，后面同学们做的工作，相当于框架的具体操作。</p>\n<h4 id=\"②扫描\"><a href=\"#②扫描\" class=\"headerlink\" title=\"②扫描\"></a>②扫描</h4><p>Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。</p>\n<h4 id=\"③新建Maven-Module\"><a href=\"#③新建Maven-Module\" class=\"headerlink\" title=\"③新建Maven Module\"></a>③新建Maven Module</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- junit测试 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④创建Spring配置文件\"><a href=\"#④创建Spring配置文件\" class=\"headerlink\" title=\"④创建Spring配置文件\"></a>④创建Spring配置文件</h4><p>![12](C:/Users/zw/Desktop/ssm md格式笔记/img/12.png)</p>\n<h4 id=\"⑤标识组件的常用注解\"><a href=\"#⑤标识组件的常用注解\" class=\"headerlink\" title=\"⑤标识组件的常用注解\"></a>⑤标识组件的常用注解</h4><blockquote>\n<p>@Component：将类标识为普通组件</p>\n<p>@Controller：将类标识为控制层组件</p>\n<p>@Service：将类标识为业务层组件 </p>\n<p>@Repository：将类标识为持久层组件</p>\n</blockquote>\n<p>问：以上四个注解有什么关系和区别？</p>\n<p>![13](C:/Users/zw/Desktop/ssm md格式笔记/img/13.png)</p>\n<p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。</p>\n<p>对于Spring使用IOC容器管理这些组件来说没有区别。所以@Controller、@Service、@Repository这</p>\n<p>三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p>\n<p>注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p>\n<h4 id=\"⑥创建组件\"><a href=\"#⑥创建组件\" class=\"headerlink\" title=\"⑥创建组件\"></a>⑥创建组件</h4><p>创建控制层组件</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> {</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建接口UserService</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> {</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建业务层组件UserServiceImpl</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> {</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建接口UserDao</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> {</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建持久层组件UserDaoImpl</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDao</span> {</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑦扫描组件\"><a href=\"#⑦扫描组件\" class=\"headerlink\" title=\"⑦扫描组件\"></a>⑦扫描组件</h4><p>情况一：最基本的扫描方式</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.atguigu\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>情况二：指定要排除的组件</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.atguigu\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        type：设置排除或包含的依据</span></span><br><span class=\"line\"><span class=\"comment\">        type=\"annotation\"，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class=\"line\"><span class=\"comment\">        type=\"assignable\"，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:exclude-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"annotation\"</span><span class=\"attr\">expression</span>=<span class=\"string\">\"org.springframework.stereotype.Controller\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;context:exclude-filter type=\"assignable\"expression=\"com.atguigu.controller.UserController\"/&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>情况三：仅扫描指定组件</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.atguigu\"</span> <span class=\"attr\">use-default-filters</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 此时必须设置use-default-filters=\"false\"，因为默认规则即扫描指定包下所有类 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        type：设置排除或包含的依据</span></span><br><span class=\"line\"><span class=\"comment\">        type=\"annotation\"，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class=\"line\"><span class=\"comment\">        type=\"assignable\"，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:include-filter</span> <span class=\"attr\">type</span>=<span class=\"string\">\"annotation\"</span><span class=\"attr\">expression</span>=<span class=\"string\">\"org.springframework.stereotype.Controller\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;context:include-filter type=\"assignable\"expression=\"com.atguigu.controller.UserController\"/&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑧测试\"><a href=\"#⑧测试\" class=\"headerlink\" title=\"⑧测试\"></a>⑧测试</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAutowireByAnnotation</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">ac</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">        <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">\"applicationContext.xml\"</span>);</span><br><span class=\"line\">    <span class=\"type\">UserController</span> <span class=\"variable\">userController</span> <span class=\"operator\">=</span> ac.getBean(UserController.class);</span><br><span class=\"line\">    System.out.println(userController);</span><br><span class=\"line\">    <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> ac.getBean(UserService.class);</span><br><span class=\"line\">    System.out.println(userService);</span><br><span class=\"line\">    <span class=\"type\">UserDao</span> <span class=\"variable\">userDao</span> <span class=\"operator\">=</span> ac.getBean(UserDao.class);</span><br><span class=\"line\">    System.out.println(userDao);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑨组件所对应的bean的id\"><a href=\"#⑨组件所对应的bean的id\" class=\"headerlink\" title=\"⑨组件所对应的bean的id\"></a>⑨组件所对应的bean的id</h4><p>在我们使用XML方式管理bean的时候，每个bean都有一个唯一标识，便于在其他地方引用。现在使用</p>\n<p>注解后，每个组件仍然应该有一个唯一标识。</p>\n<blockquote>\n<p>默认情况</p>\n<p>类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。</p>\n<p>自定义bean的id</p>\n<p>可通过标识组件的注解的value属性设置自定义的bean的id</p>\n<p>@Service(“userService”)//默认为userServiceImpl public class UserServiceImpl implements</p>\n<p>UserService {}</p>\n</blockquote>\n<h3 id=\"实验二：基于注解的自动装配\"><a href=\"#实验二：基于注解的自动装配\" class=\"headerlink\" title=\"实验二：基于注解的自动装配\"></a>实验二：基于注解的自动装配</h3><h4 id=\"①场景模拟-1\"><a href=\"#①场景模拟-1\" class=\"headerlink\" title=\"①场景模拟\"></a>①场景模拟</h4><blockquote>\n<p>参考基于xml的自动装配</p>\n<p>在UserController中声明UserService对象</p>\n<p>在UserServiceImpl中声明UserDao对象</p>\n</blockquote>\n<h4 id=\"②-Autowired注解\"><a href=\"#②-Autowired注解\" class=\"headerlink\" title=\"②@Autowired注解\"></a>②@Autowired注解</h4><p>在成员变量上直接标记@Autowired注解即可完成自动装配，不需要提供setXxx()方法。以后我们在项</p>\n<p>目中的正式用法就是这样。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        userService.saveUser();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> {</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        userDao.saveUser();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>;</span><br><span class=\"line\">}\t</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">UserDao</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"保存成功\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③-Autowired注解其他细节\"><a href=\"#③-Autowired注解其他细节\" class=\"headerlink\" title=\"③@Autowired注解其他细节\"></a>③@Autowired注解其他细节</h4><blockquote>\n<p>@Autowired注解可以标记在构造器和set方法上</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserController</span><span class=\"params\">(UserService userService)</span>{</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userService = userService;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        userService.saveUser();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserService</span><span class=\"params\">(UserService userService)</span>{</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userService = userService;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        userService.saveUser();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④-Autowired工作流程\"><a href=\"#④-Autowired工作流程\" class=\"headerlink\" title=\"④@Autowired工作流程\"></a>④@Autowired工作流程</h4><p>![14](C:/Users/zw/Desktop/ssm md格式笔记/img/14.png)</p>\n<ul>\n<li>首先根据所需要的组件类型到IOC容器中查找<ul>\n<li>能够找到唯一的bean：直接执行装配</li>\n<li>如果完全找不到匹配这个类型的bean：装配失败</li>\n<li>和所需类型匹配的bean不止一个<ul>\n<li>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配</li>\n<li>能够找到：执行装配</li>\n<li>找不到：装配失败</li>\n<li>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配</li>\n<li>能够找到：执行装配</li>\n<li>找不到：装配失败</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"meta\">@Qualifier(\"userServiceImpl\")</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserService userService;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        userService.saveUser();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>@Autowired中有属性required，默认值为true，因此在自动装配无法找到相应的bean时，会装</p>\n<p>配失败</p>\n<p>可以将属性required的值设置为true，则表示能装就装，装不上就不装，此时自动装配的属性为</p>\n<p>默认值</p>\n<p>但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性。</p>\n</blockquote>\n<h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><h2 id=\"场景模拟\"><a href=\"#场景模拟\" class=\"headerlink\" title=\"场景模拟\"></a>场景模拟</h2><h3 id=\"声明接口\"><a href=\"#声明接口\" class=\"headerlink\" title=\"声明接口\"></a>声明接口</h3><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Calculator</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"创建实现类\"><a href=\"#创建实现类\" class=\"headerlink\" title=\"创建实现类\"></a>创建实现类</h3><p>![15](C:/Users/zw/Desktop/ssm md格式笔记/img/15.png)</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorPureImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Calculator</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i + j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i - j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i * j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i / j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"创建带日志功能的实现类\"><a href=\"#创建带日志功能的实现类\" class=\"headerlink\" title=\"创建带日志功能的实现类\"></a>创建带日志功能的实现类</h3><p>![16](C:/Users/zw/Desktop/ssm md格式笔记/img/16.png)</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorLogImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Calculator</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] add 方法开始了，参数是：\"</span> + i + <span class=\"string\">\",\"</span> + j);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i + j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] add 方法结束了，结果是：\"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] sub 方法开始了，参数是：\"</span> + i + <span class=\"string\">\",\"</span> + j);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i - j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] sub 方法结束了，结果是：\"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] mul 方法开始了，参数是：\"</span> + i + <span class=\"string\">\",\"</span> + j);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i * j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] mul 方法结束了，结果是：\"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] div 方法开始了，参数是：\"</span> + i + <span class=\"string\">\",\"</span> + j);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i / j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] div 方法结束了，结果是：\"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"提出问题\"><a href=\"#提出问题\" class=\"headerlink\" title=\"提出问题\"></a>提出问题</h3><h4 id=\"①现有代码缺陷\"><a href=\"#①现有代码缺陷\" class=\"headerlink\" title=\"①现有代码缺陷\"></a>①现有代码缺陷</h4><p>针对带日志功能的实现类，我们发现有如下缺陷：</p>\n<ul>\n<li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li>\n<li>附加功能分散在各个业务功能方法中，不利于统一维护</li>\n</ul>\n<h4 id=\"②解决思路\"><a href=\"#②解决思路\" class=\"headerlink\" title=\"②解决思路\"></a>②解决思路</h4><p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p>\n<h4 id=\"③困难\"><a href=\"#③困难\" class=\"headerlink\" title=\"③困难\"></a>③困难</h4><p>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。所以需要引入新的技术。</p>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><h4 id=\"①介绍\"><a href=\"#①介绍\" class=\"headerlink\" title=\"①介绍\"></a>①介绍</h4><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p>\n<p>![17](C:/Users/zw/Desktop/ssm md格式笔记/img/17.png)</p>\n<p>使用代理后：</p>\n<p>![18](C:/Users/zw/Desktop/ssm md格式笔记/img/18.png)</p>\n<h4 id=\"②生活中的代理\"><a href=\"#②生活中的代理\" class=\"headerlink\" title=\"②生活中的代理\"></a>②生活中的代理</h4><ul>\n<li>广告商找大明星拍广告需要经过经纪人</li>\n<li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li>\n<li>房产中介是买卖双方的代理</li>\n</ul>\n<h4 id=\"③相关术语\"><a href=\"#③相关术语\" class=\"headerlink\" title=\"③相关术语\"></a>③相关术语</h4><ul>\n<li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li>\n<li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li>\n</ul>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>创建静态代理类：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorStaticProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Calculator</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 将被代理的目标对象声明为成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Calculator target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CalculatorStaticProxy</span><span class=\"params\">(Calculator target)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"comment\">// 附加功能由代理类中的代理方法来实现</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] add 方法开始了，参数是：\"</span> + i + <span class=\"string\">\",\"</span> + j);</span><br><span class=\"line\">        <span class=\"comment\">// 通过目标对象来实现核心业务逻辑</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">addResult</span> <span class=\"operator\">=</span> target.add(i, j);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[日志] add 方法结束了，结果是：\"</span> + addResult);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> addResult;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来</p>\n<p>说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代</p>\n<p>码，日志功能还是分散的，没有统一管理。</p>\n<p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理</p>\n<p>类来实现。这就需要使用动态代理技术了。</p>\n</blockquote>\n<h3 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h3><p>![19](C:/Users/zw/Desktop/ssm md格式笔记/img/19.png)</p>\n<p>生产代理对象的工厂类：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxyFactory</span><span class=\"params\">(Object target)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxy</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * newProxyInstance()：创建一个代理实例</span></span><br><span class=\"line\"><span class=\"comment\">         * 其中有三个参数：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class=\"line\"><span class=\"comment\">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class=\"line\"><span class=\"comment\">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> target.getClass().getClassLoader();</span><br><span class=\"line\">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class=\"line\">        <span class=\"type\">InvocationHandler</span> <span class=\"variable\">invocationHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() {</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span></span><br><span class=\"line\">                <span class=\"keyword\">throws</span> Throwable {</span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * proxy：代理对象</span></span><br><span class=\"line\"><span class=\"comment\">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class=\"line\"><span class=\"comment\">                 * args：method所对应方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> {</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"[动态代理][日志] \"</span>+method.getName()+<span class=\"string\">\"，参数：\"</span>+ Arrays.toString(args));</span><br><span class=\"line\">                     result = method.invoke(target, args);</span><br><span class=\"line\">                     System.out.println(<span class=\"string\">\"[动态代理][日志] \"</span>+method.getName()+<span class=\"string\">\"，结 果：\"</span>+ result);</span><br><span class=\"line\">                 } <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">                   System.out.println(<span class=\"string\">\"[动态代理][日志] \"</span>+method.getName()+<span class=\"string\">\"，异常：\"</span>+e.getMessage());</span><br><span class=\"line\">                  } <span class=\"keyword\">finally</span> {</span><br><span class=\"line\">                      System.out.println(<span class=\"string\">\"[动态代理][日志] \"</span>+method.getName()+<span class=\"string\">\"，方法执行完毕\"</span>);</span><br><span class=\"line\">                  }</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">               }   </span><br><span class=\"line\">            };    </span><br><span class=\"line\">            <span class=\"keyword\">return</span> Proxy.newProxyInstance(classLoader, interfaces,invocationHandler);</span><br><span class=\"line\">      }</span><br><span class=\"line\">}                                     </span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testDynamicProxy</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">ProxyFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">CalculatorLogImpl</span>());</span><br><span class=\"line\">    <span class=\"type\">Calculator</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Calculator) factory.getProxy();</span><br><span class=\"line\">    proxy.div(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">//proxy.div(1,1);</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"AOP概念及相关术语\"><a href=\"#AOP概念及相关术语\" class=\"headerlink\" title=\"AOP概念及相关术语\"></a>AOP概念及相关术语</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术。</p>\n<h3 id=\"相关术语\"><a href=\"#相关术语\" class=\"headerlink\" title=\"相关术语\"></a>相关术语</h3><h4 id=\"①横切关注点\"><a href=\"#①横切关注点\" class=\"headerlink\" title=\"①横切关注点\"></a>①横切关注点</h4><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p>\n<p>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。![20](C:/Users/zw/Desktop/ssm md格式笔记/img/20.png)</p>\n<h4 id=\"②通知\"><a href=\"#②通知\" class=\"headerlink\" title=\"②通知\"></a>②通知</h4><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p>\n<ul>\n<li>前置通知：在被代理的目标方法<strong>前</strong>执行</li>\n<li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li>\n<li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li>\n<li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li>\n<li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所</li>\n</ul>\n<p>有位置![21](C:/Users/zw/Desktop/ssm md格式笔记/img/21.png)</p>\n<h4 id=\"③切面\"><a href=\"#③切面\" class=\"headerlink\" title=\"③切面\"></a>③切面</h4><p>封装通知方法的类。![22](C:/Users/zw/Desktop/ssm md格式笔记/img/22.png)</p>\n<h4 id=\"④目标\"><a href=\"#④目标\" class=\"headerlink\" title=\"④目标\"></a>④目标</h4><p>被代理的目标对象。</p>\n<h4 id=\"⑤代理\"><a href=\"#⑤代理\" class=\"headerlink\" title=\"⑤代理\"></a>⑤代理</h4><p>向目标对象应用通知之后创建的代理对象。</p>\n<h4 id=\"⑥连接点\"><a href=\"#⑥连接点\" class=\"headerlink\" title=\"⑥连接点\"></a>⑥连接点</h4><p>这也是一个纯逻辑概念，不是语法定义的。</p>\n<p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。</p>\n<p>![23](C:/Users/zw/Desktop/ssm md格式笔记/img/23.png)</p>\n<h4 id=\"⑦切入点\"><a href=\"#⑦切入点\" class=\"headerlink\" title=\"⑦切入点\"></a>⑦切入点</h4><p>定位连接点的方式。</p>\n<p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p>\n<p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p>\n<p>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。</p>\n<p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条</p>\n<p>件。</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p>\n</li>\n<li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p>\n</li>\n</ul>\n<h2 id=\"基于注解的AOP\"><a href=\"#基于注解的AOP\" class=\"headerlink\" title=\"基于注解的AOP\"></a>基于注解的AOP</h2><h3 id=\"技术说明\"><a href=\"#技术说明\" class=\"headerlink\" title=\"技术说明\"></a>技术说明</h3><p>![24](C:/Users/zw/Desktop/ssm md格式笔记/img/24.png)</p>\n<ul>\n<li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因</li>\n</ul>\n<p>为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</p>\n<ul>\n<li><p>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</p>\n</li>\n<li><p>AspectJ：本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</p>\n</li>\n</ul>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"①添加依赖\"><a href=\"#①添加依赖\" class=\"headerlink\" title=\"①添加依赖\"></a>①添加依赖</h4><p>在IOC所需依赖基础上再加入下面依赖即可：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②准备被代理的目标资源\"><a href=\"#②准备被代理的目标资源\" class=\"headerlink\" title=\"②准备被代理的目标资源\"></a>②准备被代理的目标资源</h4><p>接口：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Calculator</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>实现类：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CalculatorPureImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Calculator</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i + j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sub</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i - j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">mul</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i * j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">div</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> {</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> i / j;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法内部 result = \"</span> + result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"创建切面类并配置\"><a href=\"#创建切面类并配置\" class=\"headerlink\" title=\"创建切面类并配置\"></a>创建切面类并配置</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// @Aspect表示这个类是一个切面类</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"comment\">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LogAspect</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Before(\"execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeMethod</span><span class=\"params\">(JoinPoint joinPoint)</span>{</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">args</span> <span class=\"operator\">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"Logger--&gt;前置通知，方法名：\"</span>+methodName+<span class=\"string\">\"，参数：\"</span>+args);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">    <span class=\"meta\">@After(\"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))\")</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterMethod</span><span class=\"params\">(JoinPoint joinPoint)</span>{</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Logger--&gt;后置通知，方法名：\"</span>+methodName);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = \"execution(*com.atguigu.aop.annotation.CalculatorImpl.*(..))\", returning = \"result\")</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningMethod</span><span class=\"params\">(JoinPoint joinPoint, Object result)</span>{</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Logger--&gt;返回通知，方法名：\"</span>+methodName+<span class=\"string\">\"，结果：\"</span>+result);</span><br><span class=\"line\">\t} </span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(value = \"execution(*com.atguigu.aop.annotation.CalculatorImpl.*(..))\", throwing = \"ex\")</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowingMethod</span><span class=\"params\">(JoinPoint joinPoint, Throwable ex)</span>{</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Logger--&gt;异常通知，方法名：\"</span>+methodName+<span class=\"string\">\"，异常：\"</span>+ex);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">    <span class=\"meta\">@Around(\"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))\")</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">aroundMethod</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span>{</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">args</span> <span class=\"operator\">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法执行之前\"</span>);</span><br><span class=\"line\">            <span class=\"comment\">//目标对象（连接点）方法的执行</span></span><br><span class=\"line\">            result = joinPoint.proceed();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法返回值之后\"</span>);</span><br><span class=\"line\">\t\t} <span class=\"keyword\">catch</span> (Throwable throwable) {</span><br><span class=\"line\">            throwable.printStackTrace();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法出现异常时\"</span>);</span><br><span class=\"line\">\t\t} <span class=\"keyword\">finally</span> {</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法执行完毕\"</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在Spring的配置文件中配置：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        基于注解的AOP的实现：</span></span><br><span class=\"line\"><span class=\"comment\">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span></span><br><span class=\"line\"><span class=\"comment\">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span></span><br><span class=\"line\"><span class=\"comment\">        3、将切面类通过注解@Aspect标识</span></span><br><span class=\"line\"><span class=\"comment\">\t--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.atguigu.aop.annotation\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"各种通知\"><a href=\"#各种通知\" class=\"headerlink\" title=\"各种通知\"></a>各种通知</h3><ul>\n<li>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行</li>\n<li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li>\n<li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li>\n<li>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li>\n<li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包</li>\n</ul>\n<p>括上面四种通知对应的所有位置</p>\n<blockquote>\n<p>各种通知的执行顺序：</p>\n<ul>\n<li>Spring版本5.3.x以前：<ul>\n<li>前置通知</li>\n<li>目标操作</li>\n<li>后置通知</li>\n<li>返回通知或异常通知</li>\n</ul>\n</li>\n<li>Spring版本5.3.x以后：<ul>\n<li>前置通知</li>\n<li>目标操作</li>\n<li>返回通知或异常通知</li>\n<li>后置通知</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"切入点表达式语法\"><a href=\"#切入点表达式语法\" class=\"headerlink\" title=\"切入点表达式语法\"></a>切入点表达式语法</h3><h4 id=\"①作用\"><a href=\"#①作用\" class=\"headerlink\" title=\"①作用\"></a>①作用</h4><p>![25](C:/Users/zw/Desktop/ssm md格式笔记/img/25.png)</p>\n<h4 id=\"②语法细节\"><a href=\"#②语法细节\" class=\"headerlink\" title=\"②语法细节\"></a>②语法细节</h4><ul>\n<li>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</li>\n<li>在包名的部分，一个“<em>”号只能代表包的层次结构中的一层，表示这一层是任意的。</em><ul>\n<li><em>例如：</em>.Hello匹配com.Hello，不匹配com.atguigu.Hello</li>\n</ul>\n</li>\n<li>在包名的部分，使用“*..”表示包名任意、包的层次深度任意*</li>\n<li><em>在类名的部分，类名部分整体用</em>号代替，表示类名任意</li>\n<li>在类名的部分，可以使用<em>号代替类名的一部分</em><ul>\n<li><em>例如：</em>Service匹配所有名称以Service结尾的类或接口</li>\n</ul>\n</li>\n<li>在方法名部分，可以使用<em>号表示方法名任意</em></li>\n<li><em>在方法名部分，可以使用</em>号代替方法名的一部分<ul>\n<li>例如：*Operation匹配所有方法名以Operation结尾的方法</li>\n</ul>\n</li>\n<li>​    在方法参数列表部分，使用(..)表示参数列表任意</li>\n<li>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</li>\n<li>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的<ul>\n<li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li>\n</ul>\n</li>\n<li>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符<ul>\n<li>例如：execution(public int <em>..<em>Service.</em>(.., int)) 正确</em></li>\n<li><em>例如：execution(</em> int *..<em>Service.</em>(.., int)) 错误</li>\n</ul>\n</li>\n</ul>\n<p>![26](C:/Users/zw/Desktop/ssm md格式笔记/img/26.png)</p>\n<h3 id=\"重用切入点表达式\"><a href=\"#重用切入点表达式\" class=\"headerlink\" title=\"重用切入点表达式\"></a>重用切入点表达式</h3><h4 id=\"①声明\"><a href=\"#①声明\" class=\"headerlink\" title=\"①声明\"></a>①声明</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut(\"execution(* com.atguigu.aop.annotation.*.*(..))\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pointCut</span><span class=\"params\">()</span>{}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②在同一个切面中使用\"><a href=\"#②在同一个切面中使用\" class=\"headerlink\" title=\"②在同一个切面中使用\"></a>②在同一个切面中使用</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before(\"pointCut()\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeMethod</span><span class=\"params\">(JoinPoint joinPoint)</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">args</span> <span class=\"operator\">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Logger--&gt;前置通知，方法名：\"</span>+methodName+<span class=\"string\">\"，参数：\"</span>+args);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③在不同切面中使用\"><a href=\"#③在不同切面中使用\" class=\"headerlink\" title=\"③在不同切面中使用\"></a>③在不同切面中使用</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before(\"com.atguigu.aop.CommonPointCut.pointCut()\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeMethod</span><span class=\"params\">(JoinPoint joinPoint)</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">args</span> <span class=\"operator\">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Logger--&gt;前置通知，方法名：\"</span>+methodName+<span class=\"string\">\"，参数：\"</span>+args);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"获取通知的相关信息\"><a href=\"#获取通知的相关信息\" class=\"headerlink\" title=\"获取通知的相关信息\"></a>获取通知的相关信息</h3><h4 id=\"①获取连接点信息\"><a href=\"#①获取连接点信息\" class=\"headerlink\" title=\"①获取连接点信息\"></a>①获取连接点信息</h4><p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before(\"execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeMethod</span><span class=\"params\">(JoinPoint joinPoint)</span>{</span><br><span class=\"line\">    <span class=\"comment\">//获取连接点的签名信息</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">    <span class=\"comment\">//获取目标方法到的实参信息</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">args</span> <span class=\"operator\">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Logger--&gt;前置通知，方法名：\"</span>+methodName+<span class=\"string\">\"，参数：\"</span>+args);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②获取目标方法的返回值\"><a href=\"#②获取目标方法的返回值\" class=\"headerlink\" title=\"②获取目标方法的返回值\"></a>②获取目标方法的返回值</h4><p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterReturning(value = \"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))\", returning = \"result\")</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturningMethod</span><span class=\"params\">(JoinPoint joinPoint, Object result)</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Logger--&gt;返回通知，方法名：\"</span>+methodName+<span class=\"string\">\"，结果：\"</span>+result);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③获取目标方法的异常\"><a href=\"#③获取目标方法的异常\" class=\"headerlink\" title=\"③获取目标方法的异常\"></a>③获取目标方法的异常</h4><p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AfterThrowing(value = \"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))\", throwing = \"ex\")</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowingMethod</span><span class=\"params\">(JoinPoint joinPoint, Throwable ex)</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Logger--&gt;异常通知，方法名：\"</span>+methodName+<span class=\"string\">\"，异常：\"</span>+ex);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"环绕通知\"><a href=\"#环绕通知\" class=\"headerlink\" title=\"环绕通知\"></a>环绕通知</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around(\"execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">aroundMethod</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">args</span> <span class=\"operator\">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法执行之前\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span></span><br><span class=\"line\">        result = joinPoint.proceed();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法返回值之后\"</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">catch</span> (Throwable throwable) {</span><br><span class=\"line\">        throwable.printStackTrace();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法出现异常时\"</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">finally</span> {</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"环绕通知--&gt;目标对象方法执行完毕\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"切面的优先级\"><a href=\"#切面的优先级\" class=\"headerlink\" title=\"切面的优先级\"></a>切面的优先级</h3><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p>\n<ul>\n<li>优先级高的切面：外面</li>\n<li>优先级低的切面：里面</li>\n</ul>\n<p>使用@Order注解可以控制切面的优先级：</p>\n<ul>\n<li>@Order(较小的数)：优先级高</li>\n<li>@Order(较大的数)：优先级低</li>\n</ul>\n<p>![27](C:/Users/zw/Desktop/ssm md格式笔记/img/27.png)</p>\n<h2 id=\"基于XML的AOP（了解）\"><a href=\"#基于XML的AOP（了解）\" class=\"headerlink\" title=\"基于XML的AOP（了解）\"></a>基于XML的AOP（了解）</h2><h3 id=\"准备工作-1\"><a href=\"#准备工作-1\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>参考基于注解的AOP环境</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.atguigu.aop.xml\"</span>&gt;</span>&lt;/context:component\u0002scan&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置切面类--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"loggerAspect\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pointCut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(*com.atguigu.aop.xml.CalculatorImpl.*(..))\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"beforeMethod\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterMethod\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterReturningMethod\"</span> <span class=\"attr\">returning</span>=<span class=\"string\">\"result\"</span><span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after-returning</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterThrowingMethod\"</span> <span class=\"attr\">throwing</span>=<span class=\"string\">\"ex\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after-throwing</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:around</span> <span class=\"attr\">method</span>=<span class=\"string\">\"aroundMethod\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:around</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"validateAspect\"</span> <span class=\"attr\">order</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"validateBeforeMethod\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"pointCut\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h1><h2 id=\"JdbcTemplate\"><a href=\"#JdbcTemplate\" class=\"headerlink\" title=\"JdbcTemplate\"></a>JdbcTemplate</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>\n<h3 id=\"准备工作-2\"><a href=\"#准备工作-2\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"①加入依赖-1\"><a href=\"#①加入依赖-1\" class=\"headerlink\" title=\"①加入依赖\"></a>①加入依赖</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 持久化层支持jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 测试相关 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- junit测试 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.31<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②创建jdbc-properties\"><a href=\"#②创建jdbc-properties\" class=\"headerlink\" title=\"②创建jdbc.properties\"></a>②创建jdbc.properties</h4><figure class=\"highlight properties\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"string\">atguigu</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/ssm</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.driver</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③配置Spring的配置文件\"><a href=\"#③配置Spring的配置文件\" class=\"headerlink\" title=\"③配置Spring的配置文件\"></a>③配置Spring的配置文件</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置数据源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"druidDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${atguigu.url}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${atguigu.driver}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${atguigu.username}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${atguigu.password}\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.core.JdbcTemplate\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 装配数据源 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"druidDataSource\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"①在测试类装配-JdbcTemplate\"><a href=\"#①在测试类装配-JdbcTemplate\" class=\"headerlink\" title=\"①在测试类装配 JdbcTemplate\"></a>①在测试类装配 JdbcTemplate</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(\"classpath:spring-jdbc.xml\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JDBCTemplateTest</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②测试增删改功能\"><a href=\"#②测试增删改功能\" class=\"headerlink\" title=\"②测试增删改功能\"></a>②测试增删改功能</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//测试增删改功能</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testUpdate</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">\"insert into t_emp values(null,?,?,?)\"</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> jdbcTemplate.update(sql, <span class=\"string\">\"张三\"</span>, <span class=\"number\">23</span>, <span class=\"string\">\"男\"</span>);</span><br><span class=\"line\">    System.out.println(result);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③查询一条数据为实体类对象\"><a href=\"#③查询一条数据为实体类对象\" class=\"headerlink\" title=\"③查询一条数据为实体类对象\"></a>③查询一条数据为实体类对象</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//查询一条数据为一个实体类对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSelectEmpById</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">\"select * from t_emp where id = ?\"</span>;</span><br><span class=\"line\">    <span class=\"type\">Emp</span> <span class=\"variable\">emp</span> <span class=\"operator\">=</span> jdbcTemplate.queryForObject(sql, <span class=\"keyword\">new</span> <span class=\"title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class), <span class=\"number\">1</span>);</span><br><span class=\"line\">    System.out.println(emp);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④查询多条数据为一个list集合\"><a href=\"#④查询多条数据为一个list集合\" class=\"headerlink\" title=\"④查询多条数据为一个list集合\"></a>④查询多条数据为一个list集合</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//查询多条数据为一个list集合</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSelectList</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">\"select * from t_emp\"</span>;</span><br><span class=\"line\">    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class=\"keyword\">new</span> <span class=\"title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));</span><br><span class=\"line\">    list.forEach(emp -&gt; System.out.println(emp));</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑤查询单行单列的值\"><a href=\"#⑤查询单行单列的值\" class=\"headerlink\" title=\"⑤查询单行单列的值\"></a>⑤查询单行单列的值</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"comment\">//查询单行单列的值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectCount</span><span class=\"params\">()</span>{</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">\"select count(id) from t_emp\"</span>;</span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"声明式事务概念\"><a href=\"#声明式事务概念\" class=\"headerlink\" title=\"声明式事务概念\"></a>声明式事务概念</h2><h3 id=\"编程式事务\"><a href=\"#编程式事务\" class=\"headerlink\" title=\"编程式事务\"></a>编程式事务</h3><p>事务功能的相关操作全部通过自己编写代码来实现：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Connection</span> <span class=\"variable\">conn</span> <span class=\"operator\">=</span> ...;</span><br><span class=\"line\"><span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 开启事务：关闭事务的自动提交</span></span><br><span class=\"line\">    conn.setAutoCommit(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 核心操作</span></span><br><span class=\"line\">    <span class=\"comment\">// 提交事务</span></span><br><span class=\"line\">    conn.commit();</span><br><span class=\"line\">}<span class=\"keyword\">catch</span>(Exception e){</span><br><span class=\"line\">    <span class=\"comment\">// 回滚事务</span></span><br><span class=\"line\">    conn.rollBack();</span><br><span class=\"line\">}<span class=\"keyword\">finally</span>{</span><br><span class=\"line\">    <span class=\"comment\">// 释放数据库连接</span></span><br><span class=\"line\">    conn.close();</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>编程式的实现方式存在缺陷：</p>\n<ul>\n<li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li>\n<li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li>\n</ul>\n<h3 id=\"声明式事务-1\"><a href=\"#声明式事务-1\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h3><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p>\n<p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p>\n<ul>\n<li>好处1：提高开发效率</li>\n<li>好处2：消除了冗余的代码</li>\n<li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性</li>\n</ul>\n<p>能等各个方面的优化</p>\n<p>所以，我们可以总结下面两个概念：</p>\n<ul>\n<li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li>\n<li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li>\n</ul>\n<h2 id=\"基于注解的声明式事务\"><a href=\"#基于注解的声明式事务\" class=\"headerlink\" title=\"基于注解的声明式事务\"></a>基于注解的声明式事务</h2><h3 id=\"准备工作-3\"><a href=\"#准备工作-3\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><h4 id=\"①加入依赖-2\"><a href=\"#①加入依赖-2\" class=\"headerlink\" title=\"①加入依赖\"></a>①加入依赖</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 持久化层支持jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Spring 测试相关 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- junit测试 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 数据源 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.31<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②创建jdbc-properties-1\"><a href=\"#②创建jdbc-properties-1\" class=\"headerlink\" title=\"②创建jdbc.properties\"></a>②创建jdbc.properties</h4><figure class=\"highlight properties\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jdbc.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.password</span>=<span class=\"string\">atguigu</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class=\"line\"><span class=\"attr\">jdbc.driver</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③配置Spring的配置文件-1\"><a href=\"#③配置Spring的配置文件-1\" class=\"headerlink\" title=\"③配置Spring的配置文件\"></a>③配置Spring的配置文件</h4><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--扫描组件--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.atguigu.spring.tx.annotation\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:jdbc.properties\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置数据源 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"druidDataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.druid.pool.DruidDataSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.url}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.driver}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.username}\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"${jdbc.password}\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"jdbcTemplate\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.core.JdbcTemplate\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 装配数据源 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"druidDataSource\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"④创建表\"><a href=\"#④创建表\" class=\"headerlink\" title=\"④创建表\"></a>④创建表</h4><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE `t_book` (</span><br><span class=\"line\">    `book_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',</span><br><span class=\"line\">    `book_name` varchar(20) DEFAULT NULL COMMENT '图书名称',</span><br><span class=\"line\">    `price` int(11) DEFAULT NULL COMMENT '价格',</span><br><span class=\"line\">    `stock` int(10) unsigned DEFAULT NULL COMMENT '库存（无符号）',</span><br><span class=\"line\">    PRIMARY KEY (`book_id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br><span class=\"line\">insert into `t_book`(`book_id`,`book_name`,`price`,`stock`) values (1,'斗破苍穹',80,100),(2,'斗罗大陆',50,100);</span><br><span class=\"line\">CREATE TABLE `t_user` (</span><br><span class=\"line\">    `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',</span><br><span class=\"line\">    `username` varchar(20) DEFAULT NULL COMMENT '用户名',</span><br><span class=\"line\">    `balance` int(10) unsigned DEFAULT NULL COMMENT '余额（无符号）',</span><br><span class=\"line\">    PRIMARY KEY (`user_id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span><br><span class=\"line\">insert into `t_user`(`user_id`,`username`,`balance`) values (1,'admin',50);</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"⑤创建组件\"><a href=\"#⑤创建组件\" class=\"headerlink\" title=\"⑤创建组件\"></a>⑤创建组件</h4><p>创建BookController：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookController</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buyBook</span><span class=\"params\">(Integer bookId, Integer userId)</span>{</span><br><span class=\"line\">        bookService.buyBook(bookId, userId);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建接口BookService：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookService</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">buyBook</span><span class=\"params\">(Integer bookId, Integer userId)</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建实现类BookServiceImpl：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookService</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookDao bookDao;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buyBook</span><span class=\"params\">(Integer bookId, Integer userId)</span> {</span><br><span class=\"line\">        <span class=\"comment\">//查询图书的价格</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">price</span> <span class=\"operator\">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class=\"line\">        <span class=\"comment\">//更新图书的库存</span></span><br><span class=\"line\">        bookDao.updateStock(bookId);</span><br><span class=\"line\">        <span class=\"comment\">//更新用户的余额</span></span><br><span class=\"line\">        bookDao.updateBalance(userId, price);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建接口BookDao：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BookDao</span> {</span><br><span class=\"line\">    Integer <span class=\"title function_\">getPriceByBookId</span><span class=\"params\">(Integer bookId)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateStock</span><span class=\"params\">(Integer bookId)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">updateBalance</span><span class=\"params\">(Integer userId, Integer price)</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建实现类BookDaoImpl：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BookDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BookDao</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">getPriceByBookId</span><span class=\"params\">(Integer bookId)</span> {</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">\"select price from t_book where book_id = ?\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateStock</span><span class=\"params\">(Integer bookId)</span> {</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">\"update t_book set stock = stock - 1 where book_id = ?\"</span>;</span><br><span class=\"line\">        jdbcTemplate.update(sql, bookId);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateBalance</span><span class=\"params\">(Integer userId, Integer price)</span> {</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">\"update t_user set balance = balance - ? where user_id =?\"</span>;</span><br><span class=\"line\">            jdbcTemplate.update(sql, price, userId);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"测试无事务情况\"><a href=\"#测试无事务情况\" class=\"headerlink\" title=\"测试无事务情况\"></a>测试无事务情况</h3><h4 id=\"①创建测试类\"><a href=\"#①创建测试类\" class=\"headerlink\" title=\"①创建测试类\"></a>①创建测试类</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration(\"classpath:tx-annotation.xml\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TxByAnnotationTest</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookController bookController;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBuyBook</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        bookController.buyBook(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"②模拟场景\"><a href=\"#②模拟场景\" class=\"headerlink\" title=\"②模拟场景\"></a>②模拟场景</h4><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p>\n<p>假设用户id为1的用户，购买id为1的图书</p>\n<p>用户余额为50，而图书价格为80</p>\n<p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p>\n<p>此时执行sql语句会抛出SQLException</p>\n<h4 id=\"③观察结果\"><a href=\"#③观察结果\" class=\"headerlink\" title=\"③观察结果\"></a>③观察结果</h4><p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p>\n<p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p>\n<h3 id=\"加入事务\"><a href=\"#加入事务\" class=\"headerlink\" title=\"加入事务\"></a>加入事务</h3><h4 id=\"①添加事务配置\"><a href=\"#①添加事务配置\" class=\"headerlink\" title=\"①添加事务配置\"></a>①添加事务配置</h4><p>在Spring的配置文件中添加配置：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    开启事务的注解驱动</span></span><br><span class=\"line\"><span class=\"comment\">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就</span></span><br><span class=\"line\"><span class=\"comment\">是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:annotation-driven</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>注意：导入的名称空间需要 <strong>tx</strong> <strong>结尾</strong>的那个。</p>\n<p>![28](C:/Users/zw/Desktop/ssm md格式笔记/img/28.png)</p>\n<h4 id=\"②添加事务注解\"><a href=\"#②添加事务注解\" class=\"headerlink\" title=\"②添加事务注解\"></a>②添加事务注解</h4><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p>\n<p>在BookServiceImpl的buybook()添加注解@Transactional</p>\n<h4 id=\"③观察结果-1\"><a href=\"#③观察结果-1\" class=\"headerlink\" title=\"③观察结果\"></a>③观察结果</h4><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p>\n<h3 id=\"Transactional注解标识的位置\"><a href=\"#Transactional注解标识的位置\" class=\"headerlink\" title=\"@Transactional注解标识的位置\"></a>@Transactional注解标识的位置</h3><p>@Transactional标识在方法上，咋只会影响该方法</p>\n<p>@Transactional标识的类上，咋会影响类中所有的方法</p>\n<h3 id=\"事务属性：只读\"><a href=\"#事务属性：只读\" class=\"headerlink\" title=\"事务属性：只读\"></a>事务属性：只读</h3><h4 id=\"①介绍-1\"><a href=\"#①介绍-1\" class=\"headerlink\" title=\"①介绍\"></a>①介绍</h4><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p>\n<h4 id=\"②使用方式\"><a href=\"#②使用方式\" class=\"headerlink\" title=\"②使用方式\"></a>②使用方式</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(readOnly = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buyBook</span><span class=\"params\">(Integer bookId, Integer userId)</span> {</span><br><span class=\"line\">    <span class=\"comment\">//查询图书的价格</span></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">price</span> <span class=\"operator\">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class=\"line\">    <span class=\"comment\">//更新图书的库存</span></span><br><span class=\"line\">    bookDao.updateStock(bookId);</span><br><span class=\"line\">    <span class=\"comment\">//更新用户的余额</span></span><br><span class=\"line\">    bookDao.updateBalance(userId, price);</span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(1/0);</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③注意\"><a href=\"#③注意\" class=\"headerlink\" title=\"③注意\"></a>③注意</h4><p>对增删改操作设置只读会抛出下面异常：</p>\n<p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification</p>\n<p>are not allowed</p>\n<h3 id=\"事务属性：超时\"><a href=\"#事务属性：超时\" class=\"headerlink\" title=\"事务属性：超时\"></a>事务属性：超时</h3><h4 id=\"①介绍-2\"><a href=\"#①介绍-2\" class=\"headerlink\" title=\"①介绍\"></a>①介绍</h4><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p>\n<p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p>\n<p>概括来说就是一句话：超时回滚，释放资源。</p>\n<h4 id=\"②使用方式-1\"><a href=\"#②使用方式-1\" class=\"headerlink\" title=\"②使用方式\"></a>②使用方式</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(timeout = 3)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buyBook</span><span class=\"params\">(Integer bookId, Integer userId)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">catch</span> (InterruptedException e) {</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//查询图书的价格</span></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">price</span> <span class=\"operator\">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class=\"line\">    <span class=\"comment\">//更新图书的库存</span></span><br><span class=\"line\">    bookDao.updateStock(bookId);</span><br><span class=\"line\">    <span class=\"comment\">//更新用户的余额</span></span><br><span class=\"line\">    bookDao.updateBalance(userId, price);</span><br><span class=\"line\">    <span class=\"comment\">//System.out.println(1/0);</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③观察结果-2\"><a href=\"#③观察结果-2\" class=\"headerlink\" title=\"③观察结果\"></a>③观察结果</h4><p>执行过程中抛出异常：</p>\n<p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out:</p>\n<p>deadline was Fri Jun 04 16:25:39 CST 2022</p>\n<h3 id=\"事务属性：回滚策略\"><a href=\"#事务属性：回滚策略\" class=\"headerlink\" title=\"事务属性：回滚策略\"></a>事务属性：回滚策略</h3><h4 id=\"①介绍-3\"><a href=\"#①介绍-3\" class=\"headerlink\" title=\"①介绍\"></a>①介绍</h4><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p>\n<p>可以通过@Transactional中相关属性设置回滚策略</p>\n<ul>\n<li>rollbackFor属性：需要设置一个Class类型的对象</li>\n<li>rollbackForClassName属性：需要设置一个字符串类型的全类名</li>\n<li>noRollbackFor属性：需要设置一个Class类型的对象</li>\n<li>rollbackFor属性：需要设置一个字符串类型的全类名</li>\n</ul>\n<h4 id=\"②使用方式-2\"><a href=\"#②使用方式-2\" class=\"headerlink\" title=\"②使用方式\"></a>②使用方式</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class=\"line\"><span class=\"comment\">//@Transactional(noRollbackForClassName = \"java.lang.ArithmeticException\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buyBook</span><span class=\"params\">(Integer bookId, Integer userId)</span> {</span><br><span class=\"line\">    <span class=\"comment\">//查询图书的价格</span></span><br><span class=\"line\">    <span class=\"type\">Integer</span> <span class=\"variable\">price</span> <span class=\"operator\">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class=\"line\">    <span class=\"comment\">//更新图书的库存</span></span><br><span class=\"line\">    bookDao.updateStock(bookId);</span><br><span class=\"line\">    <span class=\"comment\">//更新用户的余额</span></span><br><span class=\"line\">    bookDao.updateBalance(userId, price);</span><br><span class=\"line\">    System.out.println(<span class=\"number\">1</span>/<span class=\"number\">0</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"③观察结果-3\"><a href=\"#③观察结果-3\" class=\"headerlink\" title=\"③观察结果\"></a>③观察结果</h4><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当</p>\n<p>出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p>\n<h3 id=\"事务属性：事务隔离级别\"><a href=\"#事务属性：事务隔离级别\" class=\"headerlink\" title=\"事务属性：事务隔离级别\"></a>事务属性：事务隔离级别</h3><h4 id=\"①介绍-4\"><a href=\"#①介绍-4\" class=\"headerlink\" title=\"①介绍\"></a>①介绍</h4><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事</p>\n<p>务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同</p>\n<p>的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p>\n<p>隔离级别一共有四种：</p>\n<ul>\n<li>读未提交：READ UNCOMMITTED</li>\n</ul>\n<p>允许Transaction01读取Transaction02未提交的修改。</p>\n<ul>\n<li>读已提交：READ COMMITTED、</li>\n</ul>\n<p>要求Transaction01只能读取Transaction02已提交的修改。</p>\n<ul>\n<li>可重复读：REPEATABLE READ</li>\n</ul>\n<p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它</p>\n<p>事务对这个字段进行更新。</p>\n<ul>\n<li>串行化：SERIALIZABLE</li>\n</ul>\n<p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它</p>\n<p>事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p>\n<p>各个隔离级别解决并发问题的能力见下表：</p>\n<table>\n<thead>\n<tr>\n<th><strong>隔离级别</strong></th>\n<th><strong>脏读</strong></th>\n<th><strong>不可重复读</strong></th>\n<th><strong>幻读</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>READ UNCOMMITTED</td>\n<td>有</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td>无</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>无</td>\n<td>无</td>\n<td>有</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>无</td>\n<td>无</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<p>各种数据库产品对事务隔离级别的支持程度：</p>\n<table>\n<thead>\n<tr>\n<th><strong>隔离级别</strong></th>\n<th><strong>Oracle</strong></th>\n<th><strong>MySQL</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>READ UNCOMMITTED</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td>√(默认)</td>\n<td>√</td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>×</td>\n<td>√(默认)</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>√</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<h4 id=\"②使用方式-3\"><a href=\"#②使用方式-3\" class=\"headerlink\" title=\"②使用方式\"></a>②使用方式</h4><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Transactional(isolation = Isolation.DEFAULT)</span><span class=\"comment\">//使用数据库默认的隔离级别</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class=\"comment\">//读未提交</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class=\"comment\">//读已提交</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class=\"comment\">//可重复读</span></span><br><span class=\"line\"><span class=\"meta\">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class=\"comment\">//串行化</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"事务属性：事务传播行为\"><a href=\"#事务属性：事务传播行为\" class=\"headerlink\" title=\"事务属性：事务传播行为\"></a>事务属性：事务传播行为</h3><h4 id=\"①介绍-5\"><a href=\"#①介绍-5\" class=\"headerlink\" title=\"①介绍\"></a>①介绍</h4><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p>\n<h4 id=\"②测试\"><a href=\"#②测试\" class=\"headerlink\" title=\"②测试\"></a>②测试</h4><p>创建接口CheckoutService：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CheckoutService</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">checkout</span><span class=\"params\">(Integer[] bookIds, Integer userId)</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建实现类CheckoutServiceImpl：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CheckoutServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">CheckoutService</span> {</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BookService bookService;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"meta\">@Transactional</span></span><br><span class=\"line\">    <span class=\"comment\">//一次购买多本图书</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkout</span><span class=\"params\">(Integer[] bookIds, Integer userId)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer bookId : bookIds) {</span><br><span class=\"line\">            bookService.buyBook(bookId, userId);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在BookController中添加方法：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> CheckoutService checkoutService;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">checkout</span><span class=\"params\">(Integer[] bookIds, Integer userId)</span>{</span><br><span class=\"line\">    checkoutService.checkout(bookIds, userId);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在数据库中将用户的余额修改为100元</p>\n<h4 id=\"③观察结果-4\"><a href=\"#③观察结果-4\" class=\"headerlink\" title=\"③观察结果\"></a>③观察结果</h4><p>可以通过@Transactional中的propagation属性设置事务传播行为</p>\n<p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p>\n<p>@Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开</p>\n<p>启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调</p>\n<p>用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不</p>\n<p>了，就都买不了</p>\n<p>@Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本</p>\n<h2 id=\"基于XML的声明式事务\"><a href=\"#基于XML的声明式事务\" class=\"headerlink\" title=\"基于XML的声明式事务\"></a>基于XML的声明式事务</h2><h3 id=\"场景模拟-1\"><a href=\"#场景模拟-1\" class=\"headerlink\" title=\"场景模拟\"></a>场景模拟</h3><p>参考基于注解的声明式事务</p>\n<h3 id=\"修改Spring配置文件\"><a href=\"#修改Spring配置文件\" class=\"headerlink\" title=\"修改Spring配置文件\"></a>修改Spring配置文件</h3><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">\"execution(*com.atguigu.spring.tx.xml.service.impl.*.*(..))\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:advisor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"query*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"java.lang.Exception\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRES_NEW\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"java.lang.Exception\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRES_NEW\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">rollback-for</span>=<span class=\"string\">\"java.lang.Exception\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRES_NEW\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n</blockquote>\n"},{"title":"SparkSQL","url":"/posts/4c4e1572/","content":"<p><img src=\"/posts/4c4e1572/0.png\"></p>\n<h1 id=\"SparkSQl概述\"><a href=\"#SparkSQl概述\" class=\"headerlink\" title=\"SparkSQl概述\"></a>SparkSQl概述</h1><p>对于开发人员来讲，SparkSQL 可以简化RDD 的开发，提高开发效率，且执行效率非常快，所以实际工作中，基本上采用的就是 SparkSQL。Spark SQL 为了简化RDD 的开发， 提高开发效率，提供了 2 个编程抽象，类似Spark Core 中的RDD</p>\n<ul>\n<li><strong>DataFrame</strong></li>\n<li><strong>DataSet</strong></li>\n</ul>\n<h2 id=\"DataFrame-是什么\"><a href=\"#DataFrame-是什么\" class=\"headerlink\" title=\"DataFrame 是什么\"></a><strong>DataFrame</strong> <strong>是什么</strong></h2><p>​        在 Spark 中，DataFrame 是一种以 RDD 为基础的分布式数据集，类似于传统数据库中的二维表格。DataFrame 与 RDD 的主要区别在于，前者带有 schema 元信息，即 DataFrame 所表示的二维表数据集的每一列都带有名称和类型。这使得 Spark SQL 得以洞察更多的结构信息，从而对藏于 DataFrame 背后的数据源以及作用于 DataFrame 之上的变换进行了针对性的优化，最终达到大幅提升运行时效率的目标。反观 RDD，由于无从得知所存数据元素的具体内部结构，Spark Core 只能在 stage 层面进行简单、通用的流水线优化。</p>\n<p>​       同时，与Hive 类似，DataFrame 也支持嵌套数据类型（struct、array 和 map）。从 API 易用性的角度上看，DataFrame API 提供的是一套高层的关系操作，比函数式的 RDD API 要更加友好，门槛更低。</p>\n<img src=\"/posts/4c4e1572/1.png\" style=\"zoom: 80%;\">\n上图直观地体现了DataFrame 和 RDD 的区别。\n\n<p>左侧的 RDD[Person]虽然以 Person 为类型参数，但 Spark 框架本身不了解Person 类的内部结构。而右侧的DataFrame 却提供了详细的结构信息，使得 Spark SQL 可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么。</p>\n<p>DataFrame 是为数据提供了 Schema 的视图。可以把它当做数据库中的一张表来对待DataFrame 也是懒执行的，但性能上比 RDD 要高，主要原因：优化的执行计划，即查询计划通过 Spark catalyst optimiser 进行优化。比如下面一个例子:</p>\n<img src=\"/posts/4c4e1572/2.png\" style=\"zoom:80%;\">\n\n<p>为了说明查询优化，我们来看下方图片展示的人口数据分析的示例。图中构造了两个DataFrame，将它们 join 之后又做了一次filter 操作。如果原封不动地执行这个执行计划，最终的执行效率是不高的。因为 join 是一个代价较大的操作，也可能会产生一个较大的数据集。如果我们能将filter 下推到 join 下方，先对DataFrame 进行过滤，再 join 过滤后的较小的结果集，便可以有效缩短执行时间。而 Spark SQL 的查询优化器正是这样做的。简而言之， 逻辑查询计划优化就是一个利用基于关系代数的等价变换，将高成本的操作替换为低成本操作的过程。</p>\n<img src=\"/posts/4c4e1572/3.png\" style=\"zoom:80%;\">\n\n<h2 id=\"DataSet-是什么\"><a href=\"#DataSet-是什么\" class=\"headerlink\" title=\"DataSet 是什么\"></a><strong>DataSet</strong> <strong>是什么</strong></h2><p>DataSet 是分布式数据集合。DataSet 是Spark 1.6 中添加的一个新抽象，是DataFrame的一个扩展。它提供了RDD 的优势（强类型，使用强大的 lambda 函数的能力）以及SparkSQL 优化执行引擎的优点。DataSet 也可以使用功能性的转换（操作 map，flatMap，filter等等）。</p>\n<ul>\n<li>DataSet 是DataFrame API 的一个扩展，是SparkSQL 最新的数据抽象</li>\n<li>用户友好的 API 风格，既具有类型安全检查也具有DataFrame 的查询优化特性；</li>\n<li><strong>用样例类来对DataSet 中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet 中的字段名称</strong>；</li>\n<li>DataSet 是强类型的。比如可以有 DataSet[Car]，DataSet[Person]。</li>\n<li>DataFrame 是DataSet 的特列，DataFrame=DataSet[Row] ，所以可以通过 as 方法将</li>\n<li>DataFrame 转换为DataSet。Row 是一个类型，跟 Car、Person 这些的类型一样，所有的表结构信息都用 Row 来表示。获取数据时需要指定顺序</li>\n</ul>\n<h1 id=\"SparkSQL-核心编程\"><a href=\"#SparkSQL-核心编程\" class=\"headerlink\" title=\"SparkSQL 核心编程\"></a><strong>SparkSQL 核心编程</strong></h1><h2 id=\"新的起点\"><a href=\"#新的起点\" class=\"headerlink\" title=\"新的起点\"></a><strong>新的起点</strong></h2><p>Spark Core 中，如果想要执行应用程序，需要首先构建上下文环境对象 SparkContext， Spark SQL 其实可以理解为对 Spark Core 的一种封装，不仅仅在模型上进行了封装，上下文环境对象也进行了封装。</p>\n<p>在老的版本中，SparkSQL 提供两种 SQL 查询起始点：一个叫 SQLContext，用于 Spark自己提供的SQL 查询；一个叫HiveContext，用于连接 Hive 的查询。</p>\n<p><font color=\"red\">SparkSession</font> 是 Spark 最新的 SQL 查询起始点，实质上是 SQLContext 和HiveContext 的组合，所以在 SQLContex 和HiveContext 上可用的API 在 SparkSession 上同样是可以使用的。SparkSession 内部封装了 SparkContext，所以计算实际上是由 sparkContext 完成的。当我们使用 spark-shell 的时候, spark 框架会自动的创建一个名称叫做 spark 的SparkSession 对象, 就像我们以前可以自动获取到一个 sc 来表示 SparkContext 对象一样</p>\n<img src=\"/posts/4c4e1572/4.png\" style=\"zoom:80%;\">\n\n<h2 id=\"DataFrame\"><a href=\"#DataFrame\" class=\"headerlink\" title=\"DataFrame\"></a><strong>DataFrame</strong></h2><p>Spark SQL 的DataFrame API 允许我们使用 DataFrame 而不用必须去注册临时表或者生成 SQL 表达式。DataFrame API 既有 transformation 操作也有 action 操作</p>\n<img src=\"/posts/4c4e1572/5.png\" style=\"zoom:80%;\">\n\n<h3 id=\"创建-DataFrame\"><a href=\"#创建-DataFrame\" class=\"headerlink\" title=\"创建 DataFrame\"></a><strong>创建</strong> <strong>DataFrame</strong></h3><p>在 Spark SQL 中 SparkSession 是创建DataFrame 和执行 SQL 的入口，创建 DataFrame 有三种方式：通过Spark 的数据源进行创建；从一个存在的RDD 进行转换；还可以从HiveTable 进行查询返回</p>\n<p><strong>查看 Spark 支持创建文件的数据源格式</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; spark.read.</span><br><span class=\"line\">csv\t  format  jdbc\tjson\tload\toption\toptions\torc\tparquet\tschema table\t\ttext\ttextFile</span><br></pre></td></tr></tbody></table></figure>\n\n<p>在 spark 的 bin/data 目录中创建 user.json 文件</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">{\"username\":\"zhangsan\",\"age\":20}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>读取 json 文件创建DataFrame</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> df = spark.read.json(<span class=\"string\">\"data/user.json\"</span>)</span><br><span class=\"line\">df: org.apache.spark.sql.<span class=\"type\">DataFrame</span> = [age: bigint， username: string]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><font color=\"red\">注意：如果从内存中获取数据，spark 可以知道数据类型具体是什么。如果是数字，默认作为 Int 处理；但是从文件中读取的数字，不能确定是什么类型，所以用 bigint 接收，可以和Long 类型转换，但是和 Int 不能进行转换</font></p>\n<h3 id=\"SQL-语法\"><a href=\"#SQL-语法\" class=\"headerlink\" title=\"SQL 语法\"></a><strong>SQL</strong> <strong>语法</strong></h3><p><strong>1.在 spark 的 bin/data 目录中创建 user.json 文件</strong></p>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span><span class=\"attr\">\"username\"</span><span class=\"punctuation\">:</span><span class=\"string\">\"zhangsan\"</span><span class=\"punctuation\">,</span><span class=\"attr\">\"age\"</span><span class=\"punctuation\">:</span><span class=\"number\">20</span><span class=\"punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>2.读取 JSON 文件创建DataFrame</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt;<span class=\"keyword\">val</span> df = spark.read.json(<span class=\"string\">\"data/user.json\"</span>)</span><br><span class=\"line\">df: org.apache.spark.sql.<span class=\"type\">DataFrame</span> = [age: bigint， username: string]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>3.对 DataFrame 创建一个临时表</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.createOrReplaceTempView(<span class=\"string\">\"people\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>4.对于DataFrame 创建一个全局表</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.createGlobalTempView(<span class=\"string\">\"people\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>通过 SQL 语句实现查询全表</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; spark.sql(<span class=\"string\">\"SELECT * FROM people\"</span>).show  <span class=\"comment\">//临时表</span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; spark.sql(<span class=\"string\">\"SELECT * FROM global_temp.people\"</span>).show() <span class=\"comment\">//全局表</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><font color=\"red\"><strong>注意：普通临时表是 Session 范围内的，如果想应用范围内有效，可以使用全局临时表。使用全局临时表时需要全路径访问，如：global_temp.people</strong></font></p>\n<h3 id=\"DSL-语法\"><a href=\"#DSL-语法\" class=\"headerlink\" title=\"DSL 语法\"></a><strong>DSL</strong> <strong>语法</strong></h3><p>DataFrame 提供一个特定领域语言(domain-specific language, DSL)去管理结构化的数据。可以在 Scala, Java, Python 和 R 中使用 DSL，<strong>使用 DSL 语法风格不必去创建临时视图了</strong></p>\n<ol>\n<li>创建DataFrame,读取 JSON 文件</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; scala&gt;<span class=\"keyword\">val</span> df = spark.read.json(<span class=\"string\">\"data/user.json\"</span>)</span><br><span class=\"line\">df: org.apache.spark.sql.<span class=\"type\">DataFrame</span> = [age: bigint， username: string]</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>查看DataFrame 的 Schema 信息</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.printSchema </span><br><span class=\"line\">root</span><br><span class=\"line\">|-- age: <span class=\"type\">Long</span> (nullable = <span class=\"literal\">true</span>)</span><br><span class=\"line\">|-- username: string (nullable = <span class=\"literal\">true</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"3\">\n<li>只查看”age”列数据</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.select(<span class=\"string\">\"age\"</span>).show()</span><br><span class=\"line\">+---+</span><br><span class=\"line\">|age|</span><br><span class=\"line\">+---+</span><br><span class=\"line\">| <span class=\"number\">30</span>|</span><br><span class=\"line\">| <span class=\"number\">20</span>|</span><br><span class=\"line\">| <span class=\"number\">40</span>|</span><br><span class=\"line\">+---+</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"4\">\n<li>查看”username”列数据以及”age+1”数据</li>\n</ol>\n<p><font color=\"red\">注意:涉及到运算的时候, 每列都必须使用$, $表示引用这个数据，或者采用引号表达式：单引号+字段名</font></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.select($<span class=\"string\">\"username\"</span>,$<span class=\"string\">\"age\"</span> + <span class=\"number\">1</span>).show </span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; df.select('username, 'age + <span class=\"number\">1</span>).show()</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">|username|(age + <span class=\"number\">1</span>)|</span><br><span class=\"line\">+--------+---------+</span><br><span class=\"line\">|zhangsan|       <span class=\"number\">31</span>|</span><br><span class=\"line\">|zhangsan|       <span class=\"number\">21</span>|</span><br><span class=\"line\">|zhangsan|       <span class=\"number\">41</span>|</span><br><span class=\"line\">+--------+---------+</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"5\">\n<li>as关键字取别名</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.select('username,'age+<span class=\"number\">1</span> as <span class=\"string\">\"age加1\"</span>).show</span><br><span class=\"line\">+--------+------+</span><br><span class=\"line\">|username|age加<span class=\"number\">1</span>|</span><br><span class=\"line\">+--------+------+</span><br><span class=\"line\">|zhangsan|    <span class=\"number\">31</span>|</span><br><span class=\"line\">|zhangsan|    <span class=\"number\">21</span>|</span><br><span class=\"line\">|zhangsan|    <span class=\"number\">41</span>|</span><br><span class=\"line\">+--------+------+</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"6\">\n<li>查看”age”大于”30”的数据</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.filter('age&gt;<span class=\"number\">20</span>).show</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; df.filter($<span class=\"string\">\"age\"</span>&gt;<span class=\"number\">20</span>).show</span><br><span class=\"line\">+---+--------+</span><br><span class=\"line\">|age|username|</span><br><span class=\"line\">+---+--------+</span><br><span class=\"line\">| <span class=\"number\">30</span>|zhangsan|</span><br><span class=\"line\">| <span class=\"number\">40</span>|zhangsan|</span><br><span class=\"line\">+---+--------+</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"7\">\n<li>按照”age”分组，查看数据条数</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; df.groupBy(<span class=\"string\">\"age\"</span>).count.show</span><br><span class=\"line\">+---+-----+</span><br><span class=\"line\">|age|count|</span><br><span class=\"line\">+---+-----+</span><br><span class=\"line\">| <span class=\"number\">30</span>|    <span class=\"number\">1</span>|</span><br><span class=\"line\">| <span class=\"number\">20</span>|    <span class=\"number\">1</span>|</span><br><span class=\"line\">| <span class=\"number\">40</span>|    <span class=\"number\">1</span>|</span><br><span class=\"line\">+---+-----+</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"RDD-转换为-DataFrame\"><a href=\"#RDD-转换为-DataFrame\" class=\"headerlink\" title=\"RDD 转换为 DataFrame\"></a><strong>RDD</strong> <strong>转换为</strong> <strong>DataFrame</strong></h3><p>在 IDEA 中开发程序时，如果需要RDD 与DF 或者DS 之间互相操作，那么需要引入</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> spark.implicits._</span><br></pre></td></tr></tbody></table></figure>\n\n<p>这里的 spark 不是Scala 中的包名，而是创建的 sparkSession 对象的变量名称，所以必须先创建 SparkSession 对象再导入。这里的 spark 对象不能使用var 声明，因为 Scala 只支持val 修饰的对象的引入。</p>\n<p>spark-shell 中无需导入，自动完成此操作。</p>\n<ol>\n<li><strong>toDF</strong></li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> rdd =sc.makeRDD(<span class=\"type\">List</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; rdd.toDF(<span class=\"string\">\"id\"</span>).show</span><br><span class=\"line\">+---+</span><br><span class=\"line\">| id|</span><br><span class=\"line\">+---+</span><br><span class=\"line\">|  <span class=\"number\">1</span>|</span><br><span class=\"line\">|  <span class=\"number\">2</span>|</span><br><span class=\"line\">|  <span class=\"number\">3</span>|</span><br><span class=\"line\">|  <span class=\"number\">4</span>|</span><br><span class=\"line\">+---+</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li><font color=\"red\">实际开发中，一般通过<strong>样例类</strong>将 RDD 转换为 DataFrame</font></li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">name:<span class=\"type\">String</span>,age:<span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\">defined <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; sc.makeRDD(<span class=\"type\">List</span>((<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">30</span>),(<span class=\"string\">\"lisi\"</span>,<span class=\"number\">40</span>))).map(t=&gt;<span class=\"type\">User</span>(t._1,t._2)).toDF.show</span><br><span class=\"line\">+--------+---+</span><br><span class=\"line\">|    name|age|</span><br><span class=\"line\">+--------+---+</span><br><span class=\"line\">|zhangsan| <span class=\"number\">30</span>|</span><br><span class=\"line\">|    lisi| <span class=\"number\">40</span>|</span><br><span class=\"line\">+--------+---+</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"DataFrame-转换为-RDD\"><a href=\"#DataFrame-转换为-RDD\" class=\"headerlink\" title=\"DataFrame 转换为 RDD\"></a><strong>DataFrame</strong> <strong>转换为</strong> <strong>RDD</strong></h3><p>DataFrame 其实就是对RDD 的封装，所以可以直接获取内部的RDD</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> df=sc.makeRDD(<span class=\"type\">List</span>((<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">30</span>),(<span class=\"string\">\"lisi\"</span>,<span class=\"number\">40</span>))).map(t=&gt;<span class=\"type\">User</span>(t._1,t._2)).toDF</span><br><span class=\"line\">df: org.apache.spark.sql.<span class=\"type\">DataFrame</span> = [name: string, age: int]</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> array=df.rdd.collect</span><br><span class=\"line\">array: <span class=\"type\">Array</span>[org.apache.spark.sql.<span class=\"type\">Row</span>] = <span class=\"type\">Array</span>([zhangsan,<span class=\"number\">30</span>], [lisi,<span class=\"number\">40</span>])</span><br></pre></td></tr></tbody></table></figure>\n\n<p><font color=\"red\">注意：此时得到的RDD 存储类型为Row</font></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; array(<span class=\"number\">0</span>)</span><br><span class=\"line\">res32: org.apache.spark.sql.<span class=\"type\">Row</span> = [zhangsan,<span class=\"number\">30</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; array(<span class=\"number\">0</span>)(<span class=\"number\">0</span>)</span><br><span class=\"line\">res33: <span class=\"type\">Any</span> = zhangsan</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; array(<span class=\"number\">0</span>)(<span class=\"number\">1</span>)</span><br><span class=\"line\">res35: <span class=\"type\">Any</span> = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; array(<span class=\"number\">0</span>).getAs[<span class=\"type\">String</span>](<span class=\"string\">\"name\"</span>) </span><br><span class=\"line\">res30: <span class=\"type\">String</span> = zhangsan</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"DataSet\"><a href=\"#DataSet\" class=\"headerlink\" title=\"DataSet\"></a><strong>DataSet</strong></h2><p>DataSet 是具有<font color=\"red\">强类型</font>的数据集合，需要提供对应的类型信息</p>\n<img src=\"/posts/4c4e1572/6.png\" style=\"zoom:80%;\">\n\n<h3 id=\"创建-DataSet\"><a href=\"#创建-DataSet\" class=\"headerlink\" title=\"创建 DataSet\"></a><strong>创建</strong> <strong>DataSet</strong></h3><ol>\n<li>使用样例类序列创建 DataSet</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span>, age: <span class=\"type\">Long</span></span>) <span class=\"title\">defined</span> <span class=\"title\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> caseClassDS = <span class=\"type\">Seq</span>(<span class=\"type\">Person</span>(<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">2</span>)).toDS()</span><br><span class=\"line\">caseClassDS: org.apache.spark.sql.<span class=\"type\">Dataset</span>[<span class=\"type\">Person</span>] = [name: string, age: <span class=\"type\">Long</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; caseClassDS.show</span><br><span class=\"line\">+---------+---+</span><br><span class=\"line\">|\tname|age|</span><br><span class=\"line\">+---------+---+</span><br><span class=\"line\">| zhangsan| <span class=\"number\">2</span>|</span><br><span class=\"line\">+---------+---+</span><br></pre></td></tr></tbody></table></figure>\n\n<ol start=\"2\">\n<li>使用基本类型的序列创建DataSet</li>\n</ol>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> ds = <span class=\"type\">Seq</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>).toDS</span><br><span class=\"line\">ds: org.apache.spark.sql.<span class=\"type\">Dataset</span>[<span class=\"type\">Int</span>] = [value: int]</span><br><span class=\"line\">scala&gt; ds.show</span><br><span class=\"line\">+-----+</span><br><span class=\"line\">|value|</span><br><span class=\"line\">+-----+</span><br><span class=\"line\">|\t<span class=\"number\">1</span>|</span><br><span class=\"line\">|\t<span class=\"number\">2</span>|</span><br><span class=\"line\">|\t<span class=\"number\">3</span>|</span><br><span class=\"line\">|\t<span class=\"number\">4</span>|</span><br><span class=\"line\">|\t<span class=\"number\">5</span>|</span><br><span class=\"line\">+-----+</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"red\">注意：在实际使用的时候，很少用到把序列转换成DataSet，更多的是通过RDD 来得到DataSet</font></strong></p>\n<h3 id=\"RDD-转换为-DataSet\"><a href=\"#RDD-转换为-DataSet\" class=\"headerlink\" title=\"RDD 转换为 DataSet\"></a><strong>RDD</strong> <strong>转换为</strong> <strong>DataSet</strong></h3><p>SparkSQL 能够自动将包含有 case 类的RDD 转换成DataSet，case 类定义了 table 的结构，case 类属性通过反射变成了表的列名。Case 类可以包含诸如 Seq 或者 Array 等复杂的结构</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">name:<span class=\"type\">String</span>, age:<span class=\"type\">Int</span></span>) </span></span><br><span class=\"line\">defined <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; sc.makeRDD(<span class=\"type\">List</span>((<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">30</span>), (<span class=\"string\">\"lisi\"</span>,<span class=\"number\">49</span>))).map(t=&gt;<span class=\"type\">User</span>(t._1, t._2)).toDS</span><br><span class=\"line\"><span class=\"comment\">//sc.makeRDD(List(User(\"zhangsan\",30),User(\"lisi\",49))).toDs</span></span><br><span class=\"line\">res11: org.apache.spark.sql.<span class=\"type\">Dataset</span>[<span class=\"type\">User</span>] = [name: string, age: int]</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"DataSet-转换为-RDD\"><a href=\"#DataSet-转换为-RDD\" class=\"headerlink\" title=\"DataSet 转换为 RDD\"></a><strong>DataSet</strong> <strong>转换为</strong> <strong>RDD</strong></h3><p>DataSet 其实也是对 RDD 的封装，所以可以直接获取内部的RDD</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">name:<span class=\"type\">String</span>, age:<span class=\"type\">Int</span></span>) </span></span><br><span class=\"line\">defined <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; sc.makeRDD(<span class=\"type\">List</span>((<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">30</span>), (<span class=\"string\">\"lisi\"</span>,<span class=\"number\">49</span>))).map(t=&gt;<span class=\"type\">User</span>(t._1, t._2)).toDS</span><br><span class=\"line\">res11: org.apache.spark.sql.<span class=\"type\">Dataset</span>[<span class=\"type\">User</span>] = [name: string, age: int]</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> rdd = res11.rdd</span><br><span class=\"line\">rdd: org.apache.spark.rdd.<span class=\"type\">RDD</span>[<span class=\"type\">User</span>] = <span class=\"type\">MapPartitionsRDD</span>[<span class=\"number\">51</span>] at rdd at</span><br><span class=\"line\">&lt;console&gt;:<span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; rdd.collect</span><br><span class=\"line\">res12: <span class=\"type\">Array</span>[<span class=\"type\">User</span>] = <span class=\"type\">Array</span>(<span class=\"type\">User</span>(zhangsan,<span class=\"number\">30</span>), <span class=\"type\">User</span>(lisi,<span class=\"number\">49</span>))</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"DataFrame-和-DataSet-转换\"><a href=\"#DataFrame-和-DataSet-转换\" class=\"headerlink\" title=\"DataFrame 和 DataSet 转换\"></a><strong>DataFrame</strong> <strong>和</strong> <strong>DataSet</strong> <strong>转换</strong></h2><p>DataFrame 其实是DataSet 的特例，所以它们之间是可以互相转换的。</p>\n<p><strong>DataFrame 转换为DataSet</strong>    </p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">name:<span class=\"type\">String</span>, age:<span class=\"type\">Int</span></span>) </span></span><br><span class=\"line\">defined <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> df = sc.makeRDD(<span class=\"type\">List</span>((<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">30</span>), (<span class=\"string\">\"lisi\"</span>,<span class=\"number\">49</span>))).toDF(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"age\"</span>)</span><br><span class=\"line\">df: org.apache.spark.sql.<span class=\"type\">DataFrame</span> = [name: string, age: int]</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> ds = df.as[<span class=\"type\">User</span>]</span><br><span class=\"line\">ds: org.apache.spark.sql.<span class=\"type\">Dataset</span>[<span class=\"type\">User</span>] = [name: string, age: int]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>DataSet 转换为DataFrame</strong></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> ds = df.as[<span class=\"type\">User</span>]</span><br><span class=\"line\">ds: org.apache.spark.sql.<span class=\"type\">Dataset</span>[<span class=\"type\">User</span>] = [name: string, age: int]</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> df = ds.toDF</span><br><span class=\"line\">df: org.apache.spark.sql.<span class=\"type\">DataFrame</span> = [name: string, age: int]</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"RDD、DataFrame、DataSet-三者的关系\"><a href=\"#RDD、DataFrame、DataSet-三者的关系\" class=\"headerlink\" title=\"RDD、DataFrame、DataSet 三者的关系\"></a>RDD、DataFrame、DataSet 三者的关系</h2><p>在 SparkSQL 中 Spark 为我们提供了两个新的抽象，分别是 DataFrame 和 DataSet。他们和 RDD 有什么区别呢？首先从版本的产生上来看：</p>\n<ul>\n<li>Spark1.0 =&gt; RDD</li>\n<li>Spark1.3 =&gt; DataFrame</li>\n<li>Spark1.6 =&gt; Dataset</li>\n</ul>\n<p>如果同样的数据都给到这三个数据结构，他们分别计算之后，都会给出相同的结果。不同是的他们的执行效率和执行方式。在后期的 Spark 版本中，DataSet 有可能会逐步取代RDD和 DataFrame 成为唯一的API 接口。</p>\n<h3 id=\"三者的共性\"><a href=\"#三者的共性\" class=\"headerlink\" title=\"三者的共性\"></a>三者的共性</h3><ul>\n<li><p>RDD、DataFrame、DataSet 全都是 spark 平台下的分布式弹性数据集，为处理超大型数据提供便利;</p>\n</li>\n<li><p>三者都有惰性机制，在进行创建、转换，如 map 方法时，不会立即执行，只有在遇到</p>\n<p>Action 如 foreach 时，三者才会开始遍历运算;</p>\n</li>\n<li><p>三者有许多共同的函数，如 filter，排序等;</p>\n</li>\n<li><p>在对DataFrame 和Dataset 进行操作许多操作都需要这个包:import spark.implicits._（在创建好 SparkSession 对象后尽量直接导入）</p>\n</li>\n<li><p>三者都会根据 Spark 的内存情况自动缓存运算，这样即使数据量很大，也不用担心会内存溢出</p>\n</li>\n<li><p>三者都有 partition 的概念</p>\n</li>\n<li><p>DataFrame 和DataSet 均可使用模式匹配获取各个字段的值和类型</p>\n</li>\n</ul>\n<h3 id=\"三者的区别\"><a href=\"#三者的区别\" class=\"headerlink\" title=\"三者的区别\"></a>三者的区别</h3><ol>\n<li><p>RDD</p>\n<ul>\n<li>RDD 一般和 spark mllib 同时使用</li>\n<li>RDD 不支持 sparksql 操作</li>\n</ul>\n</li>\n<li><p>DataFrame</p>\n<ul>\n<li>与 RDD 和 Dataset 不同，DataFrame 每一行的类型固定为Row，每一列的值没法直接访问，只有通过解析才能获取各个字段的值</li>\n<li>DataFrame 与DataSet 一般不与 spark mllib 同时使用</li>\n<li>DataFrame 与DataSet 均支持 SparkSQL 的操作，比如 select，groupby 之类，还能注册临时表/视窗，进行 sql 语句操作</li>\n<li>DataFrame 与DataSet 支持一些特别方便的保存方式，比如保存成 csv，可以带上表头，这样每一列的字段名一目了然(后面专门讲解)</li>\n</ul>\n</li>\n<li><p>DataSet</p>\n<ul>\n<li>Dataset 和DataFrame 拥有完全相同的成员函数，区别只是每一行的数据类型不同。</li>\n</ul>\n<p>  DataFrame 其实就是DataSet 的一个特例 <font color=\"blue\">type DataFrame = Dataset[Row]</font></p>\n<ul>\n<li>DataFrame 也可以叫Dataset[Row],每一行的类型是 Row，不解析，每一行究竟有哪些字段，各个字段又是什么类型都无从得知，只能用上面提到的 getAS 方法或者共性中的第七条提到的模式匹配拿出特定字段。而Dataset 中，每一行是什么类型是不一定的，在自定义了 case class 之后可以很自由的获得每一行的信息</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"三者的互相转换\"><a href=\"#三者的互相转换\" class=\"headerlink\" title=\"三者的互相转换\"></a>三者的互相转换</h3><img src=\"/posts/4c4e1572/6.png\" style=\"zoom:80%;\">\n\n<h2 id=\"IDEA-开发SparkSQL\"><a href=\"#IDEA-开发SparkSQL\" class=\"headerlink\" title=\"IDEA 开发SparkSQL\"></a><strong>IDEA</strong> 开发SparkSQL</h2><p>实际开发中，都是使用 IDEA 进行开发的。</p>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a><strong>添加依赖</strong></h3><figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.spark<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spark-sql_2.12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;classifier&gt;sources&lt;/classifier&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--去掉上方注释刷新，重启IDEA下载spark-sql源码--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a><strong>代码实现</strong></h3><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Spark01_SparkSQL_Basic</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">    <span class=\"comment\">// TODO 创建SparkSQL的运行环境  RDD、DataFrame、DataSet 三者的互相转换</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf = <span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"SparkSql\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> spark = <span class=\"type\">SparkSession</span>.builder().config(sparkConf).getOrCreate()  <span class=\"comment\">//上下文环境对象  builder构建  config传入配置对象</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> spark.implicits._</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//TODO 执行逻辑操作</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO DataFrame</span></span><br><span class=\"line\">    <span class=\"comment\">//val df: DataFrame = spark.read.json(\"datas/user.json\")</span></span><br><span class=\"line\">    <span class=\"comment\">//df.show()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//DataFrame =&gt; SQL    使用SQL语法进行操作要创建视图(表)</span></span><br><span class=\"line\">    <span class=\"comment\">//  df.createOrReplaceTempView(\"user\")  //临时视图</span></span><br><span class=\"line\">    <span class=\"comment\">//  spark.sql(\"select * from user\").show()</span></span><br><span class=\"line\">    <span class=\"comment\">//  spark.sql(\"select age,username from user\").show()</span></span><br><span class=\"line\">    <span class=\"comment\">//  spark.sql(\"select avg(age) from user\").show()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//DataFrame =&gt; DSL</span></span><br><span class=\"line\">    <span class=\"comment\">//    df.select(\"age\",\"username\").show()</span></span><br><span class=\"line\">    <span class=\"comment\">//    df.select('username as(\"用户名字\"),'age+1 as(\"年龄+1\")).show()</span></span><br><span class=\"line\">    <span class=\"comment\">//    df.select($\"age\"+1).show()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO DataSet</span></span><br><span class=\"line\">    <span class=\"comment\">//DataFrame 其实是特点泛型的DataSet DataFrame所有操作DataSet都能用</span></span><br><span class=\"line\">    <span class=\"comment\">//val seq=Seq(1,2,3,4)</span></span><br><span class=\"line\">    <span class=\"comment\">//val ds=zw.toDS()</span></span><br><span class=\"line\">    <span class=\"comment\">//ds.show()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//RDD &lt;=&gt; DataFrame</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> rdd: <span class=\"type\">RDD</span>[(<span class=\"type\">Int</span>, <span class=\"type\">String</span>, <span class=\"type\">Int</span>)] =spark.sparkContext.makeRDD(<span class=\"type\">List</span>((<span class=\"number\">1</span>,<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">30</span>),(<span class=\"number\">2</span>,<span class=\"string\">\"lisi\"</span>,<span class=\"number\">40</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">val</span> df: <span class=\"type\">DataFrame</span> = rdd.toDF(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"age\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> rddRDD: <span class=\"type\">RDD</span>[<span class=\"type\">Row</span>] =df.rdd   <span class=\"comment\">//转换成RDD 和之前类型不一样，之前是Tuple 现在变成了Row</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//DataFrame &lt;=&gt; DataSet</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> ds: <span class=\"type\">Dataset</span>[<span class=\"type\">User</span>] = df.as[<span class=\"type\">User</span>]   <span class=\"comment\">//转成ds 要加个类型</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> df1: <span class=\"type\">DataFrame</span> = ds.toDF()   <span class=\"comment\">// 转成df  把类型去了，直接toDF</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//RDD &lt;=&gt; DataSet</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> ds1: <span class=\"type\">Dataset</span>[<span class=\"type\">User</span>] =rdd.map{</span><br><span class=\"line\">      <span class=\"keyword\">case</span> (id,name,age)=&gt;{</span><br><span class=\"line\">        <span class=\"type\">User</span>(id,name,age)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }.toDS()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> userRDD: <span class=\"type\">RDD</span>[<span class=\"type\">User</span>] =ds1.rdd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//TODO 关闭环境</span></span><br><span class=\"line\">    spark.close()</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">id:<span class=\"type\">Int</span>,name:<span class=\"type\">String</span>,age:<span class=\"type\">Int</span></span>)</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"用户自定义函数\"><a href=\"#用户自定义函数\" class=\"headerlink\" title=\"用户自定义函数\"></a>用户自定义函数</h2><p>用户可以通过 <font color=\"red\">spark.udf</font> 功能添加自定义函数，实现自定义功能。</p>\n<h3 id=\"UDF\"><a href=\"#UDF\" class=\"headerlink\" title=\"UDF\"></a>UDF</h3><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO 创建SparkSQL的运行环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"SparkSQL\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> spark=<span class=\"type\">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class=\"line\"><span class=\"keyword\">import</span>  spark.implicits._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 1.创建DataFrame</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> df=spark.read.json(<span class=\"string\">\"datas/user.json\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//TODO 2.创建临时表</span></span><br><span class=\"line\">df.createOrReplaceTempView(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//TODO 3.注册UDF</span></span><br><span class=\"line\">spark.udf.register(<span class=\"string\">\"prefixName\"</span>,(x:<span class=\"type\">String</span>)=&gt;{</span><br><span class=\"line\"><span class=\"string\">\"Name:\"</span>+x</span><br><span class=\"line\">})</span><br><span class=\"line\"><span class=\"comment\">//TODO 3.应用UDF</span></span><br><span class=\"line\">spark.sql(<span class=\"string\">\"select age,prefixName(username)  from user\"</span>).show() <span class=\"comment\">//给username 加一个前缀</span></span><br><span class=\"line\"></span><br><span class=\"line\">spark.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"UDAF\"><a href=\"#UDAF\" class=\"headerlink\" title=\"UDAF\"></a><strong>UDAF</strong></h3><p><strong>强类型的Dataset 和弱类型的 DataFrame 都提供了相关的聚合函数</strong>， 如 count()countDistinct()，avg()，max()，min()。除此之外，用户可以设定自己的自定义聚合函数。通过继承 <strong>UserDefinedAggregateFunction</strong> 来实现用户自定义弱类型聚合函数。从Spark3.0 版本后，UserDefinedAggregateFunction 已经不推荐使用了。可以统一采用强类型聚合函数Aggregator</p>\n<p><code>注意关键词“聚合”，一般为多进单出类型；有使用数据库经验的小伙伴可以思考一下avg、sum、count、max、min这五个颇具代表性的聚合函数。</code></p>\n<img src=\"/posts/4c4e1572/7.png\" style=\"zoom:80%;\">\n\n<p><strong><font color=\"red\">需求：计算平均年龄</font></strong></p>\n<p> 一个需求可以采用很多种不同的方法实现需求</p>\n<h4 id=\"实现方式-RDD\"><a href=\"#实现方式-RDD\" class=\"headerlink\" title=\"实现方式 -RDD\"></a><strong>实现方式 -RDD</strong></h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">// TODO 创建SparkSQL的运行环境 利用RDD计算平均年龄</span></span><br><span class=\"line\">  <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"SparkSQL\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">val</span> spark=<span class=\"type\">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">val</span> res=spark.sparkContext.makeRDD(<span class=\"type\">List</span>((<span class=\"string\">\"zhangsan\"</span>,<span class=\"number\">20</span>),(<span class=\"string\">\"lisi\"</span>,<span class=\"number\">30</span>),(<span class=\"string\">\"wangwu\"</span>,<span class=\"number\">40</span>))).map{</span><br><span class=\"line\">    <span class=\"keyword\">case</span> (name,age)=&gt;{</span><br><span class=\"line\">    (age,<span class=\"number\">1</span>)  <span class=\"comment\">//取到（年龄，计数）</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  }.reduce{   <span class=\"comment\">//聚合 年龄相加+计数相加</span></span><br><span class=\"line\">    (t1,t2)=&gt;{</span><br><span class=\"line\">      (t1._1+t2._1,+t1._2+t2._2)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">println(res._1/res._2)</span><br><span class=\"line\">  </span><br><span class=\"line\">  spark.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h4 id=\"实现方式-累加器\"><a href=\"#实现方式-累加器\" class=\"headerlink\" title=\"实现方式 - 累加器\"></a><strong>实现方式 - 累加器</strong></h4><h4 id=\"实现方式-UDAF-弱类型\"><a href=\"#实现方式-UDAF-弱类型\" class=\"headerlink\" title=\"实现方式 -UDAF- 弱类型\"></a>实现方式 -UDAF- 弱类型</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zw.bigdata.spark.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.<span class=\"type\">SparkConf</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.sql.{<span class=\"type\">Row</span>, <span class=\"type\">SparkSession</span>}</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.sql.expressions.{<span class=\"type\">MutableAggregationBuffer</span>, <span class=\"type\">UserDefinedAggregateFunction</span>}</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.sql.types.{<span class=\"type\">DataType</span>, <span class=\"type\">LongType</span>, <span class=\"type\">StructField</span>, <span class=\"type\">StructType</span>}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/7/30</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: com.zw.bigdata.spark.sql</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Spark04_SparkSQL_UDAF</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">    <span class=\"comment\">// TODO 创建SparkSQL的运行环境  实现方式 -UDAF- 弱类型 计算年龄平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"SparkSQL\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> spark=<span class=\"type\">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> df=spark.read.json(<span class=\"string\">\"datas/user.json\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//user.json文件内容</span></span><br><span class=\"line\">      <span class=\"comment\">//{\"username\": \"zhangsan\",\"age\": 20}</span></span><br><span class=\"line\">\t  <span class=\"comment\">//{\"username\": \"lisi\",\"age\": 30} </span></span><br><span class=\"line\">      <span class=\"comment\">//{\"username\": \"wangwu\",\"age\": 40}</span></span><br><span class=\"line\">    df.createOrReplaceTempView(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\">    spark.udf.register(<span class=\"string\">\"ageAvg\"</span>,<span class=\"keyword\">new</span> <span class=\"type\">MyAvgUDAF</span>)   <span class=\"comment\">//在 spark 中注册聚合函数</span></span><br><span class=\"line\">    spark.sql(<span class=\"string\">\"select ageAvg(age)  from user\"</span>).show() </span><br><span class=\"line\"></span><br><span class=\"line\">    spark.stop()</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  自定义聚合函数类：计算年龄平均值</span></span><br><span class=\"line\"><span class=\"comment\">  1.继承UserDefinedAggregateFunction</span></span><br><span class=\"line\"><span class=\"comment\">  2.重写方法(8)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAvgUDAF</span> <span class=\"keyword\">extends</span> <span class=\"title\">UserDefinedAggregateFunction</span></span>{</span><br><span class=\"line\">    <span class=\"comment\">//输入数据的结构:Int</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inputSchema</span></span>: <span class=\"type\">StructType</span> = {</span><br><span class=\"line\">    <span class=\"type\">StructType</span>(</span><br><span class=\"line\">      <span class=\"type\">Array</span>(</span><br><span class=\"line\">        <span class=\"type\">StructField</span>(<span class=\"string\">\"age\"</span>,<span class=\"type\">LongType</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    )</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//缓冲区数据的结构:Buffer</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bufferSchema</span></span>: <span class=\"type\">StructType</span> = {</span><br><span class=\"line\">      <span class=\"type\">StructType</span>(</span><br><span class=\"line\">        <span class=\"type\">Array</span>(</span><br><span class=\"line\">          <span class=\"type\">StructField</span>(<span class=\"string\">\"total\"</span>,<span class=\"type\">LongType</span>),</span><br><span class=\"line\">          <span class=\"type\">StructField</span>(<span class=\"string\">\"count\"</span>,<span class=\"type\">LongType</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//函数计算结果的数据类型：Out</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dataType</span></span>: <span class=\"type\">DataType</span> = <span class=\"type\">LongType</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//函数的稳定性:对于相同的输入是否一直返回相同的输出</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deterministic</span></span>: <span class=\"type\">Boolean</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initialize</span></span>(buffer: <span class=\"type\">MutableAggregationBuffer</span>): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">      <span class=\"comment\">//buffer(0)=0L</span></span><br><span class=\"line\">      <span class=\"comment\">//buffer(1)=0L</span></span><br><span class=\"line\">      buffer.update(<span class=\"number\">0</span>,<span class=\"number\">0</span>L)<span class=\"comment\">// 存年龄的总和</span></span><br><span class=\"line\">      buffer.update(<span class=\"number\">1</span>,<span class=\"number\">0</span>L)<span class=\"comment\">// 存年龄的个数</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据输入的值更新缓冲区数据</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span></span>(buffer: <span class=\"type\">MutableAggregationBuffer</span>, input: <span class=\"type\">Row</span>): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">      buffer.update(<span class=\"number\">0</span>,buffer.getLong(<span class=\"number\">0</span>)+input.getLong(<span class=\"number\">0</span>))</span><br><span class=\"line\">      buffer.update(<span class=\"number\">1</span>,buffer.getLong(<span class=\"number\">1</span>)+<span class=\"number\">1</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区数据合并</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span></span>(buffer1: <span class=\"type\">MutableAggregationBuffer</span>, buffer2: <span class=\"type\">Row</span>): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">      buffer1.update(<span class=\"number\">0</span>,buffer1.getLong(<span class=\"number\">0</span>)+buffer2.getLong(<span class=\"number\">0</span>))</span><br><span class=\"line\">      buffer1.update(<span class=\"number\">1</span>,buffer1.getLong(<span class=\"number\">1</span>)+buffer2.getLong(<span class=\"number\">1</span>))</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate</span></span>(buffer: <span class=\"type\">Row</span>): <span class=\"type\">Any</span> = {</span><br><span class=\"line\">      buffer.getLong(<span class=\"number\">0</span>)/buffer.getLong(<span class=\"number\">1</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"comment\">//+--------------+</span></span><br><span class=\"line\"><span class=\"comment\">//|myavgudaf(age)|</span></span><br><span class=\"line\"><span class=\"comment\">//+--------------+</span></span><br><span class=\"line\"><span class=\"comment\">//|            30|</span></span><br><span class=\"line\"><span class=\"comment\">//+--------------+</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"实现方式-UDAF-强类型\"><a href=\"#实现方式-UDAF-强类型\" class=\"headerlink\" title=\"实现方式 -UDAF- 强类型\"></a>实现方式 -UDAF- 强类型</h4><p><font color=\"red\">Spark3.0 版本可以采用强类型的 Aggregator 方式代替 UserDefinedAggregateFunction</font></p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zw.bigdata.spark.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.<span class=\"type\">SparkConf</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.sql.expressions.<span class=\"type\">Aggregator</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.sql.{<span class=\"type\">Encoder</span>, <span class=\"type\">Encoders</span>, <span class=\"type\">Row</span>, <span class=\"type\">SparkSession</span>, functions}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/7/30</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: com.zw.bigdata.spark.sql</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Spark04_SparkSQL_UDAF1</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">    <span class=\"comment\">// TODO 创建SparkSQL的运行环境  实现方式 -UDAF- 强类型 计算年龄平均值</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"SparkSQL\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> spark=<span class=\"type\">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> df=spark.read.json(<span class=\"string\">\"datas/user.json\"</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//user.json文件内容</span></span><br><span class=\"line\">      <span class=\"comment\">//{\"username\": \"zhangsan\",\"age\": 20}</span></span><br><span class=\"line\">\t  <span class=\"comment\">//{\"username\": \"lisi\",\"age\": 30} </span></span><br><span class=\"line\">      <span class=\"comment\">//{\"username\": \"wangwu\",\"age\": 40}</span></span><br><span class=\"line\"></span><br><span class=\"line\">    df.createOrReplaceTempView(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\">    spark.udf.register(<span class=\"string\">\"ageAvg\"</span>,functions.udaf(<span class=\"keyword\">new</span> <span class=\"type\">MyAvgUDAF</span>))  <span class=\"comment\">//  将强类型转换为弱类型的操作 functions.udaf(agg)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    spark.sql(<span class=\"string\">\"select ageAvg(age)  from user\"</span>).show() </span><br><span class=\"line\"></span><br><span class=\"line\">    spark.stop()</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  自定义聚合函数类：计算年龄平均值</span></span><br><span class=\"line\"><span class=\"comment\">  1.继承org.apache.spark.sql.expressions 定义泛型 把类型定义好了才能用强类型操作数据</span></span><br><span class=\"line\"><span class=\"comment\">      IN:  输入的数据类型Long</span></span><br><span class=\"line\"><span class=\"comment\">      BUF: 缓冲区的数据类型 BUFF</span></span><br><span class=\"line\"><span class=\"comment\">      OUT: 输出的数据类型 Long</span></span><br><span class=\"line\"><span class=\"comment\">  2.重写方法(6)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Buff</span>(<span class=\"params\">var total:<span class=\"type\">Long</span>,var count:<span class=\"type\">Long</span></span>)  <span class=\"comment\">//样例类</span></span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAvgUDAF</span> <span class=\"keyword\">extends</span> <span class=\"title\">Aggregator</span>[<span class=\"type\">Long</span>,<span class=\"type\">Buff</span>,<span class=\"type\">Long</span>]</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//z &amp; zero 初始值或零值</span></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区的初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zero</span></span>: <span class=\"type\">Buff</span> = {</span><br><span class=\"line\">      <span class=\"type\">Buff</span>(<span class=\"number\">0</span>L,<span class=\"number\">0</span>L)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据输入的数据更新缓冲区的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reduce</span></span>(buff: <span class=\"type\">Buff</span>, in: <span class=\"type\">Long</span>): <span class=\"type\">Buff</span> = {</span><br><span class=\"line\">      buff.total=buff.total+in  <span class=\"comment\">//年龄增加  </span></span><br><span class=\"line\">      buff.count=buff.count+<span class=\"number\">1</span>   <span class=\"comment\">//计数</span></span><br><span class=\"line\">      buff</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//合并缓冲区</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span></span>(buff1: <span class=\"type\">Buff</span>, buff2: <span class=\"type\">Buff</span>): <span class=\"type\">Buff</span> = {</span><br><span class=\"line\">      buff1.total=buff1.total+buff2.total</span><br><span class=\"line\">      buff1.count=buff1.count+buff2.count</span><br><span class=\"line\">      buff1                      <span class=\"comment\">//返回合 合并后的缓冲区</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span></span>(buff: <span class=\"type\">Buff</span>): <span class=\"type\">Long</span> = {</span><br><span class=\"line\">      buff.total/buff.count   <span class=\"comment\">//年龄总数/计数  求平均值</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区编码操作  固定写法  自定义类：product</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bufferEncoder</span></span>: <span class=\"type\">Encoder</span>[<span class=\"type\">Buff</span>] = <span class=\"type\">Encoders</span>.product</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//输出的编码操作  固定写法  scala存在的类：scalaLong</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outputEncoder</span></span>: <span class=\"type\">Encoder</span>[<span class=\"type\">Long</span>] = <span class=\"type\">Encoders</span>.scalaLong</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">////结果：</span></span><br><span class=\"line\"><span class=\"comment\">//+--------------+</span></span><br><span class=\"line\"><span class=\"comment\">//|myavgudaf(age)|</span></span><br><span class=\"line\"><span class=\"comment\">//+--------------+</span></span><br><span class=\"line\"><span class=\"comment\">//|            30|</span></span><br><span class=\"line\"><span class=\"comment\">//+--------------+</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"实现方式-UDAD-早期强类型函数实现\"><a href=\"#实现方式-UDAD-早期强类型函数实现\" class=\"headerlink\" title=\"实现方式 -UDAD- 早期强类型函数实现\"></a>实现方式 -UDAD- 早期强类型函数实现</h4><figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zw.bigdata.spark.sql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.<span class=\"type\">SparkConf</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.sql.expressions.<span class=\"type\">Aggregator</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.spark.sql.{<span class=\"type\">Dataset</span>, <span class=\"type\">Encoder</span>, <span class=\"type\">Encoders</span>, <span class=\"type\">SparkSession</span>, <span class=\"type\">TypedColumn</span>, functions}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @Auther:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2022/7/30</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: com.zw.bigdata.spark.sql</span></span><br><span class=\"line\"><span class=\"comment\"> * @Version:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Spark04_SparkSQL_UDAF2</span> </span>{</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = {</span><br><span class=\"line\">    <span class=\"comment\">// TODO 创建SparkSQL的运行环境  实现方式 -UDAF- 强类型</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>).setAppName(<span class=\"string\">\"SparkSQL\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> spark=<span class=\"type\">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class=\"line\">    <span class=\"keyword\">import</span> spark.implicits._</span><br><span class=\"line\">    <span class=\"keyword\">val</span> df=spark.read.json(<span class=\"string\">\"datas/user.json\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//早期版本中，spark不能在sql中使用强类型UDAF操作</span></span><br><span class=\"line\">    <span class=\"comment\">//SQL:结构化 &amp; DSL：面向对象</span></span><br><span class=\"line\">    <span class=\"comment\">//早期的UDAF强类型聚合函数使用DSL语法操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> ds: <span class=\"type\">Dataset</span>[<span class=\"type\">User</span>] = df.as[<span class=\"type\">User</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将UDAF函数转换为查询的列对象</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> udadCol: <span class=\"type\">TypedColumn</span>[<span class=\"type\">User</span>, <span class=\"type\">Long</span>] = <span class=\"keyword\">new</span> <span class=\"type\">MyAvgUDAF</span>().toColumn</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//DSL语法</span></span><br><span class=\"line\">    ds.select(udadCol).show()</span><br><span class=\"line\"></span><br><span class=\"line\">    spark.stop()</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span>(<span class=\"params\">username:<span class=\"type\">String</span>,age:<span class=\"type\">Long</span></span>)</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Buff</span>(<span class=\"params\">var total:<span class=\"type\">Long</span>,var count:<span class=\"type\">Long</span></span>)  <span class=\"comment\">//样例类</span></span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAvgUDAF</span> <span class=\"keyword\">extends</span> <span class=\"title\">Aggregator</span>[<span class=\"type\">User</span>,<span class=\"type\">Buff</span>,<span class=\"type\">Long</span>]</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//z &amp; zero 初始值或零值</span></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区的初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zero</span></span>: <span class=\"type\">Buff</span> = {</span><br><span class=\"line\">      <span class=\"type\">Buff</span>(<span class=\"number\">0</span>L,<span class=\"number\">0</span>L)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据输入的数据更新缓冲区的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reduce</span></span>(buff: <span class=\"type\">Buff</span>, in: <span class=\"type\">User</span>): <span class=\"type\">Buff</span> = {</span><br><span class=\"line\">      buff.total=buff.total+in.age  <span class=\"comment\">//年龄增加</span></span><br><span class=\"line\">      buff.count=buff.count+<span class=\"number\">1</span>   <span class=\"comment\">//计数</span></span><br><span class=\"line\">      buff</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//合并缓冲区</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span></span>(buff1: <span class=\"type\">Buff</span>, buff2: <span class=\"type\">Buff</span>): <span class=\"type\">Buff</span> = {</span><br><span class=\"line\">      buff1.total=buff1.total+buff2.total</span><br><span class=\"line\">      buff1.count=buff1.count+buff2.count</span><br><span class=\"line\">      buff1                      <span class=\"comment\">//返回合 合并后的缓冲区</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//计算结果</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span></span>(buff: <span class=\"type\">Buff</span>): <span class=\"type\">Long</span> = {</span><br><span class=\"line\">      buff.total/buff.count</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区编码操作  固定写法  自定义类：product</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bufferEncoder</span></span>: <span class=\"type\">Encoder</span>[<span class=\"type\">Buff</span>] = <span class=\"type\">Encoders</span>.product</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//输出的编码操作  固定写法  scala存在的类：scalaLong</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">outputEncoder</span></span>: <span class=\"type\">Encoder</span>[<span class=\"type\">Long</span>] = <span class=\"type\">Encoders</span>.scalaLong</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">////结果：</span></span><br><span class=\"line\"><span class=\"comment\">//+---------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"comment\">//|MyAvgUDAF(com.zw.bigdata.spark.sql.Spark04_SparkSQL_UDAF2$User)|</span></span><br><span class=\"line\"><span class=\"comment\">//+---------------------------------------------------------------+</span></span><br><span class=\"line\"><span class=\"comment\">//|                                                             30|</span></span><br><span class=\"line\"><span class=\"comment\">//+---------------------------------------------------------------+</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"数据的加载和保存\"><a href=\"#数据的加载和保存\" class=\"headerlink\" title=\"数据的加载和保存\"></a><strong>数据的加载和保存</strong></h3><h4 id=\"通用的加载和保存方式\"><a href=\"#通用的加载和保存方式\" class=\"headerlink\" title=\"通用的加载和保存方式\"></a><strong>通用的加载和保存方式</strong></h4><p>SparkSQL 提供了通用的保存数据和数据加载的方式。这里的通用指的是使用相同的API，根据不同的参数读取和保存不同格式的数据，SparkSQL 默认读取和保存的文件格式为 <strong>parquet</strong></p>\n<p><strong>加载数据</strong></p>\n<p><font color=\"red\">spark.read.load</font> 是加载数据的通用方法</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; spark.read.</span><br><span class=\"line\">csv  table\tformat\ttext\tjdbc\tjson\ttextFile\tload\toption\toptions\torc\tparquet\tschema</span><br><span class=\"line\">table\ttext\ttextFile</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">val</span> df=spark.read.format(<span class=\"string\">\"json\"</span>).load(<span class=\"string\">\"input/user.json\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//     val df=spark.read.json(\"input/json\")</span></span><br><span class=\"line\">df: org.apache.spark.sql.<span class=\"type\">DataFrame</span> = [age: bigint, username: string]</span><br><span class=\"line\"></span><br><span class=\"line\">scala&gt; df.show</span><br><span class=\"line\">+---+--------+</span><br><span class=\"line\">|age|username|</span><br><span class=\"line\">+---+--------+</span><br><span class=\"line\">| <span class=\"number\">30</span>|zhangsan|</span><br><span class=\"line\">| <span class=\"number\">20</span>|zhangsan|</span><br><span class=\"line\">| <span class=\"number\">40</span>|zhangsan|</span><br><span class=\"line\">+---+--------+</span><br><span class=\"line\"><span class=\"comment\">//使用DSL语法不用创建表，SQL要创建表</span></span><br><span class=\"line\"><span class=\"comment\">//scala&gt;spark.sql(\"select * from json.`/opt/module/data/user.json`\").show</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//默认保存Parquet文件</span></span><br><span class=\"line\">scala&gt; df.write.save(<span class=\"string\">\"output1\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定保存json文件</span></span><br><span class=\"line\">scala&gt; df.writeformat(<span class=\"string\">\"json\"</span>).save(<span class=\"string\">\"output1\"</span>)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果文件已经存在则追加</span></span><br><span class=\"line\">scala&gt; df.write.format(<span class=\"string\">\"json\"</span>).mode(<span class=\"string\">\"append\"</span>).save(<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果文件已经存在则覆盖</span></span><br><span class=\"line\">scala&gt; df.write.format(<span class=\"string\">\"json\"</span>).mode(<span class=\"string\">\"overwrite\"</span>).save(<span class=\"string\">\"output\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果文件已经存在则忽略</span></span><br><span class=\"line\">scala&gt; df.write.format(<span class=\"string\">\"json\"</span>).mode(<span class=\"string\">\"ignore\"</span>).save(<span class=\"string\">\"output\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Parquet\"><a href=\"#Parquet\" class=\"headerlink\" title=\"Parquet\"></a>Parquet</h4><p>Spark SQL 的默认数据源为 <font color=\"red\">Parquet 格式</font>。Parquet 是一种能够有效存储嵌套数据的列式存储格式。</p>\n<p>数据源为 Parquet 文件时，Spark SQL 可以方便的执行所有的操作，不需要使用 format。修改配置项<font color=\"red\">spark.sql.sources.default</font>，可修改默认数据源格式。</p>\n<h4 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h4><p>Spark SQL 能够自动推测 JSON 数据集的结构，并将它加载为一个Dataset[Row]. 可以通过 SparkSession.read.json()去加载 JSON 文件。</p>\n<p><font color=\"red\">注意：Spark 读取的 JSON 文件不是传统的JSON 文件，每一行都应该是一个 JSON 串</font></p>\n<p>格式如下：</p>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span><span class=\"attr\">\"name\"</span><span class=\"punctuation\">:</span><span class=\"string\">\"Michael\"</span><span class=\"punctuation\">}</span></span><br><span class=\"line\"><span class=\"punctuation\">{</span><span class=\"attr\">\"name\"</span><span class=\"punctuation\">:</span><span class=\"string\">\"Andy\"</span>， <span class=\"attr\">\"age\"</span><span class=\"punctuation\">:</span><span class=\"number\">30</span><span class=\"punctuation\">}</span></span><br><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"punctuation\">{</span><span class=\"attr\">\"name\"</span><span class=\"punctuation\">:</span><span class=\"string\">\"Justin\"</span>， <span class=\"attr\">\"age\"</span><span class=\"punctuation\">:</span><span class=\"number\">19</span><span class=\"punctuation\">}</span><span class=\"punctuation\">,</span><span class=\"punctuation\">{</span><span class=\"attr\">\"name\"</span><span class=\"punctuation\">:</span><span class=\"string\">\"Justin\"</span>， <span class=\"attr\">\"age\"</span><span class=\"punctuation\">:</span><span class=\"number\">19</span><span class=\"punctuation\">}</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a><strong>CSV</strong></h4><p>Spark SQL 可以配置 CSV 文件的列表信息，读取CSV 文件,CSV 文件的第一行设置为数据列</p>\n<p>spark-3.0.0-bin-hadoop3.2\\examples\\src\\main\\resources\\people.csv</p>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; <span class=\"keyword\">var</span>                    df=spark.read.format(<span class=\"string\">\"csv\"</span>).option(<span class=\"string\">\"sep\"</span>,<span class=\"string\">\";\"</span>).option(<span class=\"string\">\"inferSchema\"</span>,<span class=\"string\">\"true\"</span>).option(<span class=\"string\">\"header\"</span>,<span class=\"string\">\"true\"</span>).load(<span class=\"string\">\"../examples/src/main/resources/people.csv\"</span>)</span><br><span class=\"line\">scala&gt; df.show</span><br><span class=\"line\">+-----+---+---------+</span><br><span class=\"line\">| name|age|      job|</span><br><span class=\"line\">+-----+---+---------+</span><br><span class=\"line\">|<span class=\"type\">Jorge</span>| <span class=\"number\">30</span>|<span class=\"type\">Developer</span>|</span><br><span class=\"line\">|  <span class=\"type\">Bob</span>| <span class=\"number\">32</span>|<span class=\"type\">Developer</span>|</span><br><span class=\"line\">+-----+---+---------+</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a><strong>MySQL</strong></h4><p>Spark SQL 可以通过 JDBC 从关系型数据库中读取数据的方式创建DataFrame，通过对DataFrame 一系列的计算后，还可以将数据再写回关系型数据库中。如果使用 spark-shell 操作，可在启动shell 时指定相关的数据库驱动路径或者将相关的数据库驱动放到 spark 的类路径下</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">bin/spark-shell</span><br><span class=\"line\">--jars mysql-connector-java-5.1.27-bin.jar</span><br></pre></td></tr></tbody></table></figure>\n\n<p>我们这里只演示在Idea 中通过 JDBC 对 Mysql 进行操作</p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--按照本机对应mysql版本进行设置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO 创建SparkSQL的运行环境</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> sparkConf=<span class=\"keyword\">new</span> <span class=\"type\">SparkConf</span>().setMaster(<span class=\"string\">\"local[*]\"</span>) .setAppName(<span class=\"string\">\"SparkSQL\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> spark=<span class=\"type\">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class=\"line\"><span class=\"keyword\">import</span> spark.implicits._</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取Mysql数据</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> df=spark.read</span><br><span class=\"line\">  .format(<span class=\"string\">\"jdbc\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"url\"</span>, <span class=\"string\">\"jdbc:mysql://localhost:3306/spark-sql\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"driver\"</span>, <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"root\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"123456\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"dbtable\"</span>, <span class=\"string\">\"user\"</span>)</span><br><span class=\"line\">  .load()</span><br><span class=\"line\"><span class=\"comment\">//df.show()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存数据</span></span><br><span class=\"line\">df.write</span><br><span class=\"line\">  .format(<span class=\"string\">\"jdbc\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"url\"</span>, <span class=\"string\">\"jdbc:mysql://localhost:3306/spark-sql\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"driver\"</span>, <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"user\"</span>, <span class=\"string\">\"root\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"123456\"</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">\"dbtable\"</span>, <span class=\"string\">\"user1\"</span>)   <span class=\"comment\">//保存user1表</span></span><br><span class=\"line\">  .mode(<span class=\"type\">SaveMode</span>.<span class=\"type\">Append</span>)  <span class=\"comment\">//涉及到出错问题</span></span><br><span class=\"line\">  .save()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//TODO 关闭环境</span></span><br><span class=\"line\">spark.stop()</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h4><p>​        Apache Hive 是 Hadoop 上的 SQL 引擎，Spark SQL 编译时可以包含 Hive 支持，也可以不包含。包含 Hive 支持的 Spark SQL 可以支持 Hive 表访问、UDF (用户自定义函数)以及 Hive 查询语言(HiveQL/HQL)等。需要强调的一点是，如果要在 Spark SQL 中包含Hive 的库，并不需要事先安装 Hive。一般来说，最好还是在编译 Spark SQL 时引入 Hive 支持，这样就可以使用这些特性了。如果你下载的是二进制版本的 Spark，它应该已经在编译时添加了 Hive 支持。</p>\n<p>​       若要把 Spark SQL 连接到一个部署好的 Hive 上，你必须把 hive-site.xml 复制到Spark 的配置文件目录中($SPARK_HOME/conf)。即使没有部署好 Hive，Spark SQL 也可以运行。 需要注意的是，如果你没有部署好 Hive，Spark SQL 会在当前的工作目录中创建出自己的 Hive 元数据仓库，叫作 metastore_db。此外，如果你尝试使用 HiveQL 中的CREATE TABLE (并非 CREATE EXTERNAL TABLE)语句来创建表，这些表会被放在你默认的文件系统中的 /user/hive/warehouse 目录中(如果你的 classpath 中有配好的hdfs-site.xml，默认的文件系统就是 HDFS，否则就是本地文件系统)。</p>\n<p>spark-shell 默认是Hive 支持的；代码中是默认不支持的，需要手动指定（加一个参数即可）。</p>\n<h5 id=\"外部的Hive\"><a href=\"#外部的Hive\" class=\"headerlink\" title=\"外部的Hive\"></a>外部的Hive</h5><p>如果想连接外部已经部署好的Hive，需要通过以下几个步骤：</p>\n<ul>\n<li><p>Spark 要接管 Hive 需要把hive-site.xml 拷贝到conf/目录下</p>\n</li>\n<li><p>把 Mysql 的驱动 copy 到 jars/目录下</p>\n</li>\n<li><p>如果访问不到 hdfs，则需要把 core-site.xml 和 hdfs-site.xml 拷贝到 conf/目录下</p>\n</li>\n<li><p>重启 spark-shell</p>\n</li>\n</ul>\n<figure class=\"highlight scala\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scala&gt; spark.sql(<span class=\"string\">\"show tables\"</span>).show</span><br></pre></td></tr></tbody></table></figure>\n\n<h5 id=\"IDEA代码操作Hive\"><a href=\"#IDEA代码操作Hive\" class=\"headerlink\" title=\"IDEA代码操作Hive\"></a>IDEA代码操作Hive</h5><p><a href=\"https://blog.csdn.net/weixin_36040866/article/details/124567017?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=IDEA%20spark%E8%BF%9E%E6%8E%A5hive&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-124567017.142\">https://blog.csdn.net/weixin_36040866/article/details/124567017?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=IDEA%20spark%E8%BF%9E%E6%8E%A5hive&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-124567017.142</a></p>\n","categories":["大数据"],"tags":["大数据"]},{"title":"equals的若干问题解答","url":"/posts/121ff1e2/","content":"<p>详细解答：<a href=\"https://www.cnblogs.com/skywang12345/p/3324958.html\">Java hashCode() 和 equals()的若干问题解答</a></p>\n<h1 id=\"引用于：javaGuide-做的笔记\"><a href=\"#引用于：javaGuide-做的笔记\" class=\"headerlink\" title=\"引用于：javaGuide 做的笔记\"></a>引用于：javaGuide 做的笔记</h1><h2 id=\"String-equals-和-Object-equals-有何区别？\"><a href=\"#String-equals-和-Object-equals-有何区别？\" class=\"headerlink\" title=\"String#equals() 和 Object#equals() 有何区别？\"></a>String#equals() 和 Object#equals() 有何区别？</h2><ol>\n<li>操作少量的数据: 适用 String</li>\n<li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li>\n<li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li>\n</ol>\n<p>String 中的 equals 方法是被重写过的，比较的是 String 字符串的值是否相等。 Object 的 equals 方法是比较的对象的内存地址。</p>\n<h2 id=\"String-s1-x3D-new-String-“abc”-这句话创建了几个字符串对象？\"><a href=\"#String-s1-x3D-new-String-“abc”-这句话创建了几个字符串对象？\" class=\"headerlink\" title=\"String s1 = new String(“abc”);这句话创建了几个字符串对象？\"></a>String s1 = new String(“abc”);这句话创建了几个字符串对象？</h2><p>会创建 1 或 2 个字符串：</p>\n<ul>\n<li>如果字符串常量池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。</li>\n<li>如果字符串常量池中没有字符串常量“abc”，那么它将首先在字符串常量池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</li>\n</ul>\n<p>验证：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"abc\"</span>);<span class=\"comment\">// 堆内存的地址值</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">System.out.println(s1 == s2);<span class=\"comment\">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class=\"line\">System.out.println(s1.equals(s2));<span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"String-类型的变量和常量做“-”运算时发生了什么？\"><a href=\"#String-类型的变量和常量做“-”运算时发生了什么？\" class=\"headerlink\" title=\"String 类型的变量和常量做“+”运算时发生了什么？\"></a>String 类型的变量和常量做“+”运算时发生了什么？</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">\"str\"</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">\"ing\"</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> <span class=\"string\">\"str\"</span> + <span class=\"string\">\"ing\"</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span> str1 + str2; <span class=\"comment\">//在堆上创建的新的对象</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str5</span> <span class=\"operator\">=</span> <span class=\"string\">\"string\"</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">System.out.println(str3 == str4);<span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(str3 == str5);<span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(str4 == str5);<span class=\"comment\">//false</span></span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"/posts/121ff1e2/1.jpg\" alt=\"1\"><br>注意 ：比较 String 字符串的值是否相等，可以使用 equals() 方法。 String 中的 equals 方法是被重写过的。 Object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是字符串的值是否相等。如果你使用 == 比较两个字符串是否相等的话，IDEA 还是提示你使用 equals() 方法替换。</p>\n<blockquote>\n<p>对于基本数据类型来说，== 比较的是值。对于引用数据类型来说，==比较的是对象的内存地址。</p>\n</blockquote>\n<p> 对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。</p>\n<p> <code>字符串常量池</code> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。<br> </p><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"type\">String</span> <span class=\"variable\">aa</span> <span class=\"operator\">=</span> <span class=\"string\">\"ab\"</span>; <span class=\"comment\">// 放在常量池中</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> <span class=\"string\">\"ab\"</span>; <span class=\"comment\">// 从常量池中查找</span></span><br><span class=\"line\">System.out.println(aa==bb);<span class=\"comment\">// true</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n","categories":["Java"],"tags":["equals的若干问题解答"]},{"title":"Scrapy","url":"/posts/6b8faf09/","content":"<h1 id=\"Scrapy\"><a href=\"#Scrapy\" class=\"headerlink\" title=\"Scrapy\"></a>Scrapy</h1><h2 id=\"Scrapy是什么？\"><a href=\"#Scrapy是什么？\" class=\"headerlink\" title=\"Scrapy是什么？\"></a>Scrapy是什么？</h2><p> Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理 或存储历史数据等一系列的程序中。</p>\n<p>安装scrapy：<br><strong>pip install scrapy</strong></p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">spiders</span><br><span class=\"line\">\t__init__.py</span><br><span class=\"line\">\t自定义的爬虫文件.py ‐‐‐》由我们自己创建，是实现爬虫核心功能的文件</span><br><span class=\"line\">__init__.py</span><br><span class=\"line\">items.py ‐‐‐》定义数据结构的地方，是一个继承自scrapy.Item的类</span><br><span class=\"line\">middlewares.py ‐‐‐》中间件 代理</span><br><span class=\"line\">pipelines.py ‐‐‐》管道文件，里面只有一个类，用于处理下载数据的后续处理默认是<span class=\"number\">300</span>优先级，值越小优先级越高（<span class=\"number\">1</span>‐<span class=\"number\">1000</span>）</span><br><span class=\"line\">settings.py ‐‐‐》配置文件 比如：是否遵守robots协议，User‐Agent定义等</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">注意：应在spiders文件夹内执</span><br><span class=\"line\"></span><br><span class=\"line\">创建项目：</span><br><span class=\"line\">scrapy startproject 项目名</span><br><span class=\"line\"></span><br><span class=\"line\">创建爬虫文件：</span><br><span class=\"line\">scrapy genspider 爬虫名 域名</span><br><span class=\"line\"></span><br><span class=\"line\">运行：</span><br><span class=\"line\">scrapy crawl 爬虫名</span><br></pre></td></tr></tbody></table></figure>\n\n<p>创建后目录大致页如下</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">|-ProjectName              #项目文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">   |-ProjectName           #项目目录</span><br><span class=\"line\">         |-spiders               </span><br><span class=\"line\">    </span><br><span class=\"line\">          |-__init__.py       #爬虫文件</span><br><span class=\"line\">    </span><br><span class=\"line\">          |-baidu.py          #自定义的爬虫文件 核心功能</span><br><span class=\"line\"></span><br><span class=\"line\">      |-items.py               #定义数据结构</span><br><span class=\"line\">    </span><br><span class=\"line\">      |-middlewares.py        #中间件</span><br><span class=\"line\">    </span><br><span class=\"line\">      |-pipelines.py          #数据处理</span><br><span class=\"line\">    </span><br><span class=\"line\">      |-settings.py            #全局配置</span><br><span class=\"line\"></span><br><span class=\"line\">   |-scrapy.cfg               #项目基本配置文件</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"Scrapy架构\"><a href=\"#Scrapy架构\" class=\"headerlink\" title=\"Scrapy架构\"></a>Scrapy架构</h2><h3 id=\"Scrapy架构组成\"><a href=\"#Scrapy架构组成\" class=\"headerlink\" title=\"Scrapy架构组成\"></a>Scrapy架构组成</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">（1）引擎 ‐‐‐》自动运行，无需关注，会自动组织所有的请求对象，分发给下载器</span><br><span class=\"line\">（2）下载器 ‐‐‐》从引擎处获取到请求对象后，请求数据</span><br><span class=\"line\">（3）spiders ‐‐‐》Spider类定义了如何爬取某个(或某些)网站。包括了爬取的动作(例如:是否跟进链接)以及如何从网页的内容中提取结构化数据(爬取item)。 换句话说，Spider就是您定义爬取的动作及分析某个网页(或者是有些网页)的地方。</span><br><span class=\"line\">（4）调度器 ‐‐‐》有自己的调度规则，无需关注</span><br><span class=\"line\">（5）管道（Item pipeline） ‐‐‐》最终处理数据的管道，会预留接口供我们处理数据当Item在Spider中被收集之后，它将会被传递到Item Pipeline，一些组件会按照一定的顺序执行对Item的处理。每个item pipeline组件(有时称之为“Item Pipeline”)是实现了简单方法的Python类。他们接收到Item并通过它执行一些行为，同时也决定此Item是否继续通过pipeline，或是被丢弃而不再进行处理。</span><br><span class=\"line\">以下是item pipeline的一些典型应用：</span><br><span class=\"line\">1. 清理HTML数据</span><br><span class=\"line\">2. 验证爬取的数据(检查item包含某些字段)</span><br><span class=\"line\">3. 查重(并丢弃)</span><br><span class=\"line\">4. 将爬取结果保存到数据库中</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"Scrapy工作原理\"><a href=\"#Scrapy工作原理\" class=\"headerlink\" title=\"Scrapy工作原理\"></a>Scrapy工作原理</h3><img src=\"/posts/6b8faf09/1.png\" style=\"zoom:80%;\">\n\n<img src=\"/posts/6b8faf09/2.png\" style=\"zoom:80%;\">\n\n<h2 id=\"全局配置文件settings-py\"><a href=\"#全局配置文件settings-py\" class=\"headerlink\" title=\"全局配置文件settings.py\"></a>全局配置文件settings.py</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">BOT_NAME = <span class=\"string\">'scrapy_baidu_091'</span>  <span class=\"comment\">#项目名</span></span><br><span class=\"line\">ROBOTSTXT_OBEY = <span class=\"literal\">False</span> \t\t   <span class=\"comment\">#是否遵循机器人协议</span></span><br><span class=\"line\">CONCURRENT_REQUESTS = <span class=\"number\">32</span>       <span class=\"comment\">#最大并发数</span></span><br><span class=\"line\">DOWNLOAD_DELAY = <span class=\"number\">3</span>   \t\t   <span class=\"comment\">#下载延迟时间</span></span><br><span class=\"line\">COOKIES_ENABLED = <span class=\"literal\">False</span>        <span class=\"comment\">#是否保存Cookies</span></span><br><span class=\"line\">DEFAULT_REQUEST_HEADERS = {    <span class=\"comment\">#默认请求头</span></span><br><span class=\"line\">   <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class=\"line\">   <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'en'</span>,</span><br><span class=\"line\">}</span><br><span class=\"line\">ITEM_PIPELINES = {             <span class=\"comment\">#项目管道，300为优先级，越低爬取的优先度越高</span></span><br><span class=\"line\">   <span class=\"string\">'scrapy_baidu_091.pipelines.ScrapyBaidu091Pipeline'</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"转载原文链接\"><a href=\"#转载原文链接\" class=\"headerlink\" title=\"转载原文链接\"></a>转载原文链接</h1><p><a href=\"https://www.cnblogs.com/value-code/p/8270037.html\">爬虫基本原理及requests,response详解</a></p>\n<p><a href=\"https://blog.csdn.net/ck784101777/article/details/104468780\">Scrapy爬虫框架，入门案例(非常详细)</a></p>\n","categories":["Python"],"tags":["python"]},{"title":"Vue3+Echarts笔记","url":"/posts/a1fe1312/","content":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><a href=\"https://unpkg.com/browse/vue@3.2.31/dist/\">vue3下载自动托管</a></p>\n<p><a href=\"https://unpkg.com/vue@3.2.31/dist/vue.global.js\">vue.global.js</a><strong><font color=\"ondine\">另存为</font></strong></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../js/vue.global.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>CDN方式</strong></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><p>语法声明</p>\n<p>1.创建createApp函数</p>\n<p>2.将声明的函数需要挂载到某个HTML元素上（即映射）</p>\n<h2 id=\"语法声明\"><a href=\"#语法声明\" class=\"headerlink\" title=\"语法声明\"></a>语法声明</h2><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue语法使用<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--1.引入Vue--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hello-vue\"</span>&gt;</span></span><br><span class=\"line\">        {{ message }}</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--2.定义在Script标签中--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//3.创建一个createApp函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> <span class=\"title class_\">HelloVueapp</span> =<span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//声明createApp的配置选项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">message</span>:<span class=\"string\">\"Hello vue!!\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        });</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">HelloVueapp</span>.<span class=\"title function_\">mount</span>(<span class=\"string\">'#hello-vue'</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><code>{{}}</code>：用于输出对象的属性信息，或者可以返回值。</li>\n<li><code>{{message}}</code>：对应应用中message属性的值。</li>\n<li><code>mount('选择器')</code>：表示将Vue得到的应用HelloVueapp作用在某个元素（挂载到某个元素上）。</li>\n<li><code>Vue.createApp({})</code>：表示创建一个Vue的应用，并且指定这个应用的初始化配置，需要声明在{}中。</li>\n</ul>\n<h2 id=\"data选项\"><a href=\"#data选项\" class=\"headerlink\" title=\"data选项\"></a>data选项</h2><p>data是函数。Vue在创建组件的时候，会自动调用函数此函数。它会返回一个对象，然后Vue会把这个对象保存起来，并且保存到了$data这样的一个属性中。</p>\n<h2 id=\"methods方法\"><a href=\"#methods方法\" class=\"headerlink\" title=\"methods方法\"></a>methods方法</h2><p>方法需要使用一个属性 <strong><font color=\"blue\">methods</font></strong> (可以有多个方法定义)</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Vue.createApp({</span><br><span class=\"line\">\tmethods:{</span><br><span class=\"line\">        方法1(参数列表声明){</span><br><span class=\"line\"></span><br><span class=\"line\">        }</span><br><span class=\"line\">        方法1(参数列表声明){</span><br><span class=\"line\">            return ...;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    }</span><br><span class=\"line\">});</span><br></pre></td></tr></tbody></table></figure>\n\n<p>放在createApp({放在方法的声明部分})</p>\n<h1 id=\"Vue3模板语法\"><a href=\"#Vue3模板语法\" class=\"headerlink\" title=\"Vue3模板语法\"></a>Vue3模板语法</h1><p>运行开发者将DOM（元素）绑定至底层Vue实例数据上</p>\n<h2 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h2><h3 id=\"文本插值\"><a href=\"#文本插值\" class=\"headerlink\" title=\"文本插值\"></a>文本插值</h3><p>将数据绑定在某个元素上，然后通过****方式来文本插值操作</p>\n<p> <strong><font color=\"blue\">v-once</font></strong> ：指令用于表示执行一次插值操作</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"hello-vue\"</span> <span class=\"attr\">v-once</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--绑定文本插值,内容替换成对应的Vue组件内容的message属性的值--&gt;</span></span><br><span class=\"line\">        {{message}}</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">message</span>:<span class=\"string\">\"Hello\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#hello-vue'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"v-html指令\"><a href=\"#v-html指令\" class=\"headerlink\" title=\"v-html指令\"></a>v-html指令</h3><p>使用v-html指令来完成输出HTML代码操作。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用双大括号的文本插值：{{rawHtml}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用v-html指令:<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">v-html</span>=<span class=\"string\">'rawHtml'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>){ </span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    rawHtml :<span class=\"string\">'&lt;span style=\"color:red\"&gt;这是红色的文字 &lt;/span&gt;'</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">v-html</font></strong> 是vue的指令，含义：是将此指定的取值（某个属性的名称）作为HTML的结构进行输出，输出在所被标记的标签内部以子标签的形式出现。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p><strong><font color=\"blue\">v-bind</font></strong> 指令，用来修饰某个属性的。如果被修饰的成员值存在则该属性就显示的渲染出来。如果被修饰的输出取值为null或者undefinde,则该属性不会被渲染出来。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">inupt</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">v-bind:checked</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">v-model</font></strong> 指令：是Vue数据双向绑定的指令，属性（data函数中的属性）取值和页面元素的取值同步,v-model来显示的指定双向绑定的映射。</p>\n<h3 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h3><p>Vue.js提供的语法里是支持JavaScript表达式的支持</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--表达式是有结果的值，加减乘除，取余，三目，不等于大于小于--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        加减乘除：{{6+6}}</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        {{ok ? \"success\":\"erroy\"}}</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        {{message.split('').reverse().join('')}}</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:id</span>=<span class=\"string\">\"'list'+id\"</span>&gt;</span>Vue教程<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"'list'+id\"</span>&gt;</span>Vue教程<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">ok</span>:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">message</span>:<span class=\"string\">\"Hello\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">id</span>:<span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p><a href=\"https://blog.csdn.net/znhyXYG/article/details/125602707\">更详细指令</a></p>\n<p>指令就是v-开头的特色属性。当表达式发生改变，可以将对应的行为应用到DOM上</p>\n<p><strong><font color=\"blue\">v-html</font></strong> ：可以解析html语法</p>\n<p><strong><font color=\"blue\">v-bind</font></strong> ：属性的渲染（是否需要被渲染出来）</p>\n<p><strong><font color=\"blue\">v-model</font></strong> ：进行数据的双向绑定</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>参数在指令后以冒号来指明</p>\n<p><strong><font color=\"blue\">v-bind:参数</font><strong>，</strong><font color=\"blue\">v-bind</font><strong>指令被用来响应的更新内容</strong>HTML属性</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">指令：参数</span><br></pre></td></tr></tbody></table></figure>\n\n<p>常见的使用：</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">// v-on 指令用户表示绑定的事件</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"dosome\"</span>&gt;</span>按钮<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">// 缩写</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"dosome\"</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/ v-bind标准写法</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>小米官网<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">// 缩写</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"url\"</span>&gt;</span>小米官网<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h2><h3 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a>v-if</h3><p>条件判断使用v-if指令，指令的表达式返回true时才会显示</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span>你想不想见我<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">seen</span>:<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>多个元素：</strong></p>\n<p>这里，v-if是一个指令，所以必须将它添加到一个元素上。如果是多个元素，可以包裹在<code>&lt;template&gt;</code>在上面使用v-if。最终的渲染将不包括<code>&lt;template&gt;</code>元素</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--template表示一个模板标签，可以把多个标签看作是一个整体(模板),来进行处理--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"seen\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>网站<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>谷歌<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>字节<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">seen</span>:<span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"v-else\"><a href=\"#v-else\" class=\"headerlink\" title=\"v-else\"></a>v-else</h3><p><strong>案例：</strong></p>\n<blockquote>\n<p> 生成随机数判断 是否大于0.5</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--可以直接把返回结果为boolean类型的表达式作为参数进行传递--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"Math.random()&gt;0.5\"</span>&gt;</span></span><br><span class=\"line\">            随机数大于0.5</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--如果上述的v-if不成立，则渲染被v-else修饰的元素--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">            随机数小于0.5</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">//可以不用返回数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"v-else-if\"><a href=\"#v-else-if\" class=\"headerlink\" title=\"v-else-if\"></a>v-else-if</h3><p>v-else-if即v-if的else-if块，可以链式的使用多次。v-else、v-else-if必须跟在v-if或者 v-else-if之后。</p>\n<p><strong>案例：</strong></p>\n<blockquote>\n<p>判断type变量的值</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            v-if声明在最前面</span></span><br><span class=\"line\"><span class=\"comment\">            v-else-if声明在v-if后，并且可以有多个同时被声明</span></span><br><span class=\"line\"><span class=\"comment\">            v-else声明在条件判断的最后</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"type==='A'\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type==='B'\"</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type==='C'\"</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"type==='D'\"</span>&gt;</span>D<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span>不是:ABCD<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">type</span>:<span class=\"string\">'A'</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"v-show\"><a href=\"#v-show\" class=\"headerlink\" title=\"v-show\"></a>v-show</h3><p>我们也可以使用v-show指令来根据条件展示元素</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"ok\"</span>&gt;</span>Hello Vue3<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">ok</span>:<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><h3 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h3><p>循环使用v-for指令。v-for指令需要以<code>site in sites</code> 形式的特殊语法，sites是源数据数组并且site是数组元素迭代的别名</p>\n<p>v-for可以绑定数据到数组来渲染一个列表</p>\n<p>语法结构:</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"元素的临时变量 in 待循环的数组或集合\"</span>&gt;</span></span><br><span class=\"line\">{{元素的临时变量.属性}}</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 遍历数组</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"site in sites\"</span>&gt;</span></span><br><span class=\"line\">                {{site.text}}</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 当前属性表示数字，需要中括号来声明</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 每一个元素需要使用{}表示声明</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 每一个元素需要使用key:value的形式进行声明</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 每个元素key标记必须相同</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">sites</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">text</span>:<span class=\"string\">'张三'</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">text</span>:<span class=\"string\">'李四'</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">text</span>:<span class=\"string\">'王五'</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>v-for还支持一个可选的第二个参数index，index参数值为当前列表项的索引。</p>\n<p><code>模板&lt;template&gt;中使用v-for</code></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(site,index) in sites\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--index:参数表示的是当前遍历的索引，索引编号从0开始取值--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                当前索引第{{index+1}}次,内容是：{{site.text}}</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                =======================</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 返回的是基本类型：数字类型，直接声明</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 返回的字符串：双引号或单括号进行包裹</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">sites</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">text</span>:<span class=\"string\">\"谷歌\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">text</span>:<span class=\"string\">\"百度\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">text</span>:<span class=\"string\">\"头条\"</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"v-for迭代对象\"><a href=\"#v-for迭代对象\" class=\"headerlink\" title=\"v-for迭代对象\"></a>v-for迭代对象</h3><p>v-for可以通过一个<strong>对象的属性</strong>来迭代对象</p>\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 遍历对象输出，vlue,key,index</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--遍历对象，v-for遍历对学校是，声明临时变量(val) 存储的是被遍历的属性的值--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--key:表示当前被遍历属性的名称--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--index:表示当前遍历的索引，从0开始--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--总结参数顺序：第一个为：值，第二个为key,第三个为：索引--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(vlue,key,index) in object\"</span>&gt;</span>  </span><br><span class=\"line\">               {{index}- {{key}}:{{vlue}}</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">         * 返回对象类型的数据</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">         * 属性名：属性值</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">         * 1.要求属性值为对象类型的时候，需要使用{}进行包裹</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">         * 2.在{}内部要声明的就是当前对象的属性列表信息</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">         * 3.每组属性使用key:value的形式进行声明</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">         * 4.多个属性对之间使用\",\"\"来分割</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">        */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">object</span>:{  <span class=\"comment\">//返回为对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">name</span>:<span class=\"string\">\"百度\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">url</span>:<span class=\"string\">\"http://www.baidu.com\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">slogan</span>:<span class=\"string\">\"百度一下，那就知道\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">\"#app\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>遍历整数</strong></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in 10\"</span>&gt;</span></span><br><span class=\"line\">                {{n}}</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    </span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"显示过滤-x2F-排序后的结果\"><a href=\"#显示过滤-x2F-排序后的结果\" class=\"headerlink\" title=\"显示过滤/排序后的结果\"></a>显示过滤/排序后的结果</h3><p>我们可以对数组的元素进行处理后显示出来，一般可以通过创建一个<strong>计算属性</strong> 来返回过滤或排序后的数组</p>\n<h3 id=\"数组过滤\"><a href=\"#数组过滤\" class=\"headerlink\" title=\"数组过滤\"></a>数组过滤</h3><p><strong>案例：</strong></p>\n<blockquote>\n<p> 输出数组中的偶数</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--输出所有偶数--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"n in eventNumbers\"</span>&gt;</span>  <span class=\"comment\">&lt;!--数据源选择 包含过滤器--&gt;</span></span><br><span class=\"line\">                {{n}}</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 多个属性之间需要属于\",\"\"进行分隔</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                   <span class=\"attr\">number</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                   ] </span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 声明一个计算属性：计算属性可以在返回值之前来过滤数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 计算属性中，每一个计算的动作对应一个方法，自定义自己计算方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">eventNumbers</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// fiter表示过滤器的意思，编写过滤器的条件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">number</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">number</span>=&gt;</span>number%<span class=\"number\">2</span>===<span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 制作一个下拉列表显示，当前选中的 option</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--实现双向绑定--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"changeVal($event)\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"selectOption\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(site,index) in sites\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"site.name\"</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"index==1\"</span>&gt;</span></span><br><span class=\"line\">                    {{site.name}}</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">\"site.name\"</span> <span class=\"attr\">v-else</span>&gt;</span></span><br><span class=\"line\">                    {{site.name}}</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">           </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            你当前选中的是：{{selectOption}}</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                     <span class=\"comment\">//下拉列表的初始数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">sites</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"comment\">// {}可以声明多组key:value,每组之间使用\",\"分隔</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">id</span>:<span class=\"number\">1</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"谷歌\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">id</span>:<span class=\"number\">2</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"百度\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        {<span class=\"attr\">id</span>:<span class=\"number\">3</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"头条\"</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">selectOption</span>:<span class=\"string\">\"百度\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">changeVal</span>(<span class=\"params\">event</span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 触发对应事件的值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">selectOption</span>=event.<span class=\"property\">target</span>.<span class=\"property\">value</span>;   <span class=\"comment\">// 头条、百度、谷歌</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">//alert(\"你选中了\"+this.selectOption)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Vue3组件\"><a href=\"#Vue3组件\" class=\"headerlink\" title=\"Vue3组件\"></a>Vue3组件</h1><h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"组件介绍\"><a href=\"#组件介绍\" class=\"headerlink\" title=\"组件介绍\"></a>组件介绍</h3><p>组件 （Component） 是Vue.js最强大的功能之一。组件可以扩展HTML元素，封装可重用的代码。</p>\n<p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树。</p>\n<img src=\"/posts/a1fe1312/1.png\" style=\"zoom:50%;\">\n\n<p>每个Vue应用都是通过用createApp函数创建的，传递给createApp的选项用于配置根组件。当我们挂载应用时，该组件被用作渲染的起点。</p>\n<p>一个应用需要被挂载到DOM元素中。</p>\n<p>以下实例我们将Vue应用挂载到<code>&lt;div id=\"app\"&gt;&lt;/div&gt;</code>上，应传入’#app’参数。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">const RootComponent={<span class=\"comment\">/* 选项 */</span>}</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">app</span> <span class=\"operator\">=</span> Vue.createApp(RootComponent)</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">vm</span> <span class=\"operator\">=</span> app.mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>注册一个全局组件语法格式如下。</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">app</span> <span class=\"operator\">=</span> Vue.createApp{{...}}</span><br><span class=\"line\"></span><br><span class=\"line\">app.component(<span class=\"string\">'my-component-name'</span>,{</span><br><span class=\"line\"><span class=\"comment\">/* ..template:`&lt;h2&gt;全局组件&lt;/h2&gt;`. */</span></span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p>my-component-name为组件名，<code>/* ... */</code>部分为配置选项。注册后，我们可以使用以下方式来调用组件。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component-name</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component-name</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h3><p>全局注册的组件可以在随后创建的app实例模板中使用，也包括根实例组件树中的所有子组件的模板中。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--使用自定义的全局组件，把配置的组件名称当作HTML元素来使用--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">global-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 创建一个Vue的应用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({})</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 配置全局组件：调用component方法完成配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 参数1：表示全局组件的名称是什么</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 参数2：配置的组件对应HTML代码的元素是什么</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">component</span>(<span class=\"string\">\"global-component\"</span>,{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 配置组件的模板，需要使用提供的一个template属性来进行指定</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 模板的内容必须使用``半角符号来包裹</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">template</span>:<span class=\"string\">`&lt;h2&gt;全局组件&lt;/h2&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"组件的复用\"><a href=\"#组件的复用\" class=\"headerlink\" title=\"组件的复用\"></a>组件的复用</h3><p>可以将组件进行一次或任意次数的复用。</p>\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 注册多个button-counter组件，在每次点击后，计数器会进行加1操作。</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button-counter</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button-counter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({})</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">component</span>(<span class=\"string\">\"button-counter\"</span>,{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">count</span>:<span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">template</span>:<span class=\"string\">`&lt;button @click='count++'&gt;点了{{count}}次&lt;/button&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">\"#app\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"局部组件\"><a href=\"#局部组件\" class=\"headerlink\" title=\"局部组件\"></a>局部组件</h3><p>全局注册往往是不够理想的。比如，如果你使用一个像webpack这样的构建系统，全局注册所有的组件意味着，即使你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的JavaScript的无谓的增加。</p>\n<p>这些情况下，你可以通过一个普通的JavaScript对象来定义组件：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">ComponentA</span> <span class=\"operator\">=</span> {</span><br><span class=\"line\">    <span class=\"comment\">/* .  template:`&lt;h2&gt;局部组件&lt;/h2&gt;`  .. */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">ComponentB</span> <span class=\"operator\">=</span> {</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">ComponentC</span> <span class=\"operator\">=</span> {</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>然后在components选项中定义你想使用的组件</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"variable\">app</span> <span class=\"operator\">=</span> Vue.createApp({</span><br><span class=\"line\">    components:{</span><br><span class=\"line\">        <span class=\"string\">\"component-a\"</span>:ComponentA,</span><br><span class=\"line\">        <span class=\"string\">\"component-a\"</span>:ComponentB</span><br><span class=\"line\">    }</span><br><span class=\"line\">})</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 注册一个简单的局部组local-component，并使用它</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">zw</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">zw</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">local-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">local-component</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> local ={</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">template</span>:<span class=\"string\">`&lt;h2&gt;局部组件&lt;/h2&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"comment\">// 定义局部组件,components属性中可以定义多个组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"comment\">// 由组件名称和组件值来组成</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">components</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"string\">\"zw\"</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">template</span>:<span class=\"string\">`&lt;h1&gt;ss&lt;/h1&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"string\">\"local-component\"</span>:local  <span class=\"comment\">//减少代码冗余</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"Prop\"><a href=\"#Prop\" class=\"headerlink\" title=\"Prop\"></a>Prop</h2><h3 id=\"prop介绍\"><a href=\"#prop介绍\" class=\"headerlink\" title=\"prop介绍\"></a>prop介绍</h3><p>prop是子组件用来接受父组件传递过来的数据的一个自定义属性。</p>\n<p>父组件的数据需要通过props把数据传给子组件，子组件需要显式地用props选项声明“prop”一个组件默认可以拥有任意数量的prop,任何值都可以传递给任何prop.</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--自定义一个属性title,取值可以传递给子组件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">site-name</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"zw\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Google\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">site-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">site-name</span> <span class=\"attr\">tag</span>=<span class=\"string\">\"xin\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Google\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">site-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        const app = Vue.createApp({})</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        app.component(\"site-name\",{</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">            // props表示父组件可以将内容(数据)进行传递</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">            props:[\"title\",\"tag\"],</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">            template:`<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><span class=\"template-variable\">{{<span class=\"name\">title</span>}}</span><span class=\"language-xml\">,</span><span class=\"template-variable\">{{<span class=\"name\">tag</span>}}</span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>`</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        }</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        )</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">        app.mount(\"#app\")</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\">    </span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"动态Prop\"><a href=\"#动态Prop\" class=\"headerlink\" title=\"动态Prop\"></a>动态Prop</h3><p>类似于用v-bind绑定HTML特性到一个表达式，也可以用v-bind动态绑定props的值到父组件的数据中。每当父组件的数据发生变化时，该变化也会传导给子组件。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span> <span class=\"comment\">&lt;!--\" : \" 简写 v-bind --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">site-info</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">\"site in sites\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:id</span>=<span class=\"string\">\"site.id\"</span>  </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:title</span>=<span class=\"string\">\"site.title\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">site-info</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">sites</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    {<span class=\"attr\">id</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">`谷歌`</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    {<span class=\"attr\">id</span>:<span class=\"number\">2</span>,<span class=\"attr\">title</span>:<span class=\"string\">`百度`</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    {<span class=\"attr\">id</span>:<span class=\"number\">3</span>,<span class=\"attr\">title</span>:<span class=\"string\">`字节`</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">                ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">     })</span></span><br><span class=\"line\"><span class=\"language-javascript\">     app.<span class=\"title function_\">component</span>(<span class=\"string\">\"site-info\"</span>,{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 用数组来指定父组件的那几个属性可以进行值传递</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">props</span>:[<span class=\"string\">\"id\"</span>,<span class=\"string\">\"title\"</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">template</span>:<span class=\"string\">`&lt;h3&gt;{{id}} - {{title}}&lt;/h3&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     })</span></span><br><span class=\"line\"><span class=\"language-javascript\">     app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Vue3计算属性\"><a href=\"#Vue3计算属性\" class=\"headerlink\" title=\"Vue3计算属性\"></a>Vue3计算属性</h1><h3 id=\"computed计算属性\"><a href=\"#computed计算属性\" class=\"headerlink\" title=\"computed计算属性\"></a>computed计算属性</h3><p>计算属性关键词:computed,计算属性在处理一些复杂逻辑时是很有用的</p>\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 下面案例不使用computed计算属性来实现字符串的反转</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        {{message.split('').reverse().join('')}}</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">message</span>:<span class=\"string\">\"Hello\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>上述实例中，使模板变得很复杂起来，也不容易看懂和理解。</p>\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 下面案例使用computed计算属性来实现字符串的反转</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>原始字符串：{{message}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            computed属性，直接使用</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>computed反转后的字符串:{{reverseMessage}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">message</span>:<span class=\"string\">\"Hello Vue\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                定义方法：</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                    属性名：function(){}</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"comment\">// 声明一个计算属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">reverseMessage</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// this表示当前Vue的实例对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 实现字符串的反转操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>.<span class=\"title function_\">split</span>(<span class=\"string\">''</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"computed与methods对比分析\"><a href=\"#computed与methods对比分析\" class=\"headerlink\" title=\"computed与methods对比分析\"></a>computed与methods对比分析</h3><p>我们可以使用methods来代替computed,效果上两个都是一样的，但是computed是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用methods,在重新渲染的时候，函数总会重新调用执行。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>原始字符串：{{message}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">            computed属性，直接使用</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>computed反转后的字符串:{{reverseMessage}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>methods反转后的字符串:{{reverseMessages()}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">message</span>:<span class=\"string\">\"Hello Vue\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                定义方法：</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                    属性名：function(){}</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"comment\">// 声明一个计算属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">computed</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">reverseMessage</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// this表示当前Vue的实例对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 实现字符串的反转操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>.<span class=\"title function_\">split</span>(<span class=\"string\">''</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">reverseMessages</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// this表示当前Vue的实例对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 实现字符串的反转操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                   <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>.<span class=\"title function_\">split</span>(<span class=\"string\">''</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">''</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>可以说commputed性能会更好，但是如果你不希望缓存，你可以使用methods属性，在实际开发更多使用的是methods。</p>\n<h3 id=\"computed-setter\"><a href=\"#computed-setter\" class=\"headerlink\" title=\"computed setter\"></a>computed setter</h3><p>computed属性默认只有getter,不过在需要你也可以提供一个setter。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"字节跳动\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">url</span>:<span class=\"string\">\"http://www.zijie.com\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 通过计算属性来获取值(getter)和设置(setter)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">computed</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 1. getter操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">site</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">get</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>+<span class=\"string\">\"-\"</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">url</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                },</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 2.setter操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">set</span>:<span class=\"keyword\">function</span>(<span class=\"params\">newValue</span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">var</span> names=newValue.<span class=\"title function_\">split</span>(<span class=\"string\">'-'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>=names[<span class=\"number\">0</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">url</span>=names[<span class=\"number\">1</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }      </span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">     })</span></span><br><span class=\"line\"><span class=\"language-javascript\">     </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> vm=app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(vm.<span class=\"property\">name</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(vm.<span class=\"property\">url</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(<span class=\"string\">\"&lt;br&gt;更新数据---------------&lt;br&gt;\"</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 赋值符号触发了 setter方法的调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      vm.<span class=\"property\">site</span>=<span class=\"string\">\"百度-http://www.baidu.com\"</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(vm.<span class=\"property\">name</span>)   <span class=\"comment\">// get方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">document</span>.<span class=\"title function_\">write</span>(vm.<span class=\"property\">url</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 自动触发了getter方法的调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//document.write(vm.site)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Vue3监听属性\"><a href=\"#Vue3监听属性\" class=\"headerlink\" title=\"Vue3监听属性\"></a>Vue3监听属性</h1><p>Vue3监听属性watch,通过watch响应数据的变化</p>\n<h3 id=\"watch监听属性基本使用\"><a href=\"#watch监听属性基本使用\" class=\"headerlink\" title=\"watch监听属性基本使用\"></a>watch监听属性基本使用</h3><p><strong>案例：</strong></p>\n<blockquote>\n<p> 下面案例使用watch实现计数器</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>计数器{{counter}}<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--点击事件--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"counter++\"</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">counter</span>:<span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> vm=app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 一旦发现值被改变，则填出一个提示框</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// $watch()方法：用来监听事件的属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">        $watch()方法：</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            1.参数1：表示要监听目标对象(counter属性)</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">            2.参数2：任务，需要使用函数来声明</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">        */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        vm.$watch(<span class=\"string\">\"counter\"</span>,<span class=\"keyword\">function</span>(<span class=\"params\">nval,oval</span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 函数参数 第一个为更改之后的，第二个为更改之前的</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 目标对触发的任务(业务代码一个弹出框)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"title function_\">alert</span>(<span class=\"string\">\"counter发生改变\"</span>+oval+<span class=\"string\">'变为：'</span>+nval);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        })</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>案例：</strong></p>\n<blockquote>\n<p> 下面案例通过watch实现千米与米之间的换算</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>千米与米之间的换算watch监听<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span> = <span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">        千米 : <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span> = <span class=\"string\">\"kilometers\"</span>&gt;</span></span><br><span class=\"line\">        米 : <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span> = <span class=\"string\">\"meters\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"info\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> app = {</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          kilometers : <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">meters</span>:<span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      watch : {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">kilometers</span>:<span class=\"keyword\">function</span>(<span class=\"params\">val</span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"variable language_\">this</span>.<span class=\"property\">kilometers</span> = val;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"variable language_\">this</span>.<span class=\"property\">meters</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">kilometers</span> * <span class=\"number\">1000</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          meters : <span class=\"keyword\">function</span> (<span class=\"params\">val</span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"variable language_\">this</span>.<span class=\"property\">kilometers</span> = val/ <span class=\"number\">1000</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"variable language_\">this</span>.<span class=\"property\">meters</span> = val;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    vm = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>(app).<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    vm.$watch(<span class=\"string\">'kilometers'</span>, <span class=\"keyword\">function</span> (<span class=\"params\">newValue, oldValue</span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 这个回调将在 vm.kilometers 改变后调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">document</span>.<span class=\"property\">getElementById</span> (<span class=\"string\">\"info\"</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">\"修改前值为: \"</span> + oldValue + <span class=\"string\">\"，修改后值为: \"</span> + newValue;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    })</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Vue-Ajax\"><a href=\"#Vue-Ajax\" class=\"headerlink\" title=\"Vue Ajax\"></a>Vue Ajax</h1><p>可能端口不稳定运行不了！！！</p>\n<h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue和Axios配合使用-get<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--1.导入Axios的脚本:发送请求，和接受响应的数据--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--2.导入Vue的脚本:Vue将数据渲染到某个指定的挂载点上--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">       {{info}}</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> app = {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">info</span>:<span class=\"string\">\"测试数据\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 自动调用该方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 把目标的数据获取到，将在获取到的数据赋值info变量</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 使用Axios技术来项目目标服务器发送请求和接收响应的数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// get方法表示发送的是get请求</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// 参数：表示目标的URL地址</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">/*</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                    1.如果响应成功则调用then()方法,如果服务器响应成功，则服务器把数据打包传递当前方法的参数列表上</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                    2.如果响应失败调用catch()方法，突出错误框提示，方法表示要处理的业务，把错误信息打包给方法的参数上</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\">                */</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                axios</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    .<span class=\"title function_\">get</span>(<span class=\"string\">'https://api.gugudata.com/news/joke/demo'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">info</span> = response))</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    .<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">error</span>) { <span class=\"comment\">// 请求失败处理</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                         <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                });</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        vue.<span class=\"title function_\">createApp</span>(app).<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Vue和Axios配合使用-post<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">  {{ info }}</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> app = {</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">info</span>: <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  },</span></span><br><span class=\"line\"><span class=\"language-javascript\">  mounted () {</span></span><br><span class=\"line\"><span class=\"language-javascript\">    axios</span></span><br><span class=\"line\"><span class=\"language-javascript\">      .<span class=\"title function_\">post</span>(<span class=\"string\">'http://www.runoob.com/try/ajax/demo_axios_post.php'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">info</span> = response))</span></span><br><span class=\"line\"><span class=\"language-javascript\">      .<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">error</span>) { <span class=\"comment\">// 请求失败处理</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      });</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>(app).<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"Vue-路由\"><a href=\"#Vue-路由\" class=\"headerlink\" title=\"Vue 路由\"></a>Vue 路由</h1><p>Vue 路由允许我们通过不同的 URL 访问不同的内容，通过 Vue 可以实现多视图的单页 Web 应用。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue@next\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--Vue-Router对应的js脚本--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://unpkg.com/vue-router@4\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--2.router-link:使用此标签，来指定链接的目标地址--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--3.to属性：表示传递目标地址(url地址)--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Vue-Router的基本使用<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/\"</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">\"/about\"</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--4.定义url所对应的视图:JS语法完成--&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--5.路由的出口:指定路由渲染出内容显示的位置--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 定义路由的映射(在这个数组中定义一个一个的路由的映射)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 链接/about ---- view视图是什么内容</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> routes=[</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 一对{}表示定义一个路由的映射规则</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// path:表示路由的url地址</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// component：表示当前路由对应的视图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// template:表示具体视图的声明</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      {</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">path</span>:<span class=\"string\">\"/\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">component</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">template</span>:<span class=\"string\">`&lt;div&gt;项目主页&lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      {</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">path</span>:<span class=\"string\">\"/about\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">component</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">template</span>:<span class=\"string\">`&lt;div&gt;系统主页&lt;/div&gt;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//6.创建路由对象，并配置生效</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> router=<span class=\"title class_\">VueRouter</span>.<span class=\"title function_\">createRouter</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 创建路由规则：使用hash模式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">history</span>:<span class=\"title class_\">VueRouter</span>.<span class=\"title function_\">createWebHashHistory</span>(),</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//routes:routes,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        routes  <span class=\"comment\">//简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      })</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> app = <span class=\"title class_\">Vue</span>.<span class=\"title function_\">createApp</span>({})</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 表示当前的Vue应用支持你所定义的路由</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      app.<span class=\"title function_\">use</span>(router)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      app.<span class=\"title function_\">mount</span>(<span class=\"string\">'#app'</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<center><font color=\"red\">以下使用  VueCli  脚手架进行项目使用</font></center>\n\n<hr>\n<h1 id=\"Vue-CLI\"><a href=\"#Vue-CLI\" class=\"headerlink\" title=\"Vue CLI\"></a>Vue CLI</h1><p>安装了<strong>Node.js</strong>才能使用<strong>npm</strong>,然后才能安装<strong>Vue CLI</strong></p>\n<p><strong>什么是Node.js</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">简单的说 Node.js 就是运行在服务端的 JavaScript。</span><br><span class=\"line\">Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。</span><br><span class=\"line\">Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎</span><br><span class=\"line\">V8 引擎执行 Javascript 的速度非常快，性能非常好。</span><br><span class=\"line\">cmd输入node -v 查看版本号</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>什么是npm</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm是JavaScript运行时环境Node.js的默认包管理器。</span><br><span class=\"line\">nodejs和npm是包含关系，nodejs中含有npm，安装好nodejs</span><br><span class=\"line\">cmd输入npm -v会发现npm的版本号，说明npm已经安装好。</span><br><span class=\"line\">npm ls -g 查看全局已安装node包</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2><p><strong><font color=\"blue\">1.下载.msi安装包</font></strong></p>\n<p><a href=\"https://nodejs.org/en/\">Node.js下载</a></p>\n<p><strong><font color=\"blue\">2.安装</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">双击安装包，根据窗口向导提示进行安装 next=》(注意：可根据磁盘使用情况，选安装目录进行安装，会对应目录地址配置node.js环境变量)</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装完成后，在cmd窗口检测是否安装成功</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\zw&gt;node -v</span><br><span class=\"line\">v16.14.2</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">3.自动安装NPM</font></strong></p>\n<p>Node.js已经集成了NPM工具。在命令提示符输入 <code>npm -v</code>可查看当前NPM版本</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">4.查看包管理路径</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm config ls</span><br><span class=\"line\">===================</span><br><span class=\"line\">; node bin location = D:\\nodejs\\node.exe</span><br><span class=\"line\">; node version = v16.14.2</span><br><span class=\"line\">; npm local prefix = C:\\Users\\zw</span><br><span class=\"line\">; npm version = 8.16.0</span><br><span class=\"line\">; cwd = C:\\Users\\zw</span><br><span class=\"line\">; HOME = C:\\Users\\zw</span><br><span class=\"line\">; Run `npm config ls -l` to show all defaults.</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>这里的 prefix 路径为C 盘 下面进行设置</code></p>\n<p><strong><font color=\"blue\">5.设置包管理路径</font></strong></p>\n<p>1.选择一个路径，专门存放这些依赖包。创建一个目录<code>D:\\programSoftware\\npm</code></p>\n<p>2.在<code>D:\\programSoftware\\npm</code>下创建<code>npm_cache文件夹</code>和<code>node_modules</code></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm config set prefix \"D:\\programSoftware\\npm\\node_modules\"</span><br><span class=\"line\">npm config set cache  \"D:\\programSoftware\\npm\\npm_cache\"</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>cache为缓存目录,C:\\Users\\用户名\\.npmrc 可以查看到配置</code></p>\n<p><strong><font color=\"blue\">6.查看NPM的全局路径</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm config get prefix</span><br><span class=\"line\">===================</span><br><span class=\"line\">D:\\programSoftware\\npm\\node_modules</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">7.配置PATH环境变量</font></strong></p>\n<p>在高级系统设置 给 Path 变量添加路径</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">D:\\programSoftware\\npm\\node_modules</span><br><span class=\"line\">D:\\programSoftware\\npm\\npm_cache</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">8.安装CNPM</font></strong></p>\n<p>NPM 默认会去国外的镜像下js包，在开发中通常我们使用国内镜像，这里我们使用淘宝镜像(CNPM) 来加快下载速度。</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看CNPM版本</span></span><br><span class=\"line\">cnpm -v</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"green\">验证结果</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\zw&gt;npm config get registry</span><br><span class=\"line\">https://registry.npm.taobao.org/</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"安装Vue-CLI\"><a href=\"#安装Vue-CLI\" class=\"headerlink\" title=\"安装Vue CLI\"></a>安装Vue CLI</h2><p>目前主流的版本是3.x和4.x版本，安装4.x以上的版本是因为该版本既可以创建3.x项目与4.x项目，注意：以管理员身份打开命令行。</p>\n<p><strong><font color=\"blue\">1.Install:</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></tbody></table></figure>\n\n<p>安装完成后，在cmd窗口检测是否安装成功</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\zw&gt;vue -V</span><br><span class=\"line\">@vue/cli 5.0.8</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"快速构建Vue项目\"><a href=\"#快速构建Vue项目\" class=\"headerlink\" title=\"快速构建Vue项目\"></a>快速构建Vue项目</h2><p>1.首先在D盘下创建一个空的文件夹 <strong>VueProjects</strong>将来用于存放Vue项目</p>\n<p>2.以管理员模式运行<strong>cmd</strong>,进入VueProjects文件夹</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\zw&gt;D: /Vueprojects</span><br></pre></td></tr></tbody></table></figure>\n\n<p>2.执行下面命令</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">基于交互式命令创建项目</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">文件名不支持驼峰命名，使用短横线方式</span></span><br><span class=\"line\">vue create my-project</span><br></pre></td></tr></tbody></table></figure>\n\n<p>3.选择自定义安装，即第三个选项（使用<strong>上下方向键进行选择</strong>），然后点击回车</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Vue CLI v5.0.8</span><br><span class=\"line\">Failed to check for updates</span><br><span class=\"line\">? Please pick a preset:</span><br><span class=\"line\">  Default ([Vue 3] babel, eslint)</span><br><span class=\"line\">  Default ([Vue 2] babel, eslint)</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">Manually select features</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>4.在这列表中选择我们要安装的组件，使用<strong>空格键选择</strong>，选好回车</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">? Please pick a preset: Manually select features</span><br><span class=\"line\">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection, and</span><br><span class=\"line\">&lt;enter&gt; to proceed)</span><br><span class=\"line\"> (*) Babel      //Babel是一个JavaScript编译器</span><br><span class=\"line\"> ( ) TypeScript</span><br><span class=\"line\">&gt;( ) Progressive Web App (PWA) Support</span><br><span class=\"line\"> (*) Router   //路由</span><br><span class=\"line\"> ( ) Vuex</span><br><span class=\"line\"> ( ) CSS Pre-processors</span><br><span class=\"line\"> ( ) Linter / Formatter   //语法检查</span><br><span class=\"line\"> ( ) Unit Testing</span><br><span class=\"line\"> ( ) E2E Testing</span><br></pre></td></tr></tbody></table></figure>\n\n<p>5.选择<strong>vue版本</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">? Choose a version of Vue.js that you want to start the project with</span><br><span class=\"line\">&gt; 3.x</span><br><span class=\"line\">  2.x</span><br></pre></td></tr></tbody></table></figure>\n\n<p>6.提示选择<strong>什么模式的路由</strong>  选择<strong>N</strong>不创建</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) n</span><br></pre></td></tr></tbody></table></figure>\n\n<p>7.选择<strong>项目配置文件单独存放</strong>，即选择第一个选项</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)</span><br><span class=\"line\">&gt; In dedicated config files</span><br><span class=\"line\">  In package.json</span><br></pre></td></tr></tbody></table></figure>\n\n<p>8.<strong>是否保存模板</strong>，选择<strong>N</strong>不创建</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Save this as a preset for future projects? (y/N) n</span><br></pre></td></tr></tbody></table></figure>\n\n<p>9.询问使用哪一种包依赖管理器？用哪个下载依赖</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Pick the package manager to use when installing dependencies: (Use arrow keys)</span><br><span class=\"line\">   Use Yarn</span><br><span class=\"line\"> &gt; Use NPM</span><br></pre></td></tr></tbody></table></figure>\n\n<p>10.安装完成，提示输入执行下面这两个命令,可打开浏览器界面 </p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">🎉  Successfully created project my-project02.</span><br><span class=\"line\">👉  Get started with the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\"> $ cd my-project02</span><br><span class=\"line\"> $ npm run serve</span><br></pre></td></tr></tbody></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">DONE  Compiled successfully in 2624ms                                                                          16:58:41</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> App running at:</span><br><span class=\"line\"> - Local:   http://localhost:8080/</span><br><span class=\"line\"> - Network: http://192.168.7.71:8080/</span><br><span class=\"line\"></span><br><span class=\"line\"> Note that the development build is not optimized.</span><br><span class=\"line\"> To create a production build, run npm run build.</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>在浏览器输入http://localhost:8080 可打开vue欢迎界面</code></p>\n<h2 id=\"Vue-Li运行项目\"><a href=\"#Vue-Li运行项目\" class=\"headerlink\" title=\"Vue-Li运行项目\"></a>Vue-Li运行项目</h2><p><strong>更改默认端口号</strong></p>\n<p>在 vue.config.js文件中进行相关配置,可更改默认端口号</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">devServer: {</span><br><span class=\"line\">port: 8088,</span><br><span class=\"line\">host:'localhost',</span><br><span class=\"line\">open: true</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"Vue脚手架的文件结构说明\"><a href=\"#Vue脚手架的文件结构说明\" class=\"headerlink\" title=\"Vue脚手架的文件结构说明\"></a>Vue脚手架的文件结构说明</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">├── node_modules </span><br><span class=\"line\">├── public</span><br><span class=\"line\">│   ├── favicon.ico: 页签图标</span><br><span class=\"line\">│   └── index.html: 主页面</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── assets: 存放静态资源</span><br><span class=\"line\">│   │   └── logo.png</span><br><span class=\"line\">│   │── component: 存放组件</span><br><span class=\"line\">│   │   └── HelloWorld.vue</span><br><span class=\"line\">│   │── App.vue: 汇总所有组件</span><br><span class=\"line\">│   │── main.js: 入口文件</span><br><span class=\"line\">├── .gitignore: git版本管制忽略的配置</span><br><span class=\"line\">├── babel.config.js: babel的配置文件</span><br><span class=\"line\">├── package.json: 应用包配置文件 </span><br><span class=\"line\">├── README.md: 应用描述文件</span><br><span class=\"line\">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></tbody></table></figure>\n\n<p>vue中如何区分谁是父组件，谁是子组件</p>\n<blockquote>\n<p>一句话总结，看谁用了谁！我用了你，我就是父组件，你是子组件</p>\n</blockquote>\n<h1 id=\"Echarts\"><a href=\"#Echarts\" class=\"headerlink\" title=\"Echarts\"></a>Echarts</h1><h2 id=\"配置项-title标题组件\"><a href=\"#配置项-title标题组件\" class=\"headerlink\" title=\"配置项-title标题组件\"></a>配置项-title标题组件</h2><p><strong>安装echarts依赖</strong></p>\n<p><code>在 项目文件夹右键=&gt;在集成终端中打开</code></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm install --save echarts</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>标题组件</strong>包含主标题和副标题。</p>\n<p>在 ECharts 2.x 中单个 ECharts 实例最多只能拥有一个标题组件。但是在 ECharts 3 中可以存在任意多个标题组件，这在需要标题进行排版，或者单个实例中的多个图表都需要标题时会比较有用。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- echarts的容器默认宽高是 0 如果我们不进行设置的话，页面是不显示的 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"mychart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demoDiv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> myEcharts=echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">mychart</span>)  <span class=\"comment\">//找到当前容器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 设置参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    myEcharts.<span class=\"title function_\">setOption</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">title</span>:{                        <span class=\"comment\">// **标题组件**</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">text</span>:<span class=\"string\">\"helloWorld\"</span>,            <span class=\"comment\">//echart标题</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">link</span>:<span class=\"string\">\"http://www.baidu.com\"</span>,  <span class=\"comment\">//为标题设置链接地址</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">target</span>:<span class=\"string\">\"self\"</span>,                 <span class=\"comment\">//当前页打开超链接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">backgroundColor</span>:<span class=\"string\">\"pink\"</span>,        <span class=\"comment\">//背景颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">borderColor</span>:<span class=\"string\">\"green\"</span>,            <span class=\"comment\">//边框颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">borderWidth</span>:<span class=\"string\">\"5\"</span>,                 <span class=\"comment\">//边框宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">x</span>:<span class=\"string\">\"center\"</span>,                       <span class=\"comment\">//位置：居中</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">subtext</span>:<span class=\"string\">\"副标题\"</span>,                  <span class=\"comment\">//设置副标题</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">textStyle</span>:{                        <span class=\"comment\">//文字样式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">color</span>:<span class=\"string\">\"yellow\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">fontSize</span>:<span class=\"number\">30</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// subtextStyle:{                        //副标题文字样式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//   color:\"yellow\",</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">//   fontSize:30</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// }</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:[<span class=\"string\">\"Ez\"</span>,<span class=\"string\">\"VN\"</span>,<span class=\"string\">\"NOC\"</span>,<span class=\"string\">\"MF\"</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">series</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>:<span class=\"string\">\"英雄大全\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">\"bar\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:[<span class=\"number\">6300</span>,<span class=\"number\">4800</span>,<span class=\"number\">3200</span>,<span class=\"number\">600</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    })</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-id\">#demoDiv</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">  }</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/3.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"配置项-tooltip提示框组件\"><a href=\"#配置项-tooltip提示框组件\" class=\"headerlink\" title=\"配置项-tooltip提示框组件\"></a>配置项-tooltip提示框组件</h2><p><strong>提示框组件</strong></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;template&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"about\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- echarts的容器默认宽高是 0 如果我们不进行设置的话，页面是不显示的 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"mychart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demoDiv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myEcharts=echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">mychart</span>)  <span class=\"comment\">//找到当前容器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 设置参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myEcharts.<span class=\"title function_\">setOption</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{    </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"我是标题\"</span>,            <span class=\"comment\">//echart标题</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{           <span class=\"comment\">//**提示框组件**</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//触发类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">trigger</span>:<span class=\"string\">'axis'</span>,  <span class=\"comment\">//坐标轴触发   //默认情况下是 item(图形触发)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 坐标轴指示器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">axisPointer</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">type</span>:<span class=\"string\">\"cross\"</span>   <span class=\"comment\">//默认为 line //显示一个实线  shadow 阴影效果  cross十字准星</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// showContent:false   //提示信息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 悬浮层样式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">backgroundColor</span>:<span class=\"string\">\"pink\"</span>,   <span class=\"comment\">//背景颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">borderColor</span>:<span class=\"string\">\"red\"</span>,         <span class=\"comment\">//边框颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">borderWidth</span>:<span class=\"number\">5</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">textStyle</span>:{                <span class=\"comment\">//文本颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">color</span>:<span class=\"string\">\"yellow\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">// 自定义的提示框信息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">formatter</span>(<span class=\"params\">params</span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(params)</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;params.<span class=\"property\">length</span>;i++){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"string\">\"名字\"</span>+params[i].<span class=\"property\">name</span>+<span class=\"string\">\"--价格：\"</span>+params[i].<span class=\"property\">data</span>.<span class=\"property\">value</span>+<span class=\"string\">\"--采摘日期:\"</span>+params[i].<span class=\"property\">data</span>.<span class=\"property\">data</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[<span class=\"string\">\"苹果\"</span>,<span class=\"string\">\"西瓜\"</span>,<span class=\"string\">\"香蕉\"</span>,<span class=\"string\">\"橘子\"</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"水果\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"bar\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            {<span class=\"string\">\"value\"</span>:<span class=\"string\">\"5\"</span>,<span class=\"string\">\"data\"</span>:<span class=\"string\">\"2020-1-1\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">            {<span class=\"string\">\"value\"</span>:<span class=\"string\">\"6\"</span>,<span class=\"string\">\"data\"</span>:<span class=\"string\">\"2023-1-1\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">            {<span class=\"string\">\"value\"</span>:<span class=\"string\">\"8\"</span>,<span class=\"string\">\"data\"</span>:<span class=\"string\">\"2028-1-1\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">            {<span class=\"string\">\"value\"</span>:<span class=\"string\">\"10\"</span>,<span class=\"string\">\"data\"</span>:<span class=\"string\">\"2030-1-1\"</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      })</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-id\">#demoDiv</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">    }</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<p>触摸显示</p>\n<img src=\"/posts/a1fe1312/4.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"配置项-legend图例组件\"><a href=\"#配置项-legend图例组件\" class=\"headerlink\" title=\"配置项-legend图例组件\"></a>配置项-legend图例组件</h2><p><strong>图例组件</strong></p>\n<p>图例组件展现了不同系列的标记(symbol)，颜色和名字。可以通过点击图例控制哪些系列不显示。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- &lt;template&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"about\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;h1&gt;This is an about page&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- echarts的容器默认宽高是 0 如果我们不进行设置的话，页面是不显示的 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"mychart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demoDiv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myEcharts=echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">mychart</span>)  <span class=\"comment\">//找到当前容器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 设置参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myEcharts.<span class=\"title function_\">setOption</span>({</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{    </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"主标题\"</span>,            <span class=\"comment\">//echart标题</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">legend</span>:{           <span class=\"comment\">// **图例组件**</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">show</span>:<span class=\"literal\">true</span>,       <span class=\"comment\">// 设置图例的开启或是关闭</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//icon:\"circle\"  // 设置为圆形</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">top</span>:<span class=\"string\">\"10%\"</span>,       <span class=\"comment\">// 设置位置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">itemWidth</span>:<span class=\"number\">10</span>,    <span class=\"comment\">// 图例高宽</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">itemHeight</span>:<span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">textStyle</span>:{      <span class=\"comment\">// 文字样式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">color</span>:<span class=\"string\">\"red\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">fontSize</span>:<span class=\"number\">30</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">backgroundColor</span>:<span class=\"string\">\"yellow\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>: <span class=\"string\">\"销量\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>: <span class=\"string\">\"bar\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>], </span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      })</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-id\">#demoDiv</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">    }</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/5.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"配置项-grid绘图网格\"><a href=\"#配置项-grid绘图网格\" class=\"headerlink\" title=\"配置项-grid绘图网格\"></a>配置项-grid绘图网格</h2><p>grid 为直角坐标系内绘图网格。可以在网格上绘制折线图，柱状图 散点图（气泡图）也就是设置图标离容器的距离样式</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> yData=[<span class=\"number\">99</span>,<span class=\"number\">67</span>,<span class=\"number\">45</span>,<span class=\"number\">87</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>   <span class=\"comment\">//坐标轴的类型 数据轴:value 类目轴:category</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">grid</span>:{              <span class=\"comment\">//网格设置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">show</span>:<span class=\"literal\">true</span>,        <span class=\"comment\">//图表边框</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">left</span>:<span class=\"string\">\"20%\"</span>,       <span class=\"comment\">//距离</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">top</span>:<span class=\"string\">\"20%\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">right</span>:<span class=\"string\">\"20%\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">bottom</span>:<span class=\"string\">\"20%\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">backgroundColor</span>:<span class=\"string\">\"pink\"</span>,  <span class=\"comment\">//填充</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">borderColor</span>:<span class=\"string\">\"yellow\"</span>     <span class=\"comment\">//边框</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {                  <span class=\"comment\">//系列 配置 图表的类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"销量\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"bar\"</span>,        <span class=\"comment\">// 系列类别   yData 不是y轴的数据 是柱状图系列的数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:yData</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/15.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h2><h3 id=\"柱状图基本配置\"><a href=\"#柱状图基本配置\" class=\"headerlink\" title=\"柱状图基本配置\"></a>柱状图基本配置</h3><p>柱状图：一种图表类型,因为构成是由一根一根类似柱子的数据条组合而成的坐标平面,所以命名为柱状图。主要是用来反应对比数据之间的关系,也可以用来反应数据的变化趋势等等。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> yData=[<span class=\"number\">99</span>,<span class=\"number\">67</span>,<span class=\"number\">45</span>,<span class=\"number\">87</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>   <span class=\"comment\">//坐标轴的类型 数据轴:value 类目轴:category</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{             <span class=\"comment\">//配置y轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {                  <span class=\"comment\">//系列 配置 图表的类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"销量\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"bar\"</span>,        <span class=\"comment\">// 系列类别   yData 不是y轴的数据 是柱状图系列的数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:yData</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/2.jpg\" style=\"zoom: 67%;\">\n\n<h3 id=\"柱状图更多效果\"><a href=\"#柱状图更多效果\" class=\"headerlink\" title=\"柱状图更多效果\"></a>柱状图更多效果</h3><p>最大值，最小值，平均值</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> yData=[<span class=\"number\">99</span>,<span class=\"number\">67</span>,<span class=\"number\">45</span>,<span class=\"number\">87</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>   <span class=\"comment\">//坐标轴的类型 数据轴:value 类目轴:category</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {                  <span class=\"comment\">//系列 配置 图表的类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"销量\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"bar\"</span>,        <span class=\"comment\">// 系列类别   yData 不是y轴的数据 是柱状图系列的数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:yData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//最大值 最小值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markPoint</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>:[          <span class=\"comment\">//标注的数据叔祖,每一项都是一个对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"max\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"最大值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              },</span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"min\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"最小值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 图表的标线</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markLine</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"average\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"平均值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/6.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"水平柱状图\"><a href=\"#水平柱状图\" class=\"headerlink\" title=\"水平柱状图\"></a>水平柱状图</h3><p><strong>xAxis 和 yAxis 中来设置轴类型，对应数据轴和类名轴</strong></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];   </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> yData=[<span class=\"number\">99</span>,<span class=\"number\">67</span>,<span class=\"number\">45</span>,<span class=\"number\">87</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">type</span>:<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>   <span class=\"comment\">//坐标轴的类型 数据轴:value 类目轴:category</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {                  <span class=\"comment\">//系列 配置 图表的类型</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"销量\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"bar\"</span>,        <span class=\"comment\">// 系列类别   yData 不是y轴的数据 是柱状图系列的数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:yData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">barWidth</span>:<span class=\"number\">10</span>,       <span class=\"comment\">//柱状轴的宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// color:\"red\",    //柱状轴的颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">itemStyle</span>:{        <span class=\"comment\">//单独设置每个轴的颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">normal</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">color</span>:<span class=\"keyword\">function</span>(<span class=\"params\">parmas</span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> colorList=[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"string\">\"#c23531\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"string\">\"#2f4554\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"string\">\"#61a0a8\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"string\">\"#91c7ae\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> colorList[parmas.<span class=\"property\">dataIndex</span>]   <span class=\"comment\">// 每一个值 parmas 每一个值叫dataIndex</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//最大值 最小值</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markPoint</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>:[          <span class=\"comment\">//标注的数据叔祖,每一项都是一个对象</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"max\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"最大值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              },</span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"min\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"最小值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// 图表的标线</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markLine</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"average\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"平均值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/7.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"饼状图\"><a href=\"#饼状图\" class=\"headerlink\" title=\"饼状图\"></a>饼状图</h2><h3 id=\"饼状图基本配置\"><a href=\"#饼状图基本配置\" class=\"headerlink\" title=\"饼状图基本配置\"></a>饼状图基本配置</h3><p>饼状图是用整个圆表示总体的数量或整体值“1”，用圆内各个扇形的大小表示各部分数量或该部分占总体的百分比。一般由标题（包括单位）、图例和数据等组成。</p>\n<p>1.主要运用在对数据进行比较分析的时候，既可以表示绝对量，又可以表示相对量。<br>2.比柱形图等好在：数据更为清晰，各部分占总体的比重大小更为直观，可谓一目了然</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> data=[</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">67</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"美食\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">175</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"日化\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">27</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"数码\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">89</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"家电\"</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"饼状图\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//left:\"center\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x</span>:<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"销量统计\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"pie\"</span>,        <span class=\"comment\">//饼状图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          data               <span class=\"comment\">//在es6 data变量名一样可以简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">legend</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x</span>:<span class=\"string\">\"left\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">orient</span>:<span class=\"string\">\"verical\"</span>   <span class=\"comment\">//图例的布局朝向  垂直</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/8.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"饼状图更多设置\"><a href=\"#饼状图更多设置\" class=\"headerlink\" title=\"饼状图更多设置\"></a>饼状图更多设置</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> data=[</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">67</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"美食\"</span>,<span class=\"attr\">itemStyle</span>:{<span class=\"attr\">color</span>:<span class=\"string\">\"yellow\"</span>}},   <span class=\"comment\">//单独设置具体图表颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">175</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"日化\"</span>,<span class=\"attr\">itemStyle</span>:{<span class=\"attr\">color</span>:<span class=\"string\">\"green\"</span>}},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">27</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"数码\"</span>,<span class=\"attr\">itemStyle</span>:{<span class=\"attr\">color</span>:<span class=\"string\">\"orange\"</span>}},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">value</span>:<span class=\"number\">89</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"家电\"</span>,<span class=\"attr\">itemStyle</span>:{<span class=\"attr\">color</span>:<span class=\"string\">\"red\"</span>}},</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]  </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"饼状图\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//left:\"center\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x</span>:<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"销量统计\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"pie\"</span>,              <span class=\"comment\">// 饼状图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          data,                    <span class=\"comment\">// 在es6 data变量名一样可以简写</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">radius</span>:[<span class=\"string\">\"40%\"</span>,<span class=\"string\">\"70%\"</span>],    <span class=\"comment\">// 设置饼图的半径  第一项内半径 第二项外半径    </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">label</span>:{                  <span class=\"comment\">// 设置环形图的文本标签</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">show</span>:<span class=\"literal\">true</span>,             <span class=\"comment\">// 默认为:true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">position</span>:<span class=\"string\">\"outside\"</span>     <span class=\"comment\">// 默认为:outside  outside 外侧展示 inside 内展示 center中心展示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">roseType</span>:<span class=\"string\">\"area\"</span>,         <span class=\"comment\">// 是否设置成\"南丁格尔图\"  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">itemStyle</span>:{              <span class=\"comment\">// 设置直接的样式设置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//color:\"pink\",        // 图表全局颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">shadowBlur</span>:<span class=\"number\">200</span>,        <span class=\"comment\">// 阴影度 </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">shadowColor</span>:<span class=\"string\">\"blue\"</span>     <span class=\"comment\">// 阴影颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">legend</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x</span>:<span class=\"string\">\"left\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">orient</span>:<span class=\"string\">\"verical\"</span>   <span class=\"comment\">//图例的布局朝向  垂直</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/9.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h2><h3 id=\"折线图的基本配置\"><a href=\"#折线图的基本配置\" class=\"headerlink\" title=\"折线图的基本配置\"></a>折线图的基本配置</h3><p>折线图是用折线将各个数据点标志连接起来的图表，用于展现数据的变化趋势。</p>\n<p>不仅可以表示数量的多少，而且可以反映同一事物在不同时间里的发展变化的情况。<br>易于显示数据变化趋势，可以直观地反映这种变化以及各组之间的差别。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> xData=[<span class=\"string\">'Mon'</span>,<span class=\"string\">'Tue'</span>,<span class=\"string\">'Web'</span>,<span class=\"string\">'Thu'</span>,<span class=\"string\">'Fri'</span>,<span class=\"string\">'Sat'</span>,<span class=\"string\">'Sun'</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> data=[<span class=\"number\">130</span>,<span class=\"number\">25</span>,<span class=\"number\">234</span>,<span class=\"number\">164</span>,<span class=\"number\">89</span>,<span class=\"number\">188</span>,<span class=\"number\">79</span>] </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"折线图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[        <span class=\"comment\">//系列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          data,        <span class=\"comment\">//键值对一样可以省略</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"line\"</span>  <span class=\"comment\">//折线图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }  </span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/10.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"折线图的更多配置\"><a href=\"#折线图的更多配置\" class=\"headerlink\" title=\"折线图的更多配置\"></a>折线图的更多配置</h3><p>设置平滑过渡样式 并且可以对内容进行颜色的填充 加上对应的标记点</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> xData=[<span class=\"string\">'Mon'</span>,<span class=\"string\">'Tue'</span>,<span class=\"string\">'Web'</span>,<span class=\"string\">'Thu'</span>,<span class=\"string\">'Fri'</span>,<span class=\"string\">'Sat'</span>,<span class=\"string\">'Sun'</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> data=[<span class=\"number\">130</span>,<span class=\"number\">25</span>,<span class=\"number\">234</span>,<span class=\"number\">164</span>,<span class=\"number\">89</span>,<span class=\"number\">188</span>,<span class=\"number\">79</span>] </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"折线图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[          <span class=\"comment\">//系列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          data,           <span class=\"comment\">//键值对一样可以省略</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"line\"</span>,    <span class=\"comment\">//折线图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">smooth</span>:<span class=\"literal\">true</span>,    <span class=\"comment\">// 开启平滑过渡</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">areaStyle</span>:{},    <span class=\"comment\">//填充样式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markPoint</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"max\"</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"最大值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              },{</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"min\"</span>,<span class=\"attr\">name</span>:<span class=\"string\">\"最小值\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markLine</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">              {</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">type</span>:<span class=\"string\">\"average\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">name</span>:<span class=\"string\">\"平均值\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }  </span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/11.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"折线图堆叠效果\"><a href=\"#折线图堆叠效果\" class=\"headerlink\" title=\"折线图堆叠效果\"></a>折线图堆叠效果</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> xData=[<span class=\"string\">'Mon'</span>,<span class=\"string\">'Tue'</span>,<span class=\"string\">'Web'</span>,<span class=\"string\">'Thu'</span>,<span class=\"string\">'Fri'</span>,<span class=\"string\">'Sat'</span>,<span class=\"string\">'Sun'</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> dataA=[<span class=\"number\">130</span>,<span class=\"number\">125</span>,<span class=\"number\">234</span>,<span class=\"number\">164</span>,<span class=\"number\">89</span>,<span class=\"number\">188</span>,<span class=\"number\">79</span>] </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> dataB=[<span class=\"number\">60</span>,<span class=\"number\">252</span>,<span class=\"number\">134</span>,<span class=\"number\">14</span>,<span class=\"number\">189</span>,<span class=\"number\">288</span>,<span class=\"number\">79</span>] </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> dataC=[<span class=\"number\">130</span>,<span class=\"number\">251</span>,<span class=\"number\">234</span>,<span class=\"number\">164</span>,<span class=\"number\">89</span>,<span class=\"number\">118</span>,<span class=\"number\">179</span>] </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> dataD=[<span class=\"number\">140</span>,<span class=\"number\">351</span>,<span class=\"number\">487</span>,<span class=\"number\">111</span>,<span class=\"number\">89</span>,<span class=\"number\">181</span>,<span class=\"number\">791</span>] </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"折线图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"value\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[          <span class=\"comment\">//系列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"美食\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"line\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">stack</span>:<span class=\"string\">\"num\"</span>,      <span class=\"comment\">//同类型的数据需要匹配相同的 stack</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:dataA,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">smooth</span>:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">areaStyle</span>:{},      <span class=\"comment\">// 填充样式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{         <span class=\"comment\">// 高亮状态</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">focus</span>:<span class=\"string\">\"series\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"数码\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"line\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">stack</span>:<span class=\"string\">\"num\"</span>,      <span class=\"comment\">//同类型的数据需要匹配相同的 stack</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:dataB,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">areaStyle</span>:{},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{         <span class=\"comment\">// 高亮状态</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">focus</span>:<span class=\"string\">\"series\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"日化\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"line\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">stack</span>:<span class=\"string\">\"num\"</span>,      <span class=\"comment\">//同类型的数据需要匹配相同的 stack</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:dataC,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">areaStyle</span>:{},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{         <span class=\"comment\">// 高亮状态</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">focus</span>:<span class=\"string\">\"series\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"蔬菜\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"line\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">stack</span>:<span class=\"string\">\"num\"</span>,      <span class=\"comment\">//同类型的数据需要匹配相同的 stack</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:dataD,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">areaStyle</span>:{},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{         <span class=\"comment\">// 高亮状态</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">focus</span>:<span class=\"string\">\"series\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/12.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"散点图\"><a href=\"#散点图\" class=\"headerlink\" title=\"散点图\"></a>散点图</h2><h3 id=\"散点图基本效果设置\"><a href=\"#散点图基本效果设置\" class=\"headerlink\" title=\"散点图基本效果设置\"></a>散点图基本效果设置</h3><p>当存在大量数据点时，<em>散点图</em>的作用尤为明显。散点图与折线图相似，而不同之处在于折线图通过将点或数据点相连来显示每一个变化。</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"散点图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">         </span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[          <span class=\"comment\">//系列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">symbolSize</span>:<span class=\"number\">20</span>,   <span class=\"comment\">//散点大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">9.0</span>, <span class=\"number\">7.04</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">18.07</span>, <span class=\"number\">4.33</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">3.0</span>, <span class=\"number\">9.65</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">9.05</span>, <span class=\"number\">8.23</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">18.0</span>, <span class=\"number\">9.76</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">15.0</span>, <span class=\"number\">7.56</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">23.4</span>, <span class=\"number\">5.31</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">10.1</span>, <span class=\"number\">7.47</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">16.0</span>, <span class=\"number\">8.26</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">12.7</span>, <span class=\"number\">3.53</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">9.35</span>, <span class=\"number\">7.2</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">7.4</span>, <span class=\"number\">8.2</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">3.07</span>, <span class=\"number\">4.82</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">18.2</span>, <span class=\"number\">6.83</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">2.02</span>, <span class=\"number\">4.47</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">1.05</span>, <span class=\"number\">3.33</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">4.05</span>, <span class=\"number\">4.96</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">6.03</span>, <span class=\"number\">7.24</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">17.0</span>, <span class=\"number\">6.55</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">12.0</span>, <span class=\"number\">8.84</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">8.18</span>, <span class=\"number\">5.82</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">6.32</span>, <span class=\"number\">5.68</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"scatter\"</span>    <span class=\"comment\">//散点图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/13.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"散点图效果实现\"><a href=\"#散点图效果实现\" class=\"headerlink\" title=\"散点图效果实现\"></a>散点图效果实现</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"散点图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">         </span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[          <span class=\"comment\">//系列</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">symbolSize</span>:<span class=\"number\">20</span>,   <span class=\"comment\">//散点大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">9.0</span>, <span class=\"number\">7.04</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">18.07</span>, <span class=\"number\">4.33</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">3.0</span>, <span class=\"number\">9.65</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">9.05</span>, <span class=\"number\">8.23</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">18.0</span>, <span class=\"number\">9.76</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">15.0</span>, <span class=\"number\">7.56</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">23.4</span>, <span class=\"number\">5.31</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">10.1</span>, <span class=\"number\">7.47</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">16.0</span>, <span class=\"number\">8.26</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">12.7</span>, <span class=\"number\">3.53</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">9.35</span>, <span class=\"number\">7.2</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">7.4</span>, <span class=\"number\">8.2</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">3.07</span>, <span class=\"number\">4.82</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">18.2</span>, <span class=\"number\">6.83</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">2.02</span>, <span class=\"number\">4.47</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">1.05</span>, <span class=\"number\">3.33</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">4.05</span>, <span class=\"number\">4.96</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">6.03</span>, <span class=\"number\">7.24</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">17.0</span>, <span class=\"number\">6.55</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">12.0</span>, <span class=\"number\">8.84</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">8.18</span>, <span class=\"number\">5.82</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"number\">6.32</span>, <span class=\"number\">5.68</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"scatter\"</span>,    <span class=\"comment\">// 散点图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">// color:\"red\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">color</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"linear\"</span>,     <span class=\"comment\">// 线性渐变</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x</span>:<span class=\"number\">0</span>,               <span class=\"comment\">// 相当于在图形包围盒中的百分比</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">y</span>:<span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x2</span>:<span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">y2</span>:<span class=\"number\">0</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">colorStops</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            {</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">offset</span>:<span class=\"number\">0</span>,      <span class=\"comment\">//开始</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">color</span>:<span class=\"string\">\"pink\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { </span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">offset</span>:<span class=\"number\">1</span>,     <span class=\"comment\">// 结束</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">color</span>:<span class=\"string\">\"blue\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ] </span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">itemStyle</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">borderColor</span>:<span class=\"string\">\"pink\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">borderWidth</span>:<span class=\"number\">10</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/14.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"K线图\"><a href=\"#K线图\" class=\"headerlink\" title=\"K线图\"></a>K线图</h2><h3 id=\"K线图基本设置\"><a href=\"#K线图基本设置\" class=\"headerlink\" title=\"K线图基本设置\"></a>K线图基本设置</h3><p>K线图可以查看k线历史走势，近期趋势，是上涨还是下跌，是调整还是震荡。分析k线的高低点和相对高低点。方便对于数据的走势进行查看</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> data=[[<span class=\"number\">20</span>, <span class=\"number\">34</span>, <span class=\"number\">10</span>, <span class=\"number\">38</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                [<span class=\"number\">40</span>, <span class=\"number\">35</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                [<span class=\"number\">31</span>, <span class=\"number\">38</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                [<span class=\"number\">38</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>]]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"K线图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {                 </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"candlestick\"</span>,        <span class=\"comment\">// k线图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          data</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/16.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"K线图效果优化\"><a href=\"#K线图效果优化\" class=\"headerlink\" title=\"K线图效果优化\"></a>K线图效果优化</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">kdata</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">                [<span class=\"number\">20</span>, <span class=\"number\">34</span>, <span class=\"number\">10</span>, <span class=\"number\">38</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                [<span class=\"number\">40</span>, <span class=\"number\">35</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                [<span class=\"number\">31</span>, <span class=\"number\">38</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                [<span class=\"number\">38</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    },</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">computed</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">newData</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"keyword\">let</span> listData=<span class=\"variable language_\">this</span>.<span class=\"property\">kdata</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">v</span>=&gt;</span>v[<span class=\"number\">0</span>])</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> listData</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    },</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"K线图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:xData,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{             <span class=\"comment\">//配置x轴的参数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">trigger</span>:<span class=\"string\">\"axis\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">axisPointer</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"cross\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {                 </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"candlestick\"</span>,        <span class=\"comment\">// k线图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">kdata</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">itemStyle</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">color</span>:<span class=\"string\">\"red\"</span>,            <span class=\"comment\">//  color 上涨颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">color0</span>:<span class=\"string\">\"green\"</span>,         <span class=\"comment\">//  color0  下跌颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">borderColor</span>:<span class=\"string\">\"pink\"</span>,     <span class=\"comment\">//  上涨边框颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">borderColor0</span>:<span class=\"string\">\"yellow\"</span>,  <span class=\"comment\">//  下跌边框颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">borderWidth</span>:<span class=\"number\">2</span>           <span class=\"comment\">//  线的宽度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markPoint</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"最大值\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"max\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">valueDim</span>:<span class=\"string\">\"highest\"</span>   <span class=\"comment\">//在哪个维度上面进行最大值的设置  最高</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"最小值\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"min\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">valueDim</span>:<span class=\"string\">\"lowest\"</span>   <span class=\"comment\">// 最低</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"平均值\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"average\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">valueDim</span>:<span class=\"string\">\"close\"</span>   <span class=\"comment\">// 最低</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"line\"</span>,   <span class=\"comment\">//折线图，连接</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">smooth</span>:<span class=\"literal\">true</span>,   <span class=\"comment\">//平滑</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">data</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">newData</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<p><img src=\"/posts/a1fe1312/17.jpg\"></p>\n<h2 id=\"雷达图\"><a href=\"#雷达图\" class=\"headerlink\" title=\"雷达图\"></a>雷达图</h2><h3 id=\"雷达图基本设置\"><a href=\"#雷达图基本设置\" class=\"headerlink\" title=\"雷达图基本设置\"></a>雷达图基本设置</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"雷达图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">radar</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">shape</span>:<span class=\"string\">\"circle\"</span>,   <span class=\"comment\">// shape: 'circle',//设置及雷达图效果 圆形         </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">indicator</span>:[<span class=\"comment\">//雷达图的指示器，用来指定雷达图中的多个变量（维度）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"蔬菜\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">6500</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"水果\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">16000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"熟食\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">30000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"数码\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">38000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"家电\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">52000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"日化\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">25000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"radar\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            {</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">value</span>:[<span class=\"number\">4200</span>,<span class=\"number\">5300</span>,<span class=\"number\">6666</span>,<span class=\"number\">23246</span>,<span class=\"number\">12304</span>,<span class=\"number\">19567</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/18.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"雷达图效果提升\"><a href=\"#雷达图效果提升\" class=\"headerlink\" title=\"雷达图效果提升\"></a>雷达图效果提升</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 2.设置轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">\"美食\"</span>,<span class=\"string\">\"数码\"</span>,<span class=\"string\">\"日化\"</span>,<span class=\"string\">\"蔬菜\"</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 3.设置配置项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"雷达图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">radar</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">shape</span>:<span class=\"string\">\"circle\"</span>,   <span class=\"comment\">// shape: 'circle',//设置及雷达图效果 圆形         </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">indicator</span>:[<span class=\"comment\">//雷达图的指示器，用来指定雷达图中的多个变量（维度）</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"蔬菜\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">6500</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"水果\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">16000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"熟食\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">30000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"数码\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">38000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"家电\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">52000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">name</span>: <span class=\"string\">\"日化\"</span>, <span class=\"attr\">max</span>: <span class=\"number\">25000</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">radius</span>:<span class=\"number\">120</span>,            <span class=\"comment\">//设置半径</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">startAngle</span>:<span class=\"number\">180</span>,        <span class=\"comment\">//坐标系的起始角度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">splitNumber</span>:<span class=\"number\">10</span>,        <span class=\"comment\">//雷达的层级</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">axisName</span>:{             <span class=\"comment\">//雷达图每个指示器名称的配置项。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">formatter</span>:<span class=\"string\">\"{value}\"</span>,  <span class=\"comment\">//指示器的名字</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">color</span>:<span class=\"string\">\"red\"</span>           <span class=\"comment\">//文字颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">splitArea</span>:{           <span class=\"comment\">//分隔区域的内容</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">areaStyle</span>:{         <span class=\"comment\">//分隔区域的样式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">color</span>:[<span class=\"string\">\"#77EADE\"</span>,<span class=\"string\">\"#26C3BE\"</span>,<span class=\"string\">\"#64AFE9\"</span>,<span class=\"string\">\"#428BD4\"</span>], <span class=\"comment\">//分隔区域颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">shadowColor</span>:<span class=\"string\">\"0,0,0,.2\"</span>,  <span class=\"comment\">//阴影颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">shadowBlur</span>:<span class=\"number\">10</span>         <span class=\"comment\">//图形阴影的模糊大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"radar\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            {</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">value</span>:[<span class=\"number\">4200</span>,<span class=\"number\">5300</span>,<span class=\"number\">6666</span>,<span class=\"number\">23246</span>,<span class=\"number\">12304</span>,<span class=\"number\">19567</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">areaStyle</span>:{            <span class=\"comment\">//内容填充</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">color</span>:<span class=\"string\">\"yellow\"</span>       <span class=\"comment\">//内容填充颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              }</span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">lineStyle</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"dashed\"</span>   <span class=\"comment\">// 线段为虚线</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 4.设置图表绘制图表</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/19.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"漏斗图\"><a href=\"#漏斗图\" class=\"headerlink\" title=\"漏斗图\"></a>漏斗图</h2><h3 id=\"漏斗图基本设置\"><a href=\"#漏斗图基本设置\" class=\"headerlink\" title=\"漏斗图基本设置\"></a>漏斗图基本设置</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"漏斗图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">trigger</span>:<span class=\"string\">\"item\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">formatter</span>:<span class=\"string\">\"{a}&lt;br/&gt;{b}:{c}%\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"funnel\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>: [</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">60</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"美食\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">40</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"日化\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"数码\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">80</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"家电\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">100</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"蔬菜\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">left</span>:<span class=\"string\">\"20%\"</span>   <span class=\"comment\">//漏斗图向左边偏移 20%</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/20.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"漏斗图样式设置\"><a href=\"#漏斗图样式设置\" class=\"headerlink\" title=\"漏斗图样式设置\"></a>漏斗图样式设置</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"漏斗图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">trigger</span>:<span class=\"string\">\"item\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">formatter</span>:<span class=\"string\">\"{a}&lt;br/&gt;{b}:{c}%\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"funnel\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>: [</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">60</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"美食\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">40</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"日化\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">20</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"数码\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">80</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"家电\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">            { <span class=\"attr\">value</span>: <span class=\"number\">100</span>, <span class=\"attr\">name</span>: <span class=\"string\">\"蔬菜\"</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">left</span>:<span class=\"string\">\"20%\"</span>,             <span class=\"comment\">//漏斗图向左边偏移 20%</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">sort</span>:<span class=\"string\">\"ascending\"</span>,            <span class=\"comment\">// 默认是递减的  ascending 递增  none 根据数据排序</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">itemStyle</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">borderColor</span>:<span class=\"string\">\"red\"</span>    <span class=\"comment\">// 边框颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">label</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">show</span>:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">position</span>:<span class=\"string\">\"inside\"</span>     <span class=\"comment\">//文本标签内展示 inside</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">label</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">fontSize</span>:<span class=\"number\">30</span>         <span class=\"comment\">// 高亮文字大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/21.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"仪表盘图\"><a href=\"#仪表盘图\" class=\"headerlink\" title=\"仪表盘图\"></a>仪表盘图</h2><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"仪表盘图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"gauge\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">value</span>:<span class=\"number\">45</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"提示信息\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">detail</span>:{     <span class=\"comment\">//设置启动动画显示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">calueAnimation</span>:<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">progress</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">show</span>:<span class=\"literal\">true</span>    <span class=\"comment\">//内容填充效果</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/22.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"关系图\"><a href=\"#关系图\" class=\"headerlink\" title=\"关系图\"></a>关系图</h2><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">list</span>:[         <span class=\"comment\">//创建关系图的节点数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">name</span>:<span class=\"string\">\"韦小宝\"</span>,<span class=\"attr\">id</span>:<span class=\"string\">\"1\"</span>,<span class=\"attr\">symbolSize</span>:<span class=\"number\">30</span>},   <span class=\"comment\">//点的大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">name</span>:<span class=\"string\">\"方怡\"</span>,<span class=\"attr\">id</span>:<span class=\"string\">\"2\"</span>,<span class=\"attr\">symbolSize</span>:<span class=\"number\">30</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">name</span>:<span class=\"string\">\"双儿\"</span>,<span class=\"attr\">id</span>:<span class=\"string\">\"3\"</span>,<span class=\"attr\">symbolSize</span>:<span class=\"number\">30</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">name</span>:<span class=\"string\">\"茅十八\"</span>,<span class=\"attr\">id</span>:<span class=\"string\">\"4\"</span>,<span class=\"attr\">symbolSize</span>:<span class=\"number\">30</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {<span class=\"attr\">name</span>:<span class=\"string\">\"吴六奇\"</span>,<span class=\"attr\">id</span>:<span class=\"string\">\"5\"</span>,<span class=\"attr\">symbolSize</span>:<span class=\"number\">30</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">num</span>:[         <span class=\"comment\">// 关系数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">source</span>:<span class=\"string\">\"1\"</span>,  <span class=\"comment\">//边节点名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">target</span>:<span class=\"string\">\"2\"</span>,  <span class=\"comment\">//目标节点名称   </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">relation</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"老婆\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">id</span>:<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">source</span>:<span class=\"string\">\"1\"</span>,  <span class=\"comment\">//边节点名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">target</span>:<span class=\"string\">\"4\"</span>,  <span class=\"comment\">//目标节点名称   </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">relation</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"兄弟\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">id</span>:<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">source</span>:<span class=\"string\">\"4\"</span>,  <span class=\"comment\">//边节点名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">target</span>:<span class=\"string\">\"1\"</span>,  <span class=\"comment\">//目标节点名称   </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">relation</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"兄弟\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">id</span>:<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">source</span>:<span class=\"string\">\"3\"</span>,  <span class=\"comment\">//边节点名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">target</span>:<span class=\"string\">\"5\"</span>,  <span class=\"comment\">//目标节点名称   </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">relation</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">\"义妹\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">id</span>:<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]           </span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    },</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"关系图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }, </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:{ </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"graph\"</span>,         <span class=\"comment\">//关系图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">layout</span>:<span class=\"string\">\"force\"</span>,         <span class=\"comment\">//引导布局</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">itemStyle</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">color</span>:<span class=\"string\">\"#95dcb2\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">label</span>:{                 <span class=\"comment\">//图形上的文字</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">show</span>:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">position</span>:<span class=\"string\">\"bottom\"</span>,    <span class=\"comment\">//底部</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">distance</span>:<span class=\"number\">6</span>,           <span class=\"comment\">//距离图形的位置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">fontSize</span>:<span class=\"number\">16</span>,          <span class=\"comment\">//文字大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">align</span>:<span class=\"string\">\"center\"</span>        <span class=\"comment\">//对齐方式</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">force</span>:{                 <span class=\"comment\">//间距</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">repulsion</span>:<span class=\"number\">100</span>,        <span class=\"comment\">//点与点之间的间距</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">qravity</span>:<span class=\"number\">0.01</span>,         <span class=\"comment\">//距离中心点位置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">edgeLength</span>:<span class=\"number\">200</span>,       <span class=\"comment\">//两边点的距离</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">links</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">num</span>,          <span class=\"comment\">//引用num数据进行link</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">edgeLabel</span>:{              <span class=\"comment\">//num 内容显示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">show</span>:<span class=\"literal\">true</span>,             <span class=\"comment\">//标签显示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">position</span>:<span class=\"string\">\"middle\"</span>,     <span class=\"comment\">//位置：中间</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">formatter</span>:<span class=\"function\">(<span class=\"params\">params</span>)=&gt;</span>{  <span class=\"comment\">//自定义提示框信息</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> params.<span class=\"property\">data</span>.<span class=\"property\">relation</span>.<span class=\"property\">name</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/23.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"数据区域缩放\"><a href=\"#数据区域缩放\" class=\"headerlink\" title=\"数据区域缩放\"></a>数据区域缩放</h2><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> xData=[<span class=\"string\">'Mon'</span>, <span class=\"string\">'Tue'</span>, <span class=\"string\">'Wed'</span>, <span class=\"string\">'Thu'</span>, <span class=\"string\">'Fri'</span>, <span class=\"string\">'Sat'</span>, <span class=\"string\">'Sun'</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> data=[<span class=\"number\">150</span>, <span class=\"number\">230</span>, <span class=\"number\">224</span>, <span class=\"number\">218</span>, <span class=\"number\">135</span>, <span class=\"number\">147</span>, <span class=\"number\">260</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"数据区域缩放\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>: {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>: <span class=\"string\">'category'</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>: xData</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>: {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>: <span class=\"string\">'value'</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{ </span></span><br><span class=\"line\"><span class=\"language-javascript\">          data,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>: <span class=\"string\">'line'</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">smooth</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markPoint</span>: {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          { <span class=\"attr\">type</span>: <span class=\"string\">'max'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Max'</span> },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          { <span class=\"attr\">type</span>: <span class=\"string\">'min'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Min'</span> }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">markLine</span>: {</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>: [{ <span class=\"attr\">type</span>: <span class=\"string\">'average'</span>, <span class=\"attr\">name</span>: <span class=\"string\">'Avg'</span> }]    <span class=\"comment\">//平均值的线</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }],</span></span><br><span class=\"line\"><span class=\"language-javascript\">         <span class=\"attr\">dataZoom</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"slider\"</span>,      <span class=\"comment\">//横向滑块控件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">xAxisIndex</span>:<span class=\"number\">0</span>,       <span class=\"comment\">// X 轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">fliterMode</span>:<span class=\"string\">\"none\"</span>   <span class=\"comment\">//根据数据排序</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>:<span class=\"string\">\"slider\"</span>,      <span class=\"comment\">//横向滑块控件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">yAxisIndex</span>:<span class=\"number\">0</span>,       <span class=\"comment\">// Y 轴</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">fliterMode</span>:<span class=\"string\">\"none\"</span>   <span class=\"comment\">//根据数据排序</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">         ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/24.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"树形图\"><a href=\"#树形图\" class=\"headerlink\" title=\"树形图\"></a>树形图</h2><h3 id=\"树形图基本设置\"><a href=\"#树形图基本设置\" class=\"headerlink\" title=\"树形图基本设置\"></a>树形图基本设置</h3><p>树图主要用来可视化树形数据结构，是一种特殊的层次类型，具有唯一的根节点，左子树，和右子树</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">list</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">\"根节点\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">children</span>: [{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">\"层级2\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">children</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"attr\">name</span>:<span class=\"string\">\"层级3-1\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"attr\">children</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据1\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">3983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据2\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">1983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据3\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">2983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据4\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">4983</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      {</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>:<span class=\"string\">\"层级3-2\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">children</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据1\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">3983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据2\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">1983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据3\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">2983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据4\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">4983</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">           ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">         }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]}</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">},</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"树形图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{            <span class=\"comment\">//提示框组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">trigger</span>:<span class=\"string\">\"item\"</span>     <span class=\"comment\">//图形触发</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{ </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"tree\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title class_\">SymbolSize</span>:<span class=\"number\">15</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">label</span>:{                      <span class=\"comment\">//标签</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">position</span>:<span class=\"string\">\"left\"</span>,           <span class=\"comment\">//标签位置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">verticalAlign</span>:<span class=\"string\">\"middle\"</span>,    <span class=\"comment\">//文字垂直对齐</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">align</span>:<span class=\"string\">\"conter\"</span>,            <span class=\"comment\">//居中</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">fontSize</span>:<span class=\"number\">10</span>                 <span class=\"comment\">//文字大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }, </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">leaves</span>:{                      <span class=\"comment\">//子节点配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">label</span>:{                 </span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">position</span>:<span class=\"string\">\"right\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">verticalAlign</span>:<span class=\"string\">\"middle\"</span>,    <span class=\"comment\">//文字垂直对齐</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">align</span>:<span class=\"string\">\"conter\"</span>,            <span class=\"comment\">//居中</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{                     <span class=\"comment\">//高亮</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">focus</span>:<span class=\"string\">\"descendant\"</span>           <span class=\"comment\">//设置为子孙</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/25.jpg\" style=\"zoom:67%;\">\n\n<h3 id=\"方向切换树形图\"><a href=\"#方向切换树形图\" class=\"headerlink\" title=\"方向切换树形图\"></a>方向切换树形图</h3><figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">list</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">\"根节点\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">children</span>: [{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">\"层级2\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">children</span>:[{</span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"attr\">name</span>:<span class=\"string\">\"层级3-1\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">           <span class=\"attr\">children</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据1\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">3983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据2\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">1983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据3\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">2983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据4\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">4983</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      {</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>:<span class=\"string\">\"层级3-2\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">children</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据1\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">3983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据2\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">1983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据3\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">2983</span>},</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {<span class=\"attr\">name</span>:<span class=\"string\">\"数据4\"</span>,<span class=\"attr\">value</span>:<span class=\"number\">4983</span>}</span></span><br><span class=\"line\"><span class=\"language-javascript\">           ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">         }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ]}</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">},</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"树形图\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tooltip</span>:{            <span class=\"comment\">//提示框组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">trigger</span>:<span class=\"string\">\"item\"</span>     <span class=\"comment\">//图形触发</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{ </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"tree\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:[<span class=\"variable language_\">this</span>.<span class=\"property\">list</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title class_\">SymbolSize</span>:<span class=\"number\">15</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">left</span>:<span class=\"string\">\"20%\"</span>,                  <span class=\"comment\">//左边偏移 20%</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">orient</span>:<span class=\"string\">\"BT\"</span>,                  <span class=\"comment\">// 设置布局方向 右到左   默认：从左到右:L 上下:BT 下上:TB</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">label</span>:{                      <span class=\"comment\">//标签-------根节点配置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">position</span>:<span class=\"string\">\"left\"</span>,           <span class=\"comment\">//标签位置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">verticalAlign</span>:<span class=\"string\">\"middle\"</span>,    <span class=\"comment\">//文字垂直对齐</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">align</span>:<span class=\"string\">\"conter\"</span>,            <span class=\"comment\">//居中</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">fontSize</span>:<span class=\"number\">10</span>                 <span class=\"comment\">//文字大小</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }, </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">leaves</span>:{                      <span class=\"comment\">//子节点配置----</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">label</span>:{     </span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">rotate</span>:<span class=\"number\">90</span>,                 <span class=\"comment\">//文字旋转90度            </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">position</span>:<span class=\"string\">\"right\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">verticalAlign</span>:<span class=\"string\">\"middle\"</span>,    <span class=\"comment\">//文字垂直对齐</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">align</span>:<span class=\"string\">\"conter\"</span>,            <span class=\"comment\">//居中</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">emphasis</span>:{                     <span class=\"comment\">//高亮</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">focus</span>:<span class=\"string\">\"descendant\"</span>           <span class=\"comment\">//设置为子孙</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }]</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/26.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"数据排序\"><a href=\"#数据排序\" class=\"headerlink\" title=\"数据排序\"></a>数据排序</h2><p><strong>降序排序</strong></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  </span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 1.初始化</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataset</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">          {</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">dimensions</span>:[<span class=\"string\">\"分类\"</span>,<span class=\"string\">\"数量\"</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">source</span>:[       <span class=\"comment\">//原始数据。一般来说，原始数据表达的是二维表。   </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">\"Hannah Krause\"</span>, <span class=\"number\">41</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">\"Zhao Qian\"</span>, <span class=\"number\">20</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">\"Jasmin Krause \"</span>, <span class=\"number\">52</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">\"Li Lei\"</span>, <span class=\"number\">37</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">\"Karle Neumann\"</span>, <span class=\"number\">25</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">\"Adrian Groß\"</span>, <span class=\"number\">19</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">\"Mia Neumann\"</span>, <span class=\"number\">71</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          },{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">transform</span>:{      <span class=\"comment\">//数据改变</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">type</span>:<span class=\"string\">\"sort\"</span>,   <span class=\"comment\">//按大小排序</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"attr\">config</span>:{       <span class=\"comment\">//基于谁排序</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">dimension</span>:<span class=\"string\">\"数量\"</span>,<span class=\"attr\">order</span>:<span class=\"string\">\"desc\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">              } </span></span><br><span class=\"line\"><span class=\"language-javascript\">            }</span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        ],</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">xAxis</span>:{            <span class=\"comment\">//坐标轴刻度标签的相关设置。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"category\"</span>, </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">axisLabel</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">interval</span>:<span class=\"number\">0</span>,   <span class=\"comment\">//坐标轴刻度标签的显示间隔，在类目轴中有效</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">rotate</span>:<span class=\"number\">30</span>     <span class=\"comment\">//刻度标签旋转的角度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">yAxis</span>:{},</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"数据排序\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:[{ </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"bar\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">encode</span>:{    <span class=\"comment\">//对数据进行映射</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">x</span>:<span class=\"string\">\"分类\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">y</span>:<span class=\"string\">\"数量\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">datasetIndex</span>: <span class=\"number\">1</span>,  <span class=\"comment\">//设置要那一条的数据，就是dataset第一组</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">  }  </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>效果：</strong></p>\n<img src=\"/posts/a1fe1312/27.jpg\" style=\"zoom:67%;\">\n\n<h2 id=\"json-server简单使用\"><a href=\"#json-server简单使用\" class=\"headerlink\" title=\"json-server简单使用\"></a>json-server简单使用</h2><p><strong>1.安装json-server</strong>  </p>\n<p><strong>-g</strong> 全局安装  </p>\n<p><strong>-save</strong>  就是将模块存储到package.json文件中</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm install -g json-server</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>2.创建data.json</strong></p>\n<p>在<strong>mock</strong>文件夹下创建一个<strong>data.json</strong>文件，存放一些数据</p>\n<figure class=\"highlight json\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">    <span class=\"attr\">\"one\"</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">{</span> </span><br><span class=\"line\">          <span class=\"attr\">\"value\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"67\"</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"美食\"</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">          <span class=\"attr\">\"itemStyle\"</span><span class=\"punctuation\">:</span><span class=\"punctuation\">{</span></span><br><span class=\"line\">                     <span class=\"attr\">\"normal\"</span><span class=\"punctuation\">:</span><span class=\"punctuation\">{</span></span><br><span class=\"line\">                        <span class=\"attr\">\"color\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"gb(1,175,80)\"</span></span><br><span class=\"line\">                          <span class=\"punctuation\">}</span></span><br><span class=\"line\">                        <span class=\"punctuation\">}</span> </span><br><span class=\"line\">                      <span class=\"punctuation\">}</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">{</span> </span><br><span class=\"line\">          <span class=\"attr\">\"value\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"98\"</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">          <span class=\"attr\">\"name\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"家电\"</span><span class=\"punctuation\">,</span>  </span><br><span class=\"line\">          <span class=\"attr\">\"itemStyle\"</span><span class=\"punctuation\">:</span><span class=\"punctuation\">{</span></span><br><span class=\"line\">                     <span class=\"attr\">\"normal\"</span><span class=\"punctuation\">:</span><span class=\"punctuation\">{</span></span><br><span class=\"line\">                        <span class=\"attr\">\"color\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"gb(30,50,70)\"</span></span><br><span class=\"line\">                          <span class=\"punctuation\">}</span></span><br><span class=\"line\">                        <span class=\"punctuation\">}</span> </span><br><span class=\"line\">          <span class=\"punctuation\">}</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>3.启动json-server</strong></p>\n<p>在mock文件夹下，进入终端</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">json-server --watch data.json --prot 8888</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>4.查看数据</strong></p>\n<p>在浏览器中输入地址：</p>\n<p><a href=\"http://localhost:8888/one\">http://localhost:8888/one</a></p>\n<p><code>http://localhost:+端口号/接口名称，即可查看数据。</code></p>\n<p><strong>5.报错解决</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">json-server : 无法加载文件 D:\\programSoftware\\npm\\node_modules\\json-server.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=1</span><br><span class=\"line\">35170 中的 about_Execution_Policies。</span><br></pre></td></tr></tbody></table></figure>\n\n<p>解释：首次在计算机上启动 Windows PowerShell 时，现用执行策略很可能是 Restricted（默认设置）</p>\n<p><code>使用管理员身份运行 PowerShell(win+X,选择终端管理员),输入如下指令(如有选项输入:Y)：</code></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">set-executionpolicy remotesigned</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"加载动画效果\"><a href=\"#加载动画效果\" class=\"headerlink\" title=\"加载动画效果\"></a>加载动画效果</h2><p> myChart.showLoading();开始等待</p>\n<p> myChart.hideLoading();关闭等待</p>\n<p><strong>1.设置json-server模拟数据</strong></p>\n<p>（1）全局下载    <code>npm install -g json-server</code></p>\n<p>（2）新建mock文件夹 并且在其中创建json文件  设置数据</p>\n<p>（3）终端cd到mock文件夹下   启动 json-server –watch xx.json –port 端口号</p>\n<p><strong>2.页面请求数据并且设置等待效果</strong></p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>  <span class=\"attr\">ref</span>=<span class=\"string\">\"myChart\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myChart\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span>  axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>){</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span>{</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">eData</span>:[]       <span class=\"comment\">//得到 axios data数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    },</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//async用于申明一个function是异步的；</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">     <span class=\"comment\">//而await则可以认为是 async await的简写形式，是等待一个异步方法执行完成的。</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>:{              </span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">async</span> <span class=\"title function_\">linkData</span>(<span class=\"params\"></span>){    </span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"keyword\">let</span> echartsData= <span class=\"keyword\">await</span> <span class=\"title function_\">axios</span>({<span class=\"attr\">url</span>:<span class=\"string\">\"http://localhost:8888/one\"</span>})   <span class=\"comment\">//得到返回数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(echartsData.<span class=\"property\">data</span>)        </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"property\">eData</span>=echartsData.<span class=\"property\">data</span>     <span class=\"comment\">////获取得到 axios 传过来的 data</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">    },</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>){          <span class=\"comment\">//钩子函数 //调用方法  异步操作 会导致数据未加载完成就完成渲染</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> myChart = echarts.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">myChart</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 开始等待</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">showLoading</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">linkData</span>().<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>{         <span class=\"comment\">//then 当异步操作 它成功的时候，再执行渲染</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 结束等待</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        myChart.<span class=\"title function_\">hideLoading</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">        </span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> option={</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">title</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">text</span>:<span class=\"string\">\"饼状图\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"comment\">//left:\"center\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x</span>:<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">series</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">name</span>:<span class=\"string\">\"销量统计\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">type</span>:<span class=\"string\">\"pie\"</span>,              <span class=\"comment\">// 饼状图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">data</span>:<span class=\"variable language_\">this</span>.<span class=\"property\">eData</span>,                  </span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">radius</span>:[<span class=\"string\">\"40%\"</span>,<span class=\"string\">\"70%\"</span>],    <span class=\"comment\">// 设置饼图的半径  第一项内半径 第二项外半径    </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">label</span>:{                  <span class=\"comment\">// 设置环形图的文本标签</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">show</span>:<span class=\"literal\">true</span>,             <span class=\"comment\">// 默认为:true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">position</span>:<span class=\"string\">\"outside\"</span>     <span class=\"comment\">// 默认为s:outside  outside 外侧展示 inside 内展示 center中心展示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          },</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">roseType</span>:<span class=\"string\">\"area\"</span>,         <span class=\"comment\">// 是否设置成\"南丁格尔图\"  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">itemStyle</span>:{              <span class=\"comment\">// 设置直接的样式设置</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//color:\"pink\",        // 图表全局颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">shadowBlur</span>:<span class=\"number\">200</span>,        <span class=\"comment\">// 阴影度 </span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">shadowColor</span>:<span class=\"string\">\"blue\"</span>     <span class=\"comment\">// 阴影颜色</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">          }</span></span><br><span class=\"line\"><span class=\"language-javascript\">        },</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">legend</span>:{</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">x</span>:<span class=\"string\">\"left\"</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">orient</span>:<span class=\"string\">\"verical\"</span>   <span class=\"comment\">//图例的布局朝向  垂直</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      }</span></span><br><span class=\"line\"><span class=\"language-javascript\">      myChart.<span class=\"title function_\">setOption</span>(option)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      })          </span></span><br><span class=\"line\"><span class=\"language-javascript\">  }</span></span><br><span class=\"line\"><span class=\"language-javascript\">} </span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-id\">#myChart</span>{</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span></span><br><span class=\"line\"><span class=\"language-css\">}</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>localhost:8888 需后台挂着</code></p>\n<p><strong>正在加载效果：</strong></p>\n<img src=\"/posts/a1fe1312/2.png\" style=\"zoom:67%;\">\n\n<p><strong>加载完成效果</strong></p>\n<img src=\"/posts/a1fe1312/28.jpg\" style=\"zoom: 67%;\">\n\n<h2 id=\"全局设置Echarts与axios\"><a href=\"#全局设置Echarts与axios\" class=\"headerlink\" title=\"全局设置Echarts与axios\"></a>全局设置Echarts与axios</h2><h3 id=\"Echarts与axios全局引用\"><a href=\"#Echarts与axios全局引用\" class=\"headerlink\" title=\"Echarts与axios全局引用\"></a>Echarts与axios全局引用</h3><p><strong><font color=\"ondine\">首先确保安装了 echaers 和 axios</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">npm install --save echarts</span><br><span class=\"line\">npm install --save axios</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>2.0的写法</strong>在vue2.0中使用如下写法把<strong>echarts挂载在vue实例</strong>上 但是这招在3.0行不通了在main.js中进行引用和调用  如：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">import { createApp } from 'vue'</span><br><span class=\"line\">import App from './App.vue'</span><br><span class=\"line\">import router from './router'</span><br><span class=\"line\">import store from './store'</span><br><span class=\"line\">// 引用</span><br><span class=\"line\">import 'lib-flexible/flexible.js'</span><br><span class=\"line\">// 引用echarts</span><br><span class=\"line\">import * as echarts from \"echarts\"</span><br><span class=\"line\">Vue.prototype.$echarts=echarts;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">createApp(App).use(store).use(router).mount('#app')</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">vue3中使用&nbsp; Provide&nbsp; /&nbsp; Inject&nbsp; 依赖注入</font><strong>，将替代vue2中在原型链上挂载一些属性，在</strong><font color=\"red\">app.vue</font><strong>中使用</strong>provider</strong>来给后代们提供数据</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 1.引用 proivde</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> {provide} <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 2.引用 echarts</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> echarts <span class=\"keyword\">from</span> <span class=\"string\">\"echarts\"</span>  </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 3.引用 axios  </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>           </span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) {</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">provide</span>(<span class=\"string\">\"echarts\"</span>,echarts)    <span class=\"comment\">//第一个参数是名字  第二个参数是你传递的内容</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">provide</span>(<span class=\"string\">\"axios\"</span>,axios)     <span class=\"comment\">//传递  axios 相关属性</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  },</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>在想使用的组件中使用 <strong><font color=\"red\">inject</font></strong> 来接收，在views下的homePage.vue测试</p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">// 引用inject</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> {inject} <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> {</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>){   </span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"keyword\">let</span> $echarts= <span class=\"title function_\">inject</span>(<span class=\"string\">\"echarts\"</span>)  <span class=\"comment\">//接收传递的 echarts</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">       <span class=\"keyword\">let</span> $http=<span class=\"title function_\">inject</span>(<span class=\"string\">\"axios\"</span>)        <span class=\"comment\">//接收传递的 axios</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>($echarts)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>($http)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    }</span></span><br><span class=\"line\"><span class=\"language-javascript\">}</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><span class=\"github-emoji\"><span>😄</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span></p>\n","categories":["前端"],"tags":["前端"]},{"title":"java异常","url":"/posts/bbc8aabf/","content":"<ul>\n<li><p>异常：在Java语言中，将程序执行中发生的不正常情况称为“异常” 。 (开发过程中的语法错误和逻辑错误不是异常)</p>\n</li>\n<li><p>Java程序在执行过程中所发生的异常事件可分为两类：</p>\n<ol>\n<li><font color=\"red\">Error</font>：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。</li>\n<li><font color=\"red\">Exception</font>: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使 用针对性的代码进行处理。例如：</li>\n</ol>\n<ul>\n<li>空指针访问</li>\n<li>数组角标越界</li>\n<li>试图读取不存在的文件</li>\n<li>网络连接中断</li>\n</ul>\n</li>\n<li><p>程序员通常只能处理Exception，而对Error无能为力</p>\n</li>\n<li><p>对于这些错误，一般有两种解决方法：一是遇到错误就终止程序 的运行。另一种方法是由程序员在编写程序时，就考虑到错误的 检测、错误消息的提示，以及错误的处理。</p>\n</li>\n<li><p>捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。 比如：除数为0，数组下标越界等</p>\n<p>​         分类： <font color=\"red\">编译时异常</font>和 <font color=\"red\">运行时异常</font></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"运行时异常-unchecked，RuntimeException\"><a href=\"#运行时异常-unchecked，RuntimeException\" class=\"headerlink\" title=\"运行时异常(unchecked，RuntimeException):\"></a>运行时异常(unchecked，RuntimeException):</h1><p> <font color=\"red\">要编译过了，出现的错误才叫运行时异常！！！也就是骗过了编译器以下就是常用的运行时异常</font></p>\n<h1 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">main(args);</span><br><span class=\"line\"><span class=\"comment\">// java.lang.StackOverflowError</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"堆溢出\"><a href=\"#堆溢出\" class=\"headerlink\" title=\"堆溢出\"></a>堆溢出</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Integer[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"comment\">// java.lang.OutOfMemoryError</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"空指针异常\"><a href=\"#空指针异常\" class=\"headerlink\" title=\"空指针异常\"></a>空指针异常</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">str =<span class=\"literal\">null</span>;</span><br><span class=\"line\">System.out.println(str.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">// java.lang.NullPointerException</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"数组角标越界\"><a href=\"#数组角标越界\" class=\"headerlink\" title=\"数组角标越界\"></a>数组角标越界</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] arr =<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">System.out.println(arr[<span class=\"number\">10</span>]);</span><br><span class=\"line\"><span class=\"comment\">// java.lang.ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"字符串越界\"><a href=\"#字符串越界\" class=\"headerlink\" title=\"字符串越界\"></a>字符串越界</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">System.out.println(str.charAt(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">//java.lang.StringIndexOutOfBoundsException</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"类型转换异常\"><a href=\"#类型转换异常\" class=\"headerlink\" title=\"类型转换异常\"></a>类型转换异常</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> (String)obj;</span><br><span class=\"line\"><span class=\"comment\">//java.lang.ClassCastException  本身是个Date,然后向上转型，也就是多态，接下来强转，转成String，从编译的角度语法是ok的，但是会出现类型转换异常</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"数字格式异常\"><a href=\"#数字格式异常\" class=\"headerlink\" title=\"数字格式异常\"></a>数字格式异常</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span><span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">str=<span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(str);</span><br><span class=\"line\"><span class=\"comment\">// java.lang.NumberFormatException</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"输入不匹配异常\"><a href=\"#输入不匹配异常\" class=\"headerlink\" title=\"输入不匹配异常\"></a>输入不匹配异常</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">System.out.println(score);</span><br><span class=\"line\"><span class=\"comment\">// java.util.InputMismatchException   这里输入除了整形数字以外，就会报出异常</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"算数异常\"><a href=\"#算数异常\" class=\"headerlink\" title=\"算数异常\"></a>算数异常</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b=<span class=\"number\">0</span>;</span><br><span class=\"line\">System.out.println(a/b);</span><br><span class=\"line\"><span class=\"comment\">//java.lang.ArithmeticException  b为 0 时，运行时会得到无限大的数，这就叫算数的异常</span></span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<h1 id=\"编译时异常\"><a href=\"#编译时异常\" class=\"headerlink\" title=\"编译时异常\"></a>编译时异常</h1><h4 id=\"就是编译时出现的异常，直接报错了-也就是一般编译器IDE提示的异常比如：语法错误。\"><a href=\"#就是编译时出现的异常，直接报错了-也就是一般编译器IDE提示的异常比如：语法错误。\" class=\"headerlink\" title=\"就是编译时出现的异常，直接报错了,也就是一般编译器IDE提示的异常比如：语法错误。\"></a>就是编译时出现的异常，直接报错了,也就是一般编译器IDE提示的异常比如：语法错误。</h4><hr>\n<h1 id=\"异常处理机制一：-try-catch-finally\"><a href=\"#异常处理机制一：-try-catch-finally\" class=\"headerlink\" title=\"异常处理机制一： try-catch-finally\"></a>异常处理机制一： try-catch-finally</h1><p><code>ctrl+alt+T   快捷键</code></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>{</span><br><span class=\"line\">...... <span class=\"comment\">//可能产生异常的代码</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">catch</span>( ExceptionName1 e ){</span><br><span class=\"line\">...... <span class=\"comment\">//当产生ExceptionName1型异常时的处置措施</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">catch</span>( ExceptionName2 e ){</span><br><span class=\"line\">...... <span class=\"comment\">//当产生ExceptionName2型异常时的处置措施</span></span><br><span class=\"line\">}</span><br><span class=\"line\">[ <span class=\"keyword\">finally</span>{</span><br><span class=\"line\">...... <span class=\"comment\">//无论是否发生异常，都无条件执行的语句</span></span><br><span class=\"line\">} ]</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">\"hello.txt\"</span>);</span><br><span class=\"line\">} <span class=\"keyword\">catch</span> (Exception e) {</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">} <span class=\"keyword\">finally</span> {</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li><p><strong>try</strong></p>\n<p>捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现 异常的代码放在try语句块中。</p>\n</li>\n<li><p><strong>catch (Exceptiontype e)</strong></p>\n<p>在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随 一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</p>\n</li>\n<li><p><strong>finally</strong></p>\n<p>捕获异常的最后一步是通过finally语句为异常处理提供一个 统一的出口,使得在控制流转到程序的其它部分以前,能够对程序的状态作统一的管理。</p>\n<p> <font color=\"red\">不论在try代码块中是否发生了异常事件，catch语句是否执 行，catch语句是否有异常，catch语句中是否有return， finally块中的语句都会被执行。</font></p>\n<p>finally语句和catch语句是任选的</p>\n</li>\n</ul>\n<p><strong>当try语句中出现异常时</strong>，会执⾏catch中的语句，java运⾏时系统会⾃动将catch括号中的Exception e 初始化，也就是实例化Exception类型的对象。e是此名称。然后e（引⽤）会⾃动调⽤Exception类中指定的⽅法，也就出现了e.printStackTrace() <font color=\"red\">printStackTrace()⽅法的意思是：在命令⾏打印异常信息在程序中出错的位置及原因。（这是⽩话解释，⽐较容易理解)</font></p>\n<p><strong>在捕获异常的时候</strong>，⼤家都可能要⽤到这样的⼀条语句：e.printStackTrace();e是Throwable的实例异常对象，⽤在catch语句中，相当于⼀个形参，⼀旦try捕获到了异常，那么就将这个异常信息交给e，由e处理，printStackTrace()是异常类的⼀个⽅法。与它重载的⽅法还有printStackTrace(PrintStream s) 和printStackTrace(PrintWriter s)。在Throwable类中,printStackTrace()内部是这样执⾏的：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printStackTrace</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        printStackTrace(System.err);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p>它调⽤了printStackTrace(PrintStream s)⽅法。err是System类当中的⼀个静态PrintStream类型字段。所以它能传递进去。</p>\n<h2 id=\"捕获异常的有关信息\"><a href=\"#捕获异常的有关信息\" class=\"headerlink\" title=\"捕获异常的有关信息\"></a>捕获异常的有关信息</h2><p>与其它对象一样，可以访问一个异常对象的成员变量或调用它的 方法。</p>\n<ul>\n<li><font color=\"red\">getMessage()</font>   获取异常信息，返回字符串</li>\n<li><font color=\"red\">printStackTrace()</font> 获取异常类名和异常信息，以及异常出 现在程序中的位置。返回值void。</li>\n</ul>\n<h2 id=\"异常处理机制-举例-1\"><a href=\"#异常处理机制-举例-1\" class=\"headerlink\" title=\"异常处理机制:举例(1)\"></a>异常处理机制:举例(1)</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IndexOutExp</span> {</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">String friends[] = { <span class=\"string\">\"lisa\"</span>, <span class=\"string\">\"bily\"</span>, <span class=\"string\">\"kessy\"</span> };</span><br><span class=\"line\"><span class=\"keyword\">try</span> {</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) {</span><br><span class=\"line\">System.out.println(friends[i]);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">} <span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException e) {</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"index err\"</span>);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"\\nthis is the end\"</span>);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">程序IndexOutExp.java运行结果：java IndexOutExp</span><br><span class=\"line\">lisa</span><br><span class=\"line\">bily</span><br><span class=\"line\">kessy</span><br><span class=\"line\">index err</span><br><span class=\"line\">this is the en</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"异常处理机制-举例-2\"><a href=\"#异常处理机制-举例-2\" class=\"headerlink\" title=\"异常处理机制:举例(2)\"></a>异常处理机制:举例(2)</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span> x;    <span class=\"comment\">//默认为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>{</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> y;</span><br><span class=\"line\">        <span class=\"type\">test</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">test</span>();     <span class=\"comment\">//这个是自己本类，具体的类名</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> {</span><br><span class=\"line\">            y = <span class=\"number\">3</span> / c.x;      <span class=\"comment\">//调用x</span></span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (ArithmeticException e) {     <span class=\"comment\">//算数异常错误</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"test by zero error!\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"program ends ok!\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">程序DivideZero1运行结果：java DivideZero1</span><br><span class=\"line\">divide by zero error!</span><br><span class=\"line\">program ends ok!</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"异常处理机制-IO-Exception\"><a href=\"#异常处理机制-IO-Exception\" class=\"headerlink\" title=\"异常处理机制 IO Exception\"></a>异常处理机制 IO Exception</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> {</span><br><span class=\"line\">            File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">\"E:/JDBC/src/zw.txt\"</span>);   <span class=\"comment\">//实际文件路径</span></span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">            <span class=\"type\">int</span> b;</span><br><span class=\"line\">            b = in.read();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (b != -<span class=\"number\">1</span>) {      <span class=\"comment\">//到了末尾就不读了</span></span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) b);</span><br><span class=\"line\">                b = in.read();   </span><br><span class=\"line\">            }</span><br><span class=\"line\">            in.close();</span><br><span class=\"line\">        } <span class=\"keyword\">catch</span> (IOException e) {</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        } <span class=\"keyword\">finally</span> {</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"It's ok!\"</span>);</span><br><span class=\"line\">        }</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>小知识</strong>：<code>FileInputStream类的成员方法read()的功能是每次从相应的(本地为 ASCII码编码格式)文件中读取一个字节，并转换成0~255之间的int型整数返回， 到达文件末尾时则返回-1。</code></p>\n<h1 id=\"异常处理机制二：throws\"><a href=\"#异常处理机制二：throws\" class=\"headerlink\" title=\"异常处理机制二：throws\"></a>异常处理机制二：throws</h1><ul>\n<li><strong>声明抛出异常是Java中处理异常的第二种方式</strong><ol>\n<li>如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这 种异常，则此方法应<font color=\"red\">显示地</font>声明抛出异常，表明该方法将不对这些异常进行处理， 而由该方法的<font color=\"red\">调用者</font>负责处理。</li>\n<li>在方法声明中用<font color=\"red\">throws</font>语句可以声明抛出异常的列表，throws后面的异常类型可 以是方法中产生的异常类型，也可以是它的父类。</li>\n</ol>\n</li>\n<li>声明抛出异常举例：</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readFile</span><span class=\"params\">(String file)</span> <span class=\"keyword\">throws</span> FileNotFoundException {</span><br><span class=\"line\">……</span><br><span class=\"line\"><span class=\"comment\">// 读文件的操作可能产生FileNotFoundException类型的异常</span></span><br><span class=\"line\"><span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">..……</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"手动抛出异常-throw\"><a href=\"#手动抛出异常-throw\" class=\"headerlink\" title=\"手动抛出异常 throw\"></a>手动抛出异常 throw</h1><ul>\n<li><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并 抛出，也可根据需要使用人工创建并抛出。</p>\n<ol>\n<li><p>首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运 行环境)。</p>\n<p><font color=\"red\">IOException e = new IOException(); </font></p>\n<p><font color=\"red\">throw e;</font></p>\n</li>\n<li><p>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将 会产生语法错误：</p>\n<p><font color=\"red\">throw new String(“want to throw”);</font></p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"总结-异常处理5个关键字\"><a href=\"#总结-异常处理5个关键字\" class=\"headerlink\" title=\"总结:异常处理5个关键字\"></a><center>总结:异常处理5个关键字</center></h1><p><img src=\"/posts/bbc8aabf/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%85%B3%E9%94%AE%E5%AD%97.png\"></p>\n<center>一首小悟结束异常处理</center>\n\n<p>世界上最遥远的<font color=\"red\">距离</font>，是我在if里你在else里，似乎一直相伴又永远分离；</p>\n<p>世界上最痴心的<font color=\"red\">等待</font>，是我当case你是switch，或许永远都选不上自己；</p>\n<p>世界上最真情的<font color=\"red\">相依</font>，是你在try我在catch。无论你发神马脾气，我都默 默承受，静静处理。到那时，再来期待我们的finally。</p>\n<p>注：</p>\n<p>部分笔记来源：尚硅谷</p>\n","categories":["Java"],"tags":["java"]},{"title":"Python基础笔记","url":"/posts/3d8035a5/","content":"<h1 id=\"python基础笔记\"><a href=\"#python基础笔记\" class=\"headerlink\" title=\"python基础笔记\"></a><center>python基础笔记</center></h1><ul>\n<li>不单单只能导入变量函数和类都可以使用</li>\n</ul>\n<p>import&lt;模块名&gt;   会导入这个模块所有的代码元素，在访问时需要加前缀“模块名”</p>\n<p>form &lt;模块名&gt; import&lt;代码元素&gt;  会导入模块名中的代码元素(变量)直接使用代码元素名字 在访问时不需要加前缀“模块名”</p>\n<p>form &lt;模块名&gt; import&lt;代码元素&gt; as &lt;代码元素别名&gt;<br>会导入模块名中的代码元素(变量) 但使用时需要使用别名 在访问时不需要加前缀“模块名”</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> world</span><br><span class=\"line\"><span class=\"keyword\">from</span> world <span class=\"keyword\">import</span> Z</span><br><span class=\"line\"><span class=\"keyword\">from</span> world <span class=\"keyword\">import</span> x <span class=\"keyword\">as</span> x2</span><br><span class=\"line\">x=<span class=\"number\">100</span></span><br><span class=\"line\">y=<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (y)       <span class=\"comment\">#访问当前模块变量y</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (world.y) <span class=\"comment\">#访问world模块变量y</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (z)       <span class=\"comment\">#访问world模块变量z</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (x2)      <span class=\"comment\">#x2是wor1d模块x别名</span></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"数字类型的数据\"><a href=\"#数字类型的数据\" class=\"headerlink\" title=\"数字类型的数据\"></a>数字类型的数据</h1><ul>\n<li><p>Python中有6种主要的内置数据类型：数字、字符串、列表、元组、集合和字典。</p>\n</li>\n<li><p>Python中有4种数字类型：整数类型、浮类型、复数类型和布尔类型</p>\n</li>\n</ul>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><ul>\n<li>Python中的整数类型为int类</li>\n<li>整数类型只有一种就是int</li>\n<li>默认情况下表示10进制</li>\n</ul>\n<ol>\n<li>二进制表示方式以阿拉伯数字 0B或(b) 作为前缀</li>\n<li>八进制表示方式以阿拉伯数字 0O或(o) 作为前缀</li>\n<li>十六进制表示方式以阿拉伯数字 0X或(x)作为前缀<h2 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h2></li>\n</ol>\n<ul>\n<li>Python中的浮点类型为float类</li>\n</ul>\n<ol>\n<li>print(type(1.))  打印出来也是float类型</li>\n<li>采用科学及算法表示科学计数法中会使用E(或e)表示10的指数，如e2表示10</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3.36e2</span>)  //结果：<span class=\"number\">336.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3.36e-2</span>) //结果：<span class=\"number\">0.0336</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">.36e-2</span>)  //结果：<span class=\"number\">0.00336</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"复数类型\"><a href=\"#复数类型\" class=\"headerlink\" title=\"复数类型\"></a>复数类型</h2><ul>\n<li>复数在数学中被表示为：a+bi,其中a被称为实部b被称为虚部，被称为虚数单位。</li>\n</ul>\n<ol>\n<li>复数不能单独存在，他们总是和一个0.0的实属部分一起来构成一个复数</li>\n<li>复数有实数部分和虚数部分构成</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span>+<span class=\"number\">2j</span></span><br><span class=\"line\">b=<span class=\"number\">1</span>+<span class=\"number\">4j</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a+b)   // (<span class=\"number\">2</span>+<span class=\"number\">6j</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)) // &lt;<span class=\"keyword\">class</span> <span class=\"string\">'complex'</span>&gt;</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><ul>\n<li>Python中的布尔类型为bool类：它只有两个值：True和False。</li>\n</ul>\n<ol>\n<li>布尔类型也属于整数类型，也可以说是整数类型的一种子类</li>\n<li>在python只有True和False、</li>\n</ol>\n<p>注意可以进行转换：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">0</span>))   //整数<span class=\"number\">0</span>被转换为<span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">2</span>))   //其他非零整数例如<span class=\"number\">2</span>被转换为<span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"string\">''</span>))  //其他非空字符串会被转换为<span class=\"literal\">True</span> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>([]))  //(空列表）被转换为<span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>({}))  //(空字典）被转换为<span class=\"literal\">False</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"数字类型的相互转换\"><a href=\"#数字类型的相互转换\" class=\"headerlink\" title=\"数字类型的相互转换\"></a>数字类型的相互转换</h2><ol>\n<li>隐式类型的转换（自动类型转换）</li>\n<li>显式类型的转换（通过某种手段转换）</li>\n</ol>\n<h3 id=\"隐式类型转换：\"><a href=\"#隐式类型转换：\" class=\"headerlink\" title=\"隐式类型转换：\"></a>隐式类型转换：</h3><ul>\n<li>数字之间可以进行数学计算，在<br>进行数学计算时若数字类型不同，则<br>会发生隐式类型的转换。</li>\n</ul>\n<h4 id=\"转换表\"><a href=\"#转换表\" class=\"headerlink\" title=\"转换表\"></a><center>转换表</center></h4><table>\n<thead>\n<tr>\n<th align=\"center\">操作数1的类型</th>\n<th align=\"center\">操作数为2的类型</th>\n<th align=\"center\">转换后的类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">布尔</td>\n<td align=\"center\">整数</td>\n<td align=\"center\">整数</td>\n</tr>\n<tr>\n<td align=\"center\">布尔、整数</td>\n<td align=\"center\">浮点</td>\n<td align=\"center\">浮点</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span>+<span class=\"literal\">True</span>)      //布尔值<span class=\"literal\">True</span>被转换为整数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>)       //整数<span class=\"number\">1</span>被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"literal\">True</span>)    //布尔值<span class=\"literal\">True</span>被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>+<span class=\"literal\">True</span>)  //整数<span class=\"number\">1</span>和布尔值都被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>+<span class=\"literal\">False</span>) //整数<span class=\"number\">1</span>和布尔值都被转换为浮点数</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"显式类型转换：\"><a href=\"#显式类型转换：\" class=\"headerlink\" title=\"显式类型转换：\"></a>显式类型转换：</h3><ul>\n<li>需要使用转换函数进行显示转换分别是 int()、float()和bool()函数，来实现数字类型之间的转换</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>))   //<span class=\"built_in\">int</span>(<span class=\"number\">1.0</span>)被转换为整数<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">False</span>))   //布尔数值<span class=\"literal\">False</span>使用<span class=\"built_in\">int</span>()函数返回<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">True</span>))    //布尔数值<span class=\"literal\">True</span>使用<span class=\"built_in\">int</span>()函数返回<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">0.6</span>))     //浮点数值使用<span class=\"built_in\">int</span>()函数会截掉小数部分</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"number\">5</span>))     //整数值使用f1oat()函数会加上小数部分(<span class=\"number\">.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"literal\">False</span>)) //布尔数值<span class=\"literal\">False</span>使用<span class=\"built_in\">float</span>()函数返回<span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"literal\">True</span>))  //与齿数值<span class=\"literal\">True</span>使用<span class=\"built_in\">float</span>()函数返回<span class=\"number\">1.0</span></span><br><span class=\"line\">结果：</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"number\">1.0</span></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>赋值运算符</li>\n<li>运算符优先级<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\">加</td>\n<td align=\"center\">a+b</td>\n<td align=\"center\">求a与b的和</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">减</td>\n<td align=\"center\">a-b</td>\n<td align=\"center\">求a与b的差</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">乘</td>\n<td align=\"center\">a*b</td>\n<td align=\"center\">求a与b的积</td>\n</tr>\n<tr>\n<td align=\"center\">/</td>\n<td align=\"center\">除</td>\n<td align=\"center\">a/b</td>\n<td align=\"center\">求a除以b的商</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">取余</td>\n<td align=\"center\">a%b</td>\n<td align=\"center\">求a除以b的余数</td>\n</tr>\n<tr>\n<td align=\"center\">**</td>\n<td align=\"center\">幂</td>\n<td align=\"center\">a**b</td>\n<td align=\"center\">求a的b次幂</td>\n</tr>\n<tr>\n<td align=\"center\">//</td>\n<td align=\"center\">地板除法</td>\n<td align=\"center\">a//b</td>\n<td align=\"center\">求小于a与b的商的最大整数</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n<li>除法和地板除法的区别：/ 除的数结果是float类型 地板除法除的结果是整数类型<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span>    </span><br><span class=\"line\"><span class=\"built_in\">print</span>(-a)    //-a是对a的取反运算</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>//<span class=\"number\">2</span>)  // <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>/<span class=\"number\">2</span>)   // <span class=\"number\">1.5</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">3</span>//<span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">8</span>/<span class=\"number\">3</span>) // -<span class=\"number\">2</span></span><br><span class=\"line\">注意：</span><br><span class=\"line\">//   负数的地板除法运算 和整数不同 得到商后 像上取整，结果也就变成-<span class=\"number\">2</span> 了</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">==</td>\n<td align=\"center\">等于</td>\n<td align=\"center\">a==b</td>\n<td align=\"center\">a等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">!=</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">a!=b</td>\n<td align=\"center\">与==相反</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">a&gt;b</td>\n<td align=\"center\">a大于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">a&lt;b</td>\n<td align=\"center\">a小于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;=</td>\n<td align=\"center\">大于等于</td>\n<td align=\"center\">a&gt;=b</td>\n<td align=\"center\">a大于等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;=</td>\n<td align=\"center\">小于等于</td>\n<td align=\"center\">a&lt;=b</td>\n<td align=\"center\">a小于等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">not</td>\n<td align=\"center\">逻辑非</td>\n<td align=\"center\">not a</td>\n<td align=\"center\">a为True时，值为False,a为False时，值为True</td>\n</tr>\n<tr>\n<td align=\"center\">and</td>\n<td align=\"center\">逻辑与</td>\n<td align=\"center\">a and b</td>\n<td align=\"center\">a、b全为Tue时，计算结果为True,否则为False</td>\n</tr>\n<tr>\n<td align=\"center\">or</td>\n<td align=\"center\">逻辑或</td>\n<td align=\"center\">a or b</td>\n<td align=\"center\">a、b全为Falset时，计算结果为False,否则为True</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>注意: 结果值为 True 和 False (bool值)</p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">~</td>\n<td align=\"center\">位反</td>\n<td align=\"center\">~X</td>\n<td align=\"center\">将x的值按位取反</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">位与</td>\n<td align=\"center\">x &amp; y</td>\n<td align=\"center\">将x与y按位进行位与运算</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">位或</td>\n<td align=\"center\">x | y</td>\n<td align=\"center\">将x与y按位进行位或运算</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">位异或</td>\n<td align=\"center\">x ^ y</td>\n<td align=\"center\">将x与y按位进行位异或运算</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&gt;</td>\n<td align=\"center\">右移</td>\n<td align=\"center\">x &gt;&gt; a</td>\n<td align=\"center\">将x右移a位，高位采用符号位补位</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&lt;</td>\n<td align=\"center\">左移</td>\n<td align=\"center\">x &lt;&lt; a</td>\n<td align=\"center\">将x左移a位，低位用0补位</td>\n</tr>\n</tbody></table>\n","categories":["Python"],"tags":["python"]},{"title":"Python字符串","url":"/posts/5fea1e5a/","content":"<h2 id=\"爬虫是如何爬取网页的\"><a href=\"#爬虫是如何爬取网页的\" class=\"headerlink\" title=\"爬虫是如何爬取网页的\"></a>爬虫是如何爬取网页的</h2><ul>\n<li><blockquote>\n<p>1.向网页发送请求</p>\n<p>2.获取网页源代码</p>\n<p>3.解析数据内容</p>\n<p>4.存储数据</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"python中面向对象的三大基本特征及作用\"><a href=\"#python中面向对象的三大基本特征及作用\" class=\"headerlink\" title=\"python中面向对象的三大基本特征及作用\"></a>python中面向对象的三大基本特征及作用</h2><ul>\n<li><blockquote>\n<p>继承、封装（隐藏）、多态。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"类方法和实例方法\"><a href=\"#类方法和实例方法\" class=\"headerlink\" title=\"类方法和实例方法\"></a>类方法和实例方法</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">类名</span>:</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">类方法名</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">        <span class=\"comment\">#方法体</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 实例属性</span></span><br><span class=\"line\">        self.age = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># self.number = 100</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"字符串内联函数\"><a href=\"#字符串内联函数\" class=\"headerlink\" title=\"字符串内联函数\"></a>字符串内联函数</h1><ul>\n<li><blockquote>\n<p>切片截取字符串 [起始:结束:步长]</p>\n</blockquote>\n<p><code>结束有，练习代码！！！</code></p>\n</li>\n</ul>\n<h2 id=\"find函数\"><a href=\"#find函数\" class=\"headerlink\" title=\"find函数\"></a><strong>find函数</strong></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.find(<span class=\"built_in\">str</span>, beg=<span class=\"number\">0</span>, end=<span class=\"built_in\">len</span>(string))</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\"><span class=\"built_in\">str</span> -- 指定检索的字符串。</span><br><span class=\"line\">beg -- 开始索引，默认为<span class=\"number\">0</span>。</span><br><span class=\"line\">end -- 结束索引，默认为字符串的长度</span><br><span class=\"line\"></span><br><span class=\"line\">第⼀次匹配成功时返回匹配位置的索引，否则返回-<span class=\"number\">1</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"index函数\"><a href=\"#index函数\" class=\"headerlink\" title=\"index函数\"></a><strong>index函数</strong></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.find(<span class=\"built_in\">str</span>, beg=<span class=\"number\">0</span>, end=<span class=\"built_in\">len</span>(string))</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\"><span class=\"built_in\">str</span> -- 指定检索的字符串。</span><br><span class=\"line\">beg -- 开始索引，默认为<span class=\"number\">0</span>。</span><br><span class=\"line\">end -- 结束索引，默认为字符串的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">第⼀次匹配成功时返回匹配位置的索引，否则抛出异常 ValueError.</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>区别：find与index都是Python3中str类型的内置类型，都是⽤于查找⼦串在字符串中第⼀次匹配成功并返回，区别在于当匹配不成功时，前者返回-1，⽽后者抛出异常。</code></p>\n<h2 id=\"count函数\"><a href=\"#count函数\" class=\"headerlink\" title=\"count函数\"></a><strong>count函数</strong></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.count(sub, start= <span class=\"number\">0</span>, end=<span class=\"built_in\">len</span>(string))</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\">sub -- 搜索的子字符串</span><br><span class=\"line\">start -- 字符串开始搜索的位置</span><br><span class=\"line\">end -- 字符串中结束搜索的位置</span><br><span class=\"line\"></span><br><span class=\"line\">统计字符串中某个字符的个数</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"replace函数\"><a href=\"#replace函数\" class=\"headerlink\" title=\"replace函数\"></a><strong>replace函数</strong></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.replace(old, new[, <span class=\"built_in\">max</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\">old -- 将被替换的字符串。</span><br><span class=\"line\">new -- 新字符串，用于替换old字符串。</span><br><span class=\"line\"><span class=\"built_in\">max</span> -- 可选字符串，替换不超过mac次</span><br><span class=\"line\"></span><br><span class=\"line\">将旧字符串替换为新字符串</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"splite函数\"><a href=\"#splite函数\" class=\"headerlink\" title=\"splite函数\"></a><strong>splite函数</strong></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.split(<span class=\"built_in\">str</span>=<span class=\"string\">\"\"</span>, num=string.count(<span class=\"built_in\">str</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\"><span class=\"built_in\">str</span> -- 分隔符。默认为所有空字符。</span><br><span class=\"line\">num -- 分割次</span><br><span class=\"line\"></span><br><span class=\"line\">通过指定分隔符对字符串进行切片</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"capitalize函数\"><a href=\"#capitalize函数\" class=\"headerlink\" title=\"capitalize函数\"></a>capitalize函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.capitalize()</span><br><span class=\"line\"></span><br><span class=\"line\">第一个字符大写，其他字符小写</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"title函数\"><a href=\"#title函数\" class=\"headerlink\" title=\"title函数\"></a>title函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.title()</span><br><span class=\"line\"></span><br><span class=\"line\">所有单词首字母大写，其余字母小写</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"startswith函数\"><a href=\"#startswith函数\" class=\"headerlink\" title=\"startswith函数\"></a>startswith函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.startswith(<span class=\"built_in\">str</span>, beg=<span class=\"number\">0</span>,end=<span class=\"built_in\">len</span>(string))</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\"><span class=\"built_in\">str</span> -- 检测的字符串。</span><br><span class=\"line\">strbeg -- 可选参数用于设置字符串检测的起始位置。</span><br><span class=\"line\">strend -- 可选参数用于设置字符串检测的结束位置</span><br><span class=\"line\"></span><br><span class=\"line\">检查字符串是否以制定子串开头</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"endswith函数\"><a href=\"#endswith函数\" class=\"headerlink\" title=\"endswith函数\"></a>endswith函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.endswith(suffix[, start[, end]])</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\">suffix -- 该参数可以是一个字符串或者是一个元素。</span><br><span class=\"line\">start -- 字符串中的开始位置。</span><br><span class=\"line\">end -- 字符串中的结束位置。</span><br><span class=\"line\"></span><br><span class=\"line\">检查字符串是否以制定子串结尾</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"upper函数\"><a href=\"#upper函数\" class=\"headerlink\" title=\"upper函数\"></a>upper函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.upper()</span><br><span class=\"line\"></span><br><span class=\"line\">mystr = <span class=\"string\">'hello world itheima and itheimaApp'</span></span><br><span class=\"line\">newStr = mystr.upper()</span><br><span class=\"line\">结果为：HELLO WORLD ITHEIMA AND ITHEIMAAPP</span><br><span class=\"line\"></span><br><span class=\"line\">将小写字母转为大写字母</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"ljust函数\"><a href=\"#ljust函数\" class=\"headerlink\" title=\"ljust函数\"></a>ljust函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.ljust(width[, fillchar])</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\">width -- 指定字符串长度。</span><br><span class=\"line\">fillchar -- 填充字符，默认为空格</span><br><span class=\"line\"></span><br><span class=\"line\">左对齐，使用空格填充至指定长度的新字符串</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"rjust函数\"><a href=\"#rjust函数\" class=\"headerlink\" title=\"rjust函数\"></a>rjust函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.rjust(width[, fillchar])</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\">width -- 指定字符串长度。</span><br><span class=\"line\">fillchar -- 填充字符，默认为空格</span><br><span class=\"line\"></span><br><span class=\"line\">右对齐，使用空格填充至指定长度的新字符串</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"center函数\"><a href=\"#center函数\" class=\"headerlink\" title=\"center函数\"></a>center函数</h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span>.center(width[, fillchar])</span><br><span class=\"line\"></span><br><span class=\"line\">参数如下：</span><br><span class=\"line\">width -- 字符串的总宽度。</span><br><span class=\"line\">fillchar -- 填充字符。</span><br><span class=\"line\"></span><br><span class=\"line\">返回一个指定的宽度 width 居中的字符串 </span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- code =utf-8 #-*-</span></span><br><span class=\"line\"><span class=\"comment\"># @Time : 2022/6/6</span></span><br><span class=\"line\"><span class=\"comment\"># @Author: kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"># @File : test3.py</span></span><br><span class=\"line\"><span class=\"comment\"># @Software: PyCharm</span></span><br><span class=\"line\">name = <span class=\"string\">\"abcdef\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(name[::-<span class=\"number\">1</span>])  \t\t\t\t<span class=\"comment\"># 负数就是从右边看步长</span></span><br><span class=\"line\">str1 = <span class=\"string\">\"this is string example....wow!!!\"</span></span><br><span class=\"line\">str2 = <span class=\"string\">\"exam\"</span></span><br><span class=\"line\">i = <span class=\"string\">\"i\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.index(str2))\t\t\t\t  <span class=\"comment\"># 是否包含子字符串,返回下标</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(str2))\t\t\t\t  <span class=\"comment\"># 是否包含子字符串,返回下标</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.count(i)) \t\t\t\t  <span class=\"comment\"># 统计个数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.replace(<span class=\"string\">\"this\"</span>, <span class=\"string\">\"those\"</span>))  <span class=\"comment\"># 将旧字符串替换为新字符串</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str2.split(<span class=\"string\">\" \"</span>, <span class=\"number\">1</span>))  \t\t<span class=\"comment\"># 默认是以空格分割 这个是按空格分割一次</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.capitalize())  \t\t<span class=\"comment\"># 第一个字符大写，其他字符小写</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.title())  \t\t\t<span class=\"comment\"># 所有单词首字母大写  其余字母小写</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.startswith(<span class=\"string\">'this'</span>))  <span class=\"comment\"># 检查字符串是否以制定子串开头</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.startswith(<span class=\"string\">'is'</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>))  <span class=\"comment\"># 下标范围</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.startswith(<span class=\"string\">'this'</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>))  <span class=\"comment\"># flase</span></span><br><span class=\"line\">zw=<span class=\"string\">\"str\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.endswith(zw,<span class=\"number\">8</span>,<span class=\"number\">11</span>)) <span class=\"comment\"># 判断是否有后缀  字符开始位置下标，结束位置下标</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.upper())           <span class=\"comment\">#全部转换为大写</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.ljust(<span class=\"number\">40</span>,<span class=\"string\">'0'</span>))     <span class=\"comment\">#默认使用空格，可以指定填充   左对齐</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.rjust(<span class=\"number\">40</span>,<span class=\"string\">'0'</span>))     <span class=\"comment\">#默认使用空格，可以指定填充   右对齐</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.center(<span class=\"number\">40</span>,<span class=\"string\">'0'</span>))    <span class=\"comment\">#默认使用空格，可以指定填充   居中对齐</span></span><br></pre></td></tr></tbody></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">str1 = <span class=\"string\">\"this is string example....wow!!!\"</span></span><br><span class=\"line\">str2 = <span class=\"string\">\"exam\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.index(str2))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(str1.find(str2))</span><br></pre></td></tr></tbody></table></figure>\n\n","categories":["Python"],"tags":["python"]},{"title":"mysql基础笔记","url":"/posts/3daa3ed0/","content":"<h1 id=\"MySQL基础知识\"><a href=\"#MySQL基础知识\" class=\"headerlink\" title=\"MySQL基础知识\"></a>MySQL基础知识</h1><ul>\n<li><strong>概念</strong><br>MySQL是一款开源、跨平台的关系型数据库管理系统(DBMS，Database Management System)。关系型数据库将数据存放在结构化的一个或多个表中，表之间相互关联，反应客观事物的本质联系。数据库管理系统提供对数据的安全性和完整性控制。</li>\n<li><strong>表</strong><br>关系型数据库中，数据库表是一系列二维数组的集合，用来存储数据和操作数据的逻辑，由记录(行)和字段(列)组成。</li>\n<li><strong>主键</strong><br>主键(Primary Key)又称主码，用于唯一的标识表中的每一条记录，可以由一列或多列组合。主键列上不能重复值，也不能为空(null)，用来做确定数据唯一性的标识。</li>\n</ul>\n<h2 id=\"SQL语句的分类\"><a href=\"#SQL语句的分类\" class=\"headerlink\" title=\"SQL语句的分类\"></a>SQL语句的分类</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">SQL语句有很多，最好进行分门别类，这样更容易记忆。</span><br><span class=\"line\">\t分为：</span><br><span class=\"line\">\tDQL：</span><br><span class=\"line\">\t\t数据查询语言（凡是带有select关键字的都是查询语句）</span><br><span class=\"line\">\t\tselect...</span><br><span class=\"line\"></span><br><span class=\"line\">\tDML：</span><br><span class=\"line\">\t\t数据操作语言（凡是对表当中的数据进行增删改的都是DML）</span><br><span class=\"line\">\t\tinsert delete update</span><br><span class=\"line\">\t\tinsert 增</span><br><span class=\"line\">\t\tdelete 删</span><br><span class=\"line\">\t\tupdate 改</span><br><span class=\"line\">\t\t这个主要是操作表中的数据data。</span><br><span class=\"line\"></span><br><span class=\"line\">\tDDL：</span><br><span class=\"line\">\t\t数据定义语言</span><br><span class=\"line\">\t\t凡是带有create、drop、alter的都是DDL。</span><br><span class=\"line\">\t\tDDL主要操作的是表的结构。不是表中的数据。</span><br><span class=\"line\">\t\tcreate：新建，等同于增</span><br><span class=\"line\">\t\tdrop：删除</span><br><span class=\"line\">\t\talter：修改</span><br><span class=\"line\">\t\t这个增删改和DML不同，这个主要是对表结构进行操作。</span><br><span class=\"line\"></span><br><span class=\"line\">\tTCL：</span><br><span class=\"line\">\t\t是事务控制语言</span><br><span class=\"line\">\t\t包括：</span><br><span class=\"line\">\t\t事务提交：commit;</span><br><span class=\"line\">\t\t事务回滚：rollback;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDCL：</span><br><span class=\"line\">\t\t是数据控制语言。</span><br><span class=\"line\">\t\t例如：授权grant、撤销权限revoke....</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">退出mysql ：exit;</span><br><span class=\"line\"></span><br><span class=\"line\">查看mysql中有哪些数据库 : show databases;  #注意：以分号结尾，分号是英文的分号。</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">\t+--------------------+</span><br><span class=\"line\">\t| Database           |</span><br><span class=\"line\">\t+--------------------+</span><br><span class=\"line\">\t| information_schema |</span><br><span class=\"line\">\t| mysql              |</span><br><span class=\"line\">\t| performance_schema |</span><br><span class=\"line\">\t| test               |</span><br><span class=\"line\">\t+--------------------+</span><br><span class=\"line\">\tmysql默认自带了4个数据库。</span><br><span class=\"line\">\t</span><br><span class=\"line\">选择使用某个数据库:</span><br><span class=\"line\">mysql&gt; use test;</span><br><span class=\"line\">\tDatabase changed</span><br><span class=\"line\">\t表示正在使用一个名字叫做test的数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">创建数据库:</span><br><span class=\"line\">mysql&gt; create database bjpowernode;</span><br><span class=\"line\">\tQuery OK, 1 row affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">\t\t+--------------------+</span><br><span class=\"line\">\t\t| Database           |</span><br><span class=\"line\">\t\t+--------------------+</span><br><span class=\"line\">\t\t| information_schema |</span><br><span class=\"line\">\t\t| bjpowernode        |</span><br><span class=\"line\">\t\t| mysql              |</span><br><span class=\"line\">\t\t| performance_schema |</span><br><span class=\"line\">\t\t| test               |</span><br><span class=\"line\">\t\t+--------------------+</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">查看某个数据库下有哪些表:</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\"></span><br><span class=\"line\">查看mysql数据库的版本号：</span><br><span class=\"line\">mysql&gt; select version();</span><br><span class=\"line\">\t\t+-----------+</span><br><span class=\"line\">\t\t| version() |</span><br><span class=\"line\">\t\t+-----------+</span><br><span class=\"line\">\t\t| 5.5.36    |</span><br><span class=\"line\">\t\t+-----------+</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">查看当前使用的是哪个数据库:</span><br><span class=\"line\">mysql&gt; select database();</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\">\t| database()  |</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\">\t| bjpowernode |</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">导入一下提前准备好的数据：bjpowernode.sql 这个文件中是练习准备的数据库表。</span><br><span class=\"line\">怎么将sql文件中的数据导入</span><br><span class=\"line\">mysql&gt; source D:\\course\\03-MySQL\\document\\bjpowernode.sql #注意：路径中不要有中文！！！！</span><br><span class=\"line\"></span><br><span class=\"line\">查看表的结构：</span><br><span class=\"line\">mysql&gt; desc dept; # describe缩写为：desc</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| DEPTNO | int(2)      | NO   | PRI | NULL    |       |部门编号</span><br><span class=\"line\">| DNAME  | varchar(14) | YES  |     | NULL    |       |部门名字</span><br><span class=\"line\">| LOC    | varchar(13) | YES  |     | NULL    |       |地理位置</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"数据库表\"><a href=\"#数据库表\" class=\"headerlink\" title=\"数据库表\"></a>数据库表</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">退出mysql ：exit;</span><br><span class=\"line\"></span><br><span class=\"line\">查看mysql中有哪些数据库 : show databases;  #注意：以分号结尾，分号是英文的分号。</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">\t+--------------------+</span><br><span class=\"line\">\t| Database           |</span><br><span class=\"line\">\t+--------------------+</span><br><span class=\"line\">\t| information_schema |</span><br><span class=\"line\">\t| mysql              |</span><br><span class=\"line\">\t| performance_schema |</span><br><span class=\"line\">\t| test               |</span><br><span class=\"line\">\t+--------------------+</span><br><span class=\"line\">\tmysql默认自带了4个数据库。</span><br><span class=\"line\">\t</span><br><span class=\"line\">选择使用某个数据库:</span><br><span class=\"line\">mysql&gt; use test;</span><br><span class=\"line\">\tDatabase changed</span><br><span class=\"line\">\t表示正在使用一个名字叫做test的数据库。</span><br><span class=\"line\"></span><br><span class=\"line\">创建数据库:</span><br><span class=\"line\">mysql&gt; create database bjpowernode;</span><br><span class=\"line\">\tQuery OK, 1 row affected (0.00 sec)</span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">\t\t+--------------------+</span><br><span class=\"line\">\t\t| Database           |</span><br><span class=\"line\">\t\t+--------------------+</span><br><span class=\"line\">\t\t| information_schema |</span><br><span class=\"line\">\t\t| bjpowernode        |</span><br><span class=\"line\">\t\t| mysql              |</span><br><span class=\"line\">\t\t| performance_schema |</span><br><span class=\"line\">\t\t| test               |</span><br><span class=\"line\">\t\t+--------------------+</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">查看某个数据库下有哪些表:</span><br><span class=\"line\">mysql&gt; show tables;</span><br><span class=\"line\"></span><br><span class=\"line\">查看mysql数据库的版本号：</span><br><span class=\"line\">mysql&gt; select version();</span><br><span class=\"line\">\t\t+-----------+</span><br><span class=\"line\">\t\t| version() |</span><br><span class=\"line\">\t\t+-----------+</span><br><span class=\"line\">\t\t| 5.5.36    |</span><br><span class=\"line\">\t\t+-----------+</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">查看当前使用的是哪个数据库:</span><br><span class=\"line\">mysql&gt; select database();</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\">\t| database()  |</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\">\t| bjpowernode |</span><br><span class=\"line\">\t+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">导入一下提前准备好的数据：bjpowernode.sql 这个文件中是练习准备的数据库表。</span><br><span class=\"line\">怎么将sql文件中的数据导入</span><br><span class=\"line\">mysql&gt; source D:\\course\\03-MySQL\\document\\bjpowernode.sql #注意：路径中不要有中文！！！！</span><br><span class=\"line\"></span><br><span class=\"line\">查看表的结构：</span><br><span class=\"line\">mysql&gt; desc dept; # describe缩写为：desc</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br><span class=\"line\">| DEPTNO | int(2)      | NO   | PRI | NULL    |       |部门编号</span><br><span class=\"line\">| DNAME  | varchar(14) | YES  |     | NULL    |       |部门名字</span><br><span class=\"line\">| LOC    | varchar(13) | YES  |     | NULL    |       |地理位置</span><br><span class=\"line\">+--------+-------------+------+-----+---------+-------+</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"查询：select\"><a href=\"#查询：select\" class=\"headerlink\" title=\"查询：select\"></a>查询：select</h1><h2 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">查询一个字段</span><br><span class=\"line\">select 字段名 from 表名；</span><br><span class=\"line\"># select和from都是关键字</span><br><span class=\"line\"># 字段名和表名都是标识符</span><br><span class=\"line\"></span><br><span class=\"line\">强调:对于SQL语句来说，都是通用的,有的SQL语句以“;”结尾。</span><br><span class=\"line\">\t另外SQL语句不区分大小写，都行</span><br><span class=\"line\">\t</span><br><span class=\"line\">查询两个字段或多个字段</span><br><span class=\"line\">select deptno,dname from dept;</span><br><span class=\"line\">    +--------+------------+</span><br><span class=\"line\">    | deptno | dname      |</span><br><span class=\"line\">    +--------+------------+</span><br><span class=\"line\">    |     10 | ACCOUNTING |</span><br><span class=\"line\">    |     20 | RESEARCH   |</span><br><span class=\"line\">    |     30 | SALES      |</span><br><span class=\"line\">    |     40 | OPERATIONS |</span><br><span class=\"line\">    +--------+------------+</span><br><span class=\"line\"></span><br><span class=\"line\">查询所有字段</span><br><span class=\"line\">第一种方式：可以把每个字段都写上</span><br><span class=\"line\">\tselect a,b,c,d,e,f... from tablename;</span><br><span class=\"line\"></span><br><span class=\"line\">第二种方式：可以使用*</span><br><span class=\"line\">\tselect * from dept;</span><br><span class=\"line\">\t\t+--------+------------+----------+</span><br><span class=\"line\">\t\t| DEPTNO | DNAME      | LOC      |</span><br><span class=\"line\">\t\t+--------+------------+----------+</span><br><span class=\"line\">        |     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">        |     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">        |     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">        |     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">        +--------+------------+----------+</span><br><span class=\"line\">\t这种方式的缺点：</span><br><span class=\"line\">        1、效率低</span><br><span class=\"line\">        2、可读性差。</span><br><span class=\"line\">    在实际开发中不建议，可以自己玩没问题，可以在DOS命令窗口中想快速的看一看全表数据可以采用这种方式。</span><br><span class=\"line\"></span><br><span class=\"line\">给查询的列起别名：使用as关键字起别名。</span><br><span class=\"line\">  \tmysql&gt; select deptno,dname as deptname from dept;</span><br><span class=\"line\">      +--------+------------+</span><br><span class=\"line\">      | deptno | deptname   |</span><br><span class=\"line\">      +--------+------------+</span><br><span class=\"line\">      |     10 | ACCOUNTING |</span><br><span class=\"line\">      |     20 | RESEARCH   |</span><br><span class=\"line\">      |     30 | SALES      |</span><br><span class=\"line\">      |     40 | OPERATIONS |</span><br><span class=\"line\">      +--------+------------+</span><br><span class=\"line\">  \t注意：只是将显示的查询结果列名显示为deptname，原表列名还是叫：dname</span><br><span class=\"line\">  \t记住：select语句是永远都不会进行修改操作的。（因为只负责查询）</span><br><span class=\"line\"></span><br><span class=\"line\">as关键字可以省略吗？可以的</span><br><span class=\"line\">    mysql&gt; select deptno,dname deptname from dept;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t假设起别名的时候，别名里面有空格，怎么办？   </span><br><span class=\"line\">select deptno,dname 'dept name' from dept; //加单引号</span><br><span class=\"line\">select deptno,dname \"dept name\" from dept; //加双引号</span><br><span class=\"line\">      +--------+------------+</span><br><span class=\"line\">      | deptno | dept name  |</span><br><span class=\"line\">      +--------+------------+</span><br><span class=\"line\">      |     10 | ACCOUNTING |</span><br><span class=\"line\">      |     20 | RESEARCH   |</span><br><span class=\"line\">      |     30 | SALES      |</span><br><span class=\"line\">      |     40 | OPERATIONS |</span><br><span class=\"line\">      +--------+------------+</span><br><span class=\"line\">\t注意：在所有的数据库当中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle数据库中用不了。但是在mysql中可以使用。</span><br><span class=\"line\">再次强调：数据库中的字符串都是用单引号括起来。这是标准的。双引号不标准。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">select first_name,salary*12 from employees;</span><br><span class=\"line\">select first_name,salary*12 一年的工资 from employees; #--起别名</span><br><span class=\"line\"></span><br><span class=\"line\">结论：字段可以使用数学表达式！！！  然后起别名</span><br><span class=\"line\">    </span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<hr>\n<h2 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h2><p><strong>1. 什么是条件查询?</strong></p>\n<p><strong><font color=\"ondine\">不是将表中所有的数据都查出来，是查询符合条件的。</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">查询语法格式：</span><br><span class=\"line\">\tselect</span><br><span class=\"line\">\t\t字段1，字段2，字段3....</span><br><span class=\"line\">\tfrom</span><br><span class=\"line\">\t\t表名</span><br><span class=\"line\">\twhere</span><br><span class=\"line\">\t\t条件;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>2. 都有哪些条件?</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">= 等于</span><br><span class=\"line\">查询薪资等于800的员工姓名和编号？</span><br><span class=\"line\">  select empno,ename from emp where sal = 800;</span><br><span class=\"line\">查询SMITH的编号和薪资？</span><br><span class=\"line\">  select empno,sal from emp where ename = 'SMITH'; //字符串使用单引号</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&gt; 或!= 不等于</span><br><span class=\"line\">查询薪资不等于800的员工姓名和编号？</span><br><span class=\"line\">  select empno,ename from emp where sal != 800;</span><br><span class=\"line\">  select empno,ename from emp where sal &lt;&gt; 800; // 小于号和大于号组成的不等号</span><br><span class=\"line\">  </span><br><span class=\"line\">&lt; 小于</span><br><span class=\"line\">查询薪资小于2000的员工姓名和编号？</span><br><span class=\"line\">  mysql&gt; select empno,ename,sal from emp where sal &lt; 2000;</span><br><span class=\"line\">  +-------+--------+---------+</span><br><span class=\"line\">  | empno | ename  | sal     |</span><br><span class=\"line\">  +-------+--------+---------+</span><br><span class=\"line\">  |  7369 | SMITH  |  800.00 |</span><br><span class=\"line\">  |  7499 | ALLEN  | 1600.00 |</span><br><span class=\"line\">  |  7521 | WARD   | 1250.00 |</span><br><span class=\"line\">  +-------+--------+---------+</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;= 小于等于</span><br><span class=\"line\">查询薪资小于等于3000的员工姓名和编号？</span><br><span class=\"line\">  select empno,ename,sal from emp where sal &lt;= 3000;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 大于</span><br><span class=\"line\">查询薪资大于3000的员工姓名和编号？</span><br><span class=\"line\">  select empno,ename,sal from emp where sal &gt; 3000;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;= 大于等于</span><br><span class=\"line\">查询薪资大于等于3000的员工姓名和编号？</span><br><span class=\"line\">  select empno,ename,sal from emp where sal &gt;= 3000;</span><br><span class=\"line\"></span><br><span class=\"line\">between … and …. 两个值之间, 等同于 &gt;= and &lt;=</span><br><span class=\"line\">查询薪资在2450和3000之间的员工信息？包括2450和3000</span><br><span class=\"line\">  第一种方式：&gt;= and &lt;= （and是并且的意思。）</span><br><span class=\"line\">    select empno,ename,sal from emp where sal &gt;= 2450 and sal &lt;= 3000;</span><br><span class=\"line\">    +-------+-------+---------+</span><br><span class=\"line\">    | empno | ename | sal     |</span><br><span class=\"line\">    +-------+-------+---------+</span><br><span class=\"line\">    |  7566 | JONES | 2975.00 |</span><br><span class=\"line\">    |  7698 | BLAKE | 2850.00 |</span><br><span class=\"line\">    |  7782 | CLARK | 2450.00 |</span><br><span class=\"line\">    |  7788 | SCOTT | 3000.00 |</span><br><span class=\"line\">    |  7902 | FORD  | 3000.00 |</span><br><span class=\"line\">    +-------+-------+---------+</span><br><span class=\"line\">  第二种方式：between … and …</span><br><span class=\"line\">    select </span><br><span class=\"line\">      empno,ename,sal </span><br><span class=\"line\">    from </span><br><span class=\"line\">      emp </span><br><span class=\"line\">    where </span><br><span class=\"line\">      sal between 2450 and 3000;</span><br><span class=\"line\">    </span><br><span class=\"line\">    注意：</span><br><span class=\"line\">      使用between and的时候，必须遵循左小右大。</span><br><span class=\"line\">      between and是闭区间，包括两端的值。</span><br><span class=\"line\"></span><br><span class=\"line\">is null 为 null（is not null 不为空）</span><br><span class=\"line\">注意：在数据库当中null不能使用等号进行衡量。需要使用is null因为数据库中的null代表什么也没有，它不是一个值，所以不能使用等号衡量。</span><br><span class=\"line\"></span><br><span class=\"line\">and 并且 </span><br><span class=\"line\"></span><br><span class=\"line\">or 或者</span><br><span class=\"line\"></span><br><span class=\"line\">and和or同时出现的话，有优先级问题吗？</span><br><span class=\"line\">and和or同时出现，and优先级较高。如果想让or先执行，需要加“小括号”.以后在开发中，如果不确定优先级，就加小括号就行了。</span><br><span class=\"line\"></span><br><span class=\"line\">in 包含，相当于多个 or （not in 不在这个范围中）</span><br><span class=\"line\"></span><br><span class=\"line\">not 可以取非，主要用在 is 或 in 中</span><br><span class=\"line\"></span><br><span class=\"line\">like 称为模糊查询，支持%或下划线匹配</span><br><span class=\"line\"># %匹配任意多个字符</span><br><span class=\"line\"># 下划线：任意一个字符。</span><br><span class=\"line\">#（%是一个特殊的符号，_ 也是一个特殊符号）</span><br><span class=\"line\"></span><br><span class=\"line\">找出名字以T结尾的？</span><br><span class=\"line\">  select ename from emp where ename like '%T';</span><br><span class=\"line\">  </span><br><span class=\"line\">找出名字以K开始的？</span><br><span class=\"line\">  select ename from emp where ename like 'K%';</span><br><span class=\"line\"></span><br><span class=\"line\">找出第二个字每是A的？</span><br><span class=\"line\">  select ename from emp where ename like '_A%';</span><br><span class=\"line\"></span><br><span class=\"line\">找出第三个字母是R的？</span><br><span class=\"line\">  select ename from emp where ename like '__R%';</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h2><blockquote>\n<p>什么是分组查询？</p>\n</blockquote>\n<ul>\n<li>在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组的数据进行操作，这个时候我们需要使用分组查询。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">语法格式：</span><br><span class=\"line\">\tselect</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    from</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    group by</span><br><span class=\"line\">      ...</span><br><span class=\"line\"></span><br><span class=\"line\">注意:</span><br><span class=\"line\">select ename,job,sum(sal) from emp group by job;</span><br><span class=\"line\">    +-------+-----------+----------+</span><br><span class=\"line\">    | ename | job       | sum(sal) |</span><br><span class=\"line\">    +-------+-----------+----------+</span><br><span class=\"line\">    | SCOTT | ANALYST   |  6000.00 |</span><br><span class=\"line\">    | SMITH | CLERK     |  4150.00 |</span><br><span class=\"line\">    | JONES | MANAGER   |  8275.00 |</span><br><span class=\"line\">    | KING  | PRESIDENT |  5000.00 |</span><br><span class=\"line\">    | ALLEN | SALESMAN  |  5600.00 |</span><br><span class=\"line\">    +-------+-----------+----------+</span><br><span class=\"line\">以上语句在mysql中可以执行，但select后面添加ename字段没有意义。</span><br><span class=\"line\">以上语句在oracle中执行报错。</span><br><span class=\"line\">oracle的语法比mysql的语法严格。（mysql的语法相对来说松散一些！）</span><br><span class=\"line\"></span><br><span class=\"line\">重点结论：在一条select语句当中，如果有group by语句的话，select后面只能跟：参加分组的字段，以及分组函数。其它的一律不能跟。</span><br><span class=\"line\"></span><br><span class=\"line\">找出“每个部门，不同工作岗位”的最高薪资？</span><br><span class=\"line\">select </span><br><span class=\"line\">  deptno, job, max(sal)</span><br><span class=\"line\">from</span><br><span class=\"line\">  emp</span><br><span class=\"line\">group by</span><br><span class=\"line\">  deptno, job;</span><br><span class=\"line\">技巧：两个字段联合成1个字段看。（两个字段联合分组）</span><br><span class=\"line\"></span><br><span class=\"line\">使用having可以对分完组之后的数据进一步过滤。</span><br><span class=\"line\">having不能单独使用，having不能代替where，having必须和group by联合使用。</span><br><span class=\"line\"></span><br><span class=\"line\">where和having，优先选择where，where实在完成不了了，再选择having。</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<blockquote>\n<p>补充一点</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">将之前的关键字全部组合在一起，来看一下他们的执行顺序？</span><br><span class=\"line\">    select</span><br><span class=\"line\">      \t...</span><br><span class=\"line\">    from</span><br><span class=\"line\">     \t...</span><br><span class=\"line\">    where</span><br><span class=\"line\">    \t...</span><br><span class=\"line\">    group by</span><br><span class=\"line\">     \t ...</span><br><span class=\"line\">\thaving</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">    order by</span><br><span class=\"line\">     \t...</span><br><span class=\"line\">以上关键字的顺序不能颠倒，需要记忆。</span><br><span class=\"line\">执行顺序是什么？</span><br><span class=\"line\">  1. from</span><br><span class=\"line\">  2. where</span><br><span class=\"line\">  3. group by</span><br><span class=\"line\">  4. having</span><br><span class=\"line\">  5. select</span><br><span class=\"line\">  6. order by</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<h1 id=\"排序：order-by\"><a href=\"#排序：order-by\" class=\"headerlink\" title=\"排序：order by\"></a>排序：order by</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">语法格式：</span><br><span class=\"line\">\tselect </span><br><span class=\"line\">\t\tename,sal</span><br><span class=\"line\">\tfrom</span><br><span class=\"line\">\t\temp</span><br><span class=\"line\">\torder by</span><br><span class=\"line\">\t\tsal; // 默认是升序！！</span><br><span class=\"line\">指定降序： desc</span><br><span class=\"line\">指定升序： asc</span><br><span class=\"line\"></span><br><span class=\"line\">以两个字段排序吗？或者说按照多个字段排序？</span><br><span class=\"line\">查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，再按照名字升序排列。</span><br><span class=\"line\">select </span><br><span class=\"line\">\tename,sal</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp</span><br><span class=\"line\">order by</span><br><span class=\"line\">\tsal asc, ename asc; // sal在前，起主导，只有sal相等的时候，才会考虑启用ename排序。</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"数据处理函数\"><a href=\"#数据处理函数\" class=\"headerlink\" title=\"数据处理函数\"></a>数据处理函数</h1><ul>\n<li>数据处理函数又被称为单行处理函数</li>\n</ul>\n<h3 id=\"单行处理函数\"><a href=\"#单行处理函数\" class=\"headerlink\" title=\"单行处理函数\"></a>单行处理函数</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">单行处理函数的特点：一个输入对应一个输出。</span><br><span class=\"line\">单行处理函数常见:</span><br><span class=\"line\">lower 转换小写</span><br><span class=\"line\">\tmysql&gt; select lower(ename) as ename from emp;</span><br><span class=\"line\">\t</span><br><span class=\"line\">upper 转换大写</span><br><span class=\"line\">\tmysql&gt; select upper(name) as name from t_student;</span><br><span class=\"line\">\t</span><br><span class=\"line\">substr 取子串（substr(被截取的字符串, 起始下标,截取的长度)）</span><br><span class=\"line\">\tmysql&gt; select substr(ename, 1, 1) as ename from emp;</span><br><span class=\"line\">\t</span><br><span class=\"line\">concat函数进行字符串的拼接</span><br><span class=\"line\">\tmysql&gt; select concat(empno,ename) from emp;</span><br><span class=\"line\">length 取长度</span><br><span class=\"line\">\tmysql&gt; select length(ename) enamelength from emp;</span><br><span class=\"line\">\t</span><br><span class=\"line\">trim 去空格</span><br><span class=\"line\">\tmysql&gt;\tselect * from emp where ename = trim('   KING');</span><br><span class=\"line\">\t</span><br><span class=\"line\">str_to_date 将字符串转换成日期</span><br><span class=\"line\"></span><br><span class=\"line\">date_format 格式化日期</span><br><span class=\"line\">\t</span><br><span class=\"line\">format 设置千分位</span><br><span class=\"line\">\t</span><br><span class=\"line\">case..when..then..when..then..else..end</span><br><span class=\"line\">当员工的工作岗位是MANAGER的时候，工资上调10%，当工作岗位是SALESMAN的时候，工资上调50%,其它正常。\t（注意：不修改数据库，只是将查询结果显示为工资上调）</span><br><span class=\"line\">select </span><br><span class=\"line\">  ename,job, sal as oldsal,</span><br><span class=\"line\">  (case job when 'MANAGER' then sal*1.1 when 'SALESMAN' then sal*1.5 else sal end) as newsal </span><br><span class=\"line\">from </span><br><span class=\"line\">  emp;</span><br><span class=\"line\"></span><br><span class=\"line\">round 四舍五入</span><br><span class=\"line\">mysql&gt; select round(1236.567, 0) as result from emp; //保留整数位。</span><br><span class=\"line\">mysql&gt; select round(1236.567, 1) as result from emp; //保留1个小数</span><br><span class=\"line\">mysql&gt; select round(1236.567, 2) as result from emp; //保留2个小数</span><br><span class=\"line\">mysql&gt; select round(1236.567, -1) as result from emp; // 保留到十位。</span><br><span class=\"line\"></span><br><span class=\"line\">rand() 生成随机数</span><br><span class=\"line\">  mysql&gt; select round(rand()*100,0) from emp; // 100以内的随机数</span><br><span class=\"line\"></span><br><span class=\"line\">ifnull 可以将 null 转换成一个具体值</span><br><span class=\"line\">ifnull是空处理函数。专门处理空的。在所有数据库当中，只要有NULL参与的数学运算，最终结果就是NULL。</span><br><span class=\"line\">注意：NULL只要参与运算，最终结果一定是NULL。为了避免这个现象，需要使用ifnull函数。ifnull函数用法：ifnull(数据, 被当做哪个值)。如果“数据”为NULL的时候，把这个数据结构当做哪个值。</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"分组函数（多行处理函数）\"><a href=\"#分组函数（多行处理函数）\" class=\"headerlink\" title=\"分组函数（多行处理函数）\"></a>分组函数（多行处理函数）</h3><p>多行处理函数特点：多个输入，对应1个输出。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">count\t# 计数</span><br><span class=\"line\">sum\t\t# 求和</span><br><span class=\"line\">avg\t\t# 平均值</span><br><span class=\"line\">max\t\t# 最大值</span><br><span class=\"line\">min\t\t# 最小值</span><br><span class=\"line\"></span><br><span class=\"line\">注意：</span><br><span class=\"line\">\t1. 分组函数在使用的时候必须先进行分组，然后才能用。如果你没有对数据进行分组，整张表默认为一组。</span><br><span class=\"line\">\t2. 分组函数自动忽略NULL，你不需要提前对NULL进行处理。</span><br><span class=\"line\">\t3. 分组函数中count(*)和count(具体字段)有什么区别？</span><br><span class=\"line\">\t\tcount(具体字段)：表示统计该字段下所有不为NULL的元素的总数。</span><br><span class=\"line\">\t\tcount(*)：统计表当中的总行数。（只要有一行数据count则++）</span><br><span class=\"line\">      \t因为每一行记录不可能都为NULL，一行数据中有一列不为NULL，则这行数据就是有效的。</span><br><span class=\"line\">    4. 分组函数不能够直接使用在where子句中。</span><br><span class=\"line\">    5. 所有的分组函数可以组合起来一起用。</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h3><blockquote>\n<p>把查询结果去除重复记录 <strong>distinct</strong> </p>\n</blockquote>\n<p>注意：原表数据不会被修改，只是查询结果去重。</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">// distinct只能出现在所有字段的最前方。</span><br><span class=\"line\">mysql&gt; select distinct job from emp;</span><br><span class=\"line\"></span><br><span class=\"line\">// distinct出现在job,deptno两个字段之前，表示两个字段联合起来去重。</span><br><span class=\"line\">mysql&gt; select distinct job,deptno from emp;</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h1><blockquote>\n<p>多张表联合起来查询数据，被称为连接查询。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">根据表连接的方式分类：</span><br><span class=\"line\">内连接： 等值连接 非等值连接 自连接</span><br><span class=\"line\"></span><br><span class=\"line\">外连接： 左外连接（左连接）\t右外连接（右连接）</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"内连接：等值连接\"><a href=\"#内连接：等值连接\" class=\"headerlink\" title=\"内连接：等值连接\"></a>内连接：等值连接</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">SQL99语法：</span><br><span class=\"line\">  select </span><br><span class=\"line\">    ...</span><br><span class=\"line\">  from</span><br><span class=\"line\">    a</span><br><span class=\"line\">  inner join</span><br><span class=\"line\">    b</span><br><span class=\"line\">  on</span><br><span class=\"line\">    a和b的连接条件</span><br><span class=\"line\">  where</span><br><span class=\"line\">    筛选条件</span><br><span class=\"line\"># inner可以省略（带着inner可读性更好！！！一眼就能看出来是内连接）</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"内连接：非等值连接\"><a href=\"#内连接：非等值连接\" class=\"headerlink\" title=\"内连接：非等值连接\"></a>内连接：非等值连接</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">select </span><br><span class=\"line\">\te.ename, e.sal, s.grade</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp e</span><br><span class=\"line\">join</span><br><span class=\"line\">\tsalgrade s</span><br><span class=\"line\">on</span><br><span class=\"line\">\te.sal between s.losal and s.hisal; // 条件不是一个等量关系，称为非等值连接。</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"内连接：自连接\"><a href=\"#内连接：自连接\" class=\"headerlink\" title=\"内连接：自连接\"></a>内连接：自连接</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">select </span><br><span class=\"line\">\ta.ename as '员工名', b.ename as '领导名'</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp a</span><br><span class=\"line\">join</span><br><span class=\"line\">\temp b</span><br><span class=\"line\">on</span><br><span class=\"line\">\ta.mgr = b.empno; //员工的领导编号 = 领导的员工编号</span><br><span class=\"line\">以上就是内连接中的：自连接，技巧：一张表看做两张表</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"外连接\"><a href=\"#外连接\" class=\"headerlink\" title=\"外连接\"></a>外连接</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">// outer是可以省略的，带着可读性强。</span><br><span class=\"line\">select </span><br><span class=\"line\">\te.ename,d.dname</span><br><span class=\"line\">from</span><br><span class=\"line\">\temp e </span><br><span class=\"line\">right outer join </span><br><span class=\"line\">\tdept d</span><br><span class=\"line\">on</span><br><span class=\"line\">\te.deptno = d.deptno;</span><br><span class=\"line\">\t</span><br><span class=\"line\">right代表什么：表示将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。在外连接当中，两张表连接，产生了主次关系。</span><br><span class=\"line\"></span><br><span class=\"line\">带有right的是右外连接，又叫做右连接。</span><br><span class=\"line\">带有left的是左外连接，又叫做左连接。</span><br><span class=\"line\">任何一个右连接都有左连接的写法。</span><br><span class=\"line\">任何一个左连接都有右连接的写法。</span><br><span class=\"line\"></span><br><span class=\"line\">思考：外连接的查询结果条数一定是 &gt;= 内连接的查询结果条数？</span><br><span class=\"line\">\t正确。</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">三张表，四张表怎么连接？</span><br><span class=\"line\">语法：</span><br><span class=\"line\">  select </span><br><span class=\"line\">    ...</span><br><span class=\"line\">  from</span><br><span class=\"line\">    a</span><br><span class=\"line\">  join</span><br><span class=\"line\">    b</span><br><span class=\"line\">  on</span><br><span class=\"line\">    a和b的连接条件</span><br><span class=\"line\">  join</span><br><span class=\"line\">    c</span><br><span class=\"line\">  on</span><br><span class=\"line\">    a和c的连接条件</span><br><span class=\"line\">  right join</span><br><span class=\"line\">    d</span><br><span class=\"line\">  on</span><br><span class=\"line\">    a和d的连接条件</span><br><span class=\"line\">  </span><br><span class=\"line\">  一条SQL中内连接和外连接可以混合。都可以出现！</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h1><blockquote>\n<p>select语句中嵌套select语句，被嵌套的select语句称为子查询。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">子查询都可以出现在哪里呢？</span><br><span class=\"line\">select</span><br><span class=\"line\">  ..(select).</span><br><span class=\"line\">from</span><br><span class=\"line\">  ..(select).</span><br><span class=\"line\">where</span><br><span class=\"line\">  ..(select).</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">where子句中的子查询:</span><br><span class=\"line\"></span><br><span class=\"line\">第一步：查询最低工资是多少</span><br><span class=\"line\">  select min(sal) from emp;</span><br><span class=\"line\">  +----------+</span><br><span class=\"line\">  | min(sal) |</span><br><span class=\"line\">  +----------+</span><br><span class=\"line\">  |   800.00 |</span><br><span class=\"line\">  +----------+</span><br><span class=\"line\">第二步：找出&gt;800的</span><br><span class=\"line\">  select ename,sal from emp where sal &gt; 800;</span><br><span class=\"line\"></span><br><span class=\"line\">第三步：合并</span><br><span class=\"line\">  select ename,sal from emp where sal &gt; (select min(sal) from emp);</span><br><span class=\"line\">  </span><br><span class=\"line\">from子句中的子查询:</span><br><span class=\"line\">\t注意：from后面的子查询，可以将子查询的查询结果当做一张临时表。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">select后面出现的子查询（这个内容不需要掌握，了解即可！！！）</span><br><span class=\"line\">\t注意：对于select后面的子查询来说，这个子查询只能一次返回1条结果</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"union合并\"><a href=\"#union合并\" class=\"headerlink\" title=\"union合并\"></a>union合并</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">案例：查询工作岗位是MANAGER和SALESMAN的员工？</span><br><span class=\"line\">select ename,job from emp where job = 'MANAGER' or job = 'SALESMAN';</span><br><span class=\"line\">select ename,job from emp where job in('MANAGER','SALESMAN');</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| ename  | job      |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| ALLEN  | SALESMAN |</span><br><span class=\"line\">| WARD   | SALESMAN |</span><br><span class=\"line\">| JONES  | MANAGER  |</span><br><span class=\"line\">| MARTIN | SALESMAN |</span><br><span class=\"line\">| BLAKE  | MANAGER  |</span><br><span class=\"line\">| CLARK  | MANAGER  |</span><br><span class=\"line\">| TURNER | SALESMAN |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">select ename,job from emp where job = 'MANAGER'</span><br><span class=\"line\">union</span><br><span class=\"line\">select ename,job from emp where job = 'SALESMAN';</span><br><span class=\"line\"></span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| ename  | job      |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">| JONES  | MANAGER  |</span><br><span class=\"line\">| BLAKE  | MANAGER  |</span><br><span class=\"line\">| CLARK  | MANAGER  |</span><br><span class=\"line\">| ALLEN  | SALESMAN |</span><br><span class=\"line\">| WARD   | SALESMAN |</span><br><span class=\"line\">| MARTIN | SALESMAN |</span><br><span class=\"line\">| TURNER | SALESMAN |</span><br><span class=\"line\">+--------+----------+</span><br><span class=\"line\">union的效率要高一些。对于表连接来说，每连接一次新表，</span><br><span class=\"line\">则匹配的次数满足笛卡尔积，成倍的翻。。。</span><br><span class=\"line\">但是union可以减少匹配的次数。在减少匹配次数的情况下，</span><br><span class=\"line\">还可以完成两个结果集的拼接。</span><br><span class=\"line\"></span><br><span class=\"line\">a 连接 b 连接 c</span><br><span class=\"line\">a 10条记录</span><br><span class=\"line\">b 10条记录</span><br><span class=\"line\">c 10条记录</span><br><span class=\"line\">匹配次数是：1000</span><br><span class=\"line\"></span><br><span class=\"line\">a 连接 b一个结果：10 * 10 --&gt; 100次</span><br><span class=\"line\">a 连接 c一个结果：10 * 10 --&gt; 100次</span><br><span class=\"line\">使用union的话是：100次 + 100次 = 200次。（union把乘法变成了加法运算）</span><br><span class=\"line\"></span><br><span class=\"line\">union在使用的时候有注意事项吗？</span><br><span class=\"line\"></span><br><span class=\"line\">//错误的：union在进行结果集合并的时候，要求两个结果集的列数相同。</span><br><span class=\"line\">select ename,job from emp where job = 'MANAGER'</span><br><span class=\"line\">union</span><br><span class=\"line\">select ename from emp where job = 'SALESMAN';</span><br><span class=\"line\"></span><br><span class=\"line\">// MYSQL可以，oracle语法严格 ，不可以，报错。要求：结果集合并时列和列的数据类型也要一致。</span><br><span class=\"line\">select ename,job from emp where job = 'MANAGER'</span><br><span class=\"line\">union</span><br><span class=\"line\">select ename,sal from emp where job = 'SALESMAN';</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"limit\"><a href=\"#limit\" class=\"headerlink\" title=\"limit\"></a>limit</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">limit作用：将查询结果集的一部分取出来。通常使用在分页查询当中。</span><br><span class=\"line\">百度默认：一页显示10条记录。</span><br><span class=\"line\">分页的作用是为了提高用户的体验，因为一次全部都查出来，用户体验差。可以一页一页翻页看</span><br><span class=\"line\"></span><br><span class=\"line\">limit的使用</span><br><span class=\"line\">完整用法：limit startIndex, length</span><br><span class=\"line\">  startIndex是起始下标，length是长度。</span><br><span class=\"line\">  起始下标从0开始。</span><br><span class=\"line\"></span><br><span class=\"line\">缺省用法：limit 5; 这是取前5</span><br><span class=\"line\"></span><br><span class=\"line\">注意：mysql当中limit在order by之后执行！！！！！！</span><br><span class=\"line\"></span><br><span class=\"line\">分页</span><br><span class=\"line\">每页显示3条记录</span><br><span class=\"line\">第1页：limit 0,3\t\t[0 1 2]</span><br><span class=\"line\">第2页：limit 3,3\t\t[3 4 5]</span><br><span class=\"line\">第3页：limit 6,3\t\t[6 7 8]</span><br><span class=\"line\">第4页：limit 9,3\t\t[9 10 11]</span><br><span class=\"line\"></span><br><span class=\"line\">每页显示pageSize条记录</span><br><span class=\"line\">第pageNo页：limit (pageNo - 1) * pageSize  , pageSize</span><br><span class=\"line\"></span><br><span class=\"line\">public static void main(String[] args){</span><br><span class=\"line\">  // 用户提交过来一个页码，以及每页显示的记录条数</span><br><span class=\"line\">  int pageNo = 5; //第5页</span><br><span class=\"line\">  int pageSize = 10; //每页显示10条</span><br><span class=\"line\"></span><br><span class=\"line\">  int startIndex = (pageNo - 1) * pageSize;</span><br><span class=\"line\">  String sql = \"select ...limit \" + startIndex + \", \" + pageSize;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">记公式：</span><br><span class=\"line\">limit (pageNo-1)*pageSize , pageSize</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">关于DQL语句的大总结：</span><br><span class=\"line\">select </span><br><span class=\"line\">  ...</span><br><span class=\"line\">from</span><br><span class=\"line\">  ...</span><br><span class=\"line\">where</span><br><span class=\"line\">  ...</span><br><span class=\"line\">group by</span><br><span class=\"line\">  ...</span><br><span class=\"line\">having</span><br><span class=\"line\">  ...</span><br><span class=\"line\">order by</span><br><span class=\"line\">  ...</span><br><span class=\"line\">limit</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">执行顺序？</span><br><span class=\"line\">  1.from</span><br><span class=\"line\">  2.where</span><br><span class=\"line\">  3.group by</span><br><span class=\"line\">  4.having</span><br><span class=\"line\">  5.select</span><br><span class=\"line\">  6.order by</span><br><span class=\"line\">  7.limit..</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"表的创建\"><a href=\"#表的创建\" class=\"headerlink\" title=\"表的创建\"></a>表的创建</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">建表的语法格式：(建表属于DDL语句，DDL包括：create drop alter)</span><br><span class=\"line\">create table 表名(字段名1 数据类型, 字段名2 数据类型, 字段名3 数据类型);</span><br><span class=\"line\"></span><br><span class=\"line\">create table 表名(</span><br><span class=\"line\">  字段名1 数据类型, </span><br><span class=\"line\">  字段名2 数据类型, </span><br><span class=\"line\">  字段名3 数据类型</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">表名：建议以t_ 或者 tbl_开始，可读性强。见名知意。</span><br><span class=\"line\">字段名：见名知意。</span><br><span class=\"line\">表名和字段名都属于标识符。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">关于mysql中的数据类型</span><br><span class=\"line\">很多数据类型，我们只需要掌握一些常见的数据类型即可。</span><br><span class=\"line\"></span><br><span class=\"line\">  varchar(最长255)</span><br><span class=\"line\">    可变长度的字符串</span><br><span class=\"line\">    比较智能，节省空间。</span><br><span class=\"line\">    会根据实际的数据长度动态分配空间。</span><br><span class=\"line\"></span><br><span class=\"line\">    优点：节省空间</span><br><span class=\"line\">    缺点：需要动态分配空间，速度慢。</span><br><span class=\"line\"></span><br><span class=\"line\">  char(最长255)</span><br><span class=\"line\">    定长字符串</span><br><span class=\"line\">    不管实际的数据长度是多少。</span><br><span class=\"line\">    分配固定长度的空间去存储数据。</span><br><span class=\"line\">    使用不恰当的时候，可能会导致空间的浪费。</span><br><span class=\"line\"></span><br><span class=\"line\">    优点：不需要动态分配空间，速度快。</span><br><span class=\"line\">    缺点：使用不当可能会导致空间的浪费。</span><br><span class=\"line\"></span><br><span class=\"line\">   varchar 和 char 我们应该怎么选择？</span><br><span class=\"line\">      性别字段你选什么？因为性别是固定长度的字符串，所以选择char。</span><br><span class=\"line\">      姓名字段你选什么？每一个人的名字长度不同，所以选择varchar。</span><br><span class=\"line\"></span><br><span class=\"line\">  int(最长11)</span><br><span class=\"line\">    数字中的整数型。等同于java的int。</span><br><span class=\"line\"></span><br><span class=\"line\">  bigint</span><br><span class=\"line\">    数字中的长整型。等同于java中的long。</span><br><span class=\"line\"></span><br><span class=\"line\">  float\t</span><br><span class=\"line\">    单精度浮点型数据</span><br><span class=\"line\"></span><br><span class=\"line\">  double</span><br><span class=\"line\">    双精度浮点型数据</span><br><span class=\"line\"></span><br><span class=\"line\">  date</span><br><span class=\"line\">    短日期类型</span><br><span class=\"line\"></span><br><span class=\"line\">  datetime</span><br><span class=\"line\">    长日期类型</span><br><span class=\"line\"></span><br><span class=\"line\">  clob </span><br><span class=\"line\">    字符大对象</span><br><span class=\"line\">    最多可以存储4G的字符串。</span><br><span class=\"line\">    比如：存储一篇文章，存储一个说明。</span><br><span class=\"line\">    超过255个字符的都要采用CLOB字符大对象来存储。</span><br><span class=\"line\">    Character Large OBject:CLOB</span><br><span class=\"line\"></span><br><span class=\"line\">  blob</span><br><span class=\"line\">    二进制大对象</span><br><span class=\"line\">    Binary Large OBject</span><br><span class=\"line\">    专门用来存储图片、声音、视频等流媒体数据。</span><br><span class=\"line\">    往BLOB类型的字段上插入数据的时候，例如插入一个图片、视频等，</span><br><span class=\"line\">    你需要使用IO流才行。</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">创建一个学生表？</span><br><span class=\"line\">    学号、姓名、年龄、性别、邮箱地址</span><br><span class=\"line\">    create table t_student(</span><br><span class=\"line\">      no int,</span><br><span class=\"line\">      name varchar(32),</span><br><span class=\"line\">      sex char(1),</span><br><span class=\"line\">      age int(3),</span><br><span class=\"line\">      email varchar(255)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">  删除表：</span><br><span class=\"line\">  drop table t_student; // 当这张表不存在的时候会报错！</span><br><span class=\"line\"></span><br><span class=\"line\">  // 如果这张表存在的话，删除</span><br><span class=\"line\">  drop table if exists t_student;</span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"插入数据insert\"><a href=\"#插入数据insert\" class=\"headerlink\" title=\"插入数据insert\"></a>插入数据insert</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">插入数据insert （DML）</span><br><span class=\"line\">\t</span><br><span class=\"line\">语法格式：</span><br><span class=\"line\">  insert into 表名(字段名1,字段名2,字段名3...) values(值1,值2,值3);</span><br><span class=\"line\"></span><br><span class=\"line\">  注意：字段名和值要一一对应。什么是一一对应？</span><br><span class=\"line\">    数量要对应。数据类型要对应。</span><br><span class=\"line\">    </span><br><span class=\"line\">insert语句中的“字段名”可以省略吗？可以</span><br><span class=\"line\">  insert into t_student values(2); //错误的</span><br><span class=\"line\"></span><br><span class=\"line\">  // 注意：前面的字段名省略的话，等于都写上了！所以值也要都写上！</span><br><span class=\"line\">  insert into t_student values(2, 'lisi', 'f', 20, 'lisi@123.com');</span><br><span class=\"line\">  +------+------+------+------+--------------+</span><br><span class=\"line\">  | no   | name | sex  | age  | email        |</span><br><span class=\"line\">  +------+------+------+------+--------------+</span><br><span class=\"line\">  |    1 | NULL | m    | NULL | NULL         |</span><br><span class=\"line\">  |    2 | lisi | f    |   20 | lisi@123.com |</span><br><span class=\"line\">  +------+------+------+------+--------------+</span><br><span class=\"line\"></span><br><span class=\"line\">一次可以插入多条记录：</span><br><span class=\"line\">  insert into t_user(id,name,birth,create_time) values</span><br><span class=\"line\">  (1,'zs','1980-10-11',now()), </span><br><span class=\"line\">  (2,'lisi','1981-10-11',now()),</span><br><span class=\"line\">  (3,'wangwu','1982-10-11',now());</span><br><span class=\"line\"></span><br><span class=\"line\">  语法：insert into t_user(字段名1,字段名2) values(),(),(),();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">insert插入日期</span><br><span class=\"line\">\t数字格式化：format</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t格式化数字：format(数字, '格式')</span><br><span class=\"line\">  select ename,format(sal, '$999,999') as sal from emp;</span><br><span class=\"line\"></span><br><span class=\"line\">str_to_date：将字符串varchar类型转换成date类型</span><br><span class=\"line\">date_format：将date类型转换成具有一定格式的varchar字符串类型。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">插入数据？</span><br><span class=\"line\">insert into t_user(id,name,birth) values(1, 'zhangsan', '01-10-1990'); // 1990年10月1日</span><br><span class=\"line\">出问题了：原因是类型不匹配。数据库birth是date类型，这里给了一个字符串varchar。</span><br><span class=\"line\"></span><br><span class=\"line\">怎么办？可以使用str_to_date函数进行类型转换。</span><br><span class=\"line\">str_to_date函数可以将字符串转换成日期类型date？</span><br><span class=\"line\">语法格式：</span><br><span class=\"line\">  str_to_date('字符串日期', '日期格式')</span><br><span class=\"line\"></span><br><span class=\"line\">mysql的日期格式：</span><br><span class=\"line\">  %Y\t年</span><br><span class=\"line\">  %m    月</span><br><span class=\"line\">  %d    日</span><br><span class=\"line\">  %h\t时</span><br><span class=\"line\">  %i\t分</span><br><span class=\"line\">  %s\t秒</span><br><span class=\"line\"></span><br><span class=\"line\">insert into t_user(id,name,birth) values(1, 'zhangsan', str_to_date('01-10-1990','%d-%m-%Y'));</span><br><span class=\"line\"></span><br><span class=\"line\">str_to_date函数可以把字符串varchar转换成日期date类型数据，</span><br><span class=\"line\">通常使用在插入insert方面，因为插入的时候需要一个日期类型的数据，</span><br><span class=\"line\">需要通过该函数将字符串转换成date。</span><br><span class=\"line\"></span><br><span class=\"line\">如果你提供的日期字符串是这个格式，str_to_date函数就不需要了！！！</span><br><span class=\"line\">  %Y-%m-%d</span><br><span class=\"line\">insert into t_user(id,name,birth) values(2, 'lisi', '1990-10-01');</span><br><span class=\"line\"></span><br><span class=\"line\">查询的时候可以以某个特定的日期格式展示吗？</span><br><span class=\"line\">date_format</span><br><span class=\"line\">这个函数可以将日期类型转换成特定格式的字符串。</span><br><span class=\"line\"></span><br><span class=\"line\">select id,name,date_format(birth, '%m/%d/%Y') as birth from t_user;</span><br><span class=\"line\">+------+----------+------------+</span><br><span class=\"line\">| id   | name     | birth      |</span><br><span class=\"line\">+------+----------+------------+</span><br><span class=\"line\">|    1 | zhangsan | 10/01/1990 |</span><br><span class=\"line\">|    2 | lisi     | 10/01/1990 |</span><br><span class=\"line\">+------+----------+------------+</span><br><span class=\"line\"></span><br><span class=\"line\">date_format函数怎么用？</span><br><span class=\"line\">  date_format(日期类型数据, '日期格式')</span><br><span class=\"line\">  这个函数通常使用在查询日期方面。设置展示的日期格式。</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select id,name,birth from t_user;</span><br><span class=\"line\">+------+----------+------------+</span><br><span class=\"line\">| id   | name     | birth      |</span><br><span class=\"line\">+------+----------+------------+</span><br><span class=\"line\">|    1 | zhangsan | 1990-10-01 |</span><br><span class=\"line\">|    2 | lisi     | 1990-10-01 |</span><br><span class=\"line\">+------+----------+------------+</span><br><span class=\"line\">以上的SQL语句实际上是进行了默认的日期格式化，</span><br><span class=\"line\">自动将数据库中的date类型转换成varchar类型。</span><br><span class=\"line\">并且采用的格式是mysql默认的日期格式：'%Y-%m-%d'</span><br><span class=\"line\"></span><br><span class=\"line\">select id,name,date_format(birth,'%Y/%m/%d') as birth from t_user;</span><br><span class=\"line\"></span><br><span class=\"line\">java中的日期格式？</span><br><span class=\"line\">  yyyy-MM-dd HH:mm:ss SSS</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">date和datetime两个类型的区别？</span><br><span class=\"line\">\tdate是短日期：只包括年月日信息。</span><br><span class=\"line\">\tdatetime是长日期：包括年月日时分秒信息。</span><br><span class=\"line\">\tmysql短日期默认格式：%Y-%m-%d</span><br><span class=\"line\">\tmysql长日期默认格式：%Y-%m-%d %h:%i:%s</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"修改update\"><a href=\"#修改update\" class=\"headerlink\" title=\"修改update\"></a>修改update</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">语法格式：</span><br><span class=\"line\">update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3... where 条件;</span><br><span class=\"line\"></span><br><span class=\"line\">注意：没有条件限制会导致所有数据全部更新。</span><br><span class=\"line\"></span><br><span class=\"line\">update t_user set name = 'jack', birth = '2000-10-11' where id = 2;</span><br><span class=\"line\">+------+----------+------------+---------------------+</span><br><span class=\"line\">| id   | name     | birth      | create_time         |</span><br><span class=\"line\">+------+----------+------------+---------------------+</span><br><span class=\"line\">|    1 | zhangsan | 1990-10-01 | 2020-03-18 15:49:50 |</span><br><span class=\"line\">|    2 | jack     | 2000-10-11 | 2020-03-18 15:51:23 |</span><br><span class=\"line\">+------+----------+------------+---------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">update t_user set name = 'jack', birth = '2000-10-11', create_time = now() where id = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">更新所有？</span><br><span class=\"line\">  update t_user set name = 'abc';</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"删除数据-delete\"><a href=\"#删除数据-delete\" class=\"headerlink\" title=\"删除数据 delete\"></a>删除数据 delete</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">语法格式？</span><br><span class=\"line\">  delete from 表名 where 条件;</span><br><span class=\"line\"></span><br><span class=\"line\">注意：没有条件，整张表的数据会全部删除！</span><br><span class=\"line\"></span><br><span class=\"line\">delete from t_user where id = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">insert into t_user(id) values(2);</span><br><span class=\"line\"></span><br><span class=\"line\">delete from t_user; // 删除所有！</span><br><span class=\"line\"></span><br><span class=\"line\">快速删除表中的数据？【truncate比较重要，必须掌握】</span><br><span class=\"line\"></span><br><span class=\"line\">//删除dept_bak表中的数据</span><br><span class=\"line\">delete from dept_bak; //这种删除数据的方式比较慢。</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from dept_bak;</span><br><span class=\"line\">Empty set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">delete语句删除数据的原理？（delete属于DML语句！！！）</span><br><span class=\"line\">  表中的数据被删除了，但是这个数据在硬盘上的真实存储空间不会被释放！！！</span><br><span class=\"line\">  这种删除缺点是：删除效率比较低。</span><br><span class=\"line\">  这种删除优点是：支持回滚，后悔了可以再恢复数据！！！</span><br><span class=\"line\"></span><br><span class=\"line\">truncate语句删除数据的原理？</span><br><span class=\"line\">  这种删除效率比较高，表被一次截断，物理删除。</span><br><span class=\"line\">  这种删除缺点：不支持回滚。</span><br><span class=\"line\">  这种删除优点：快速。</span><br><span class=\"line\"></span><br><span class=\"line\">用法：truncate table dept_bak; （这种操作属于DDL操作。）</span><br><span class=\"line\"></span><br><span class=\"line\">大表非常大，上亿条记录？？？？</span><br><span class=\"line\">  删除的时候，使用delete，也许需要执行1个小时才能删除完！效率较低。</span><br><span class=\"line\">  可以选择使用truncate删除表中的数据。只需要不到1秒钟的时间就删除结束。效率较高。</span><br><span class=\"line\">  但是使用truncate之前，必须仔细询问客户是否真的要删除，并警告删除之后不可恢复！</span><br><span class=\"line\"></span><br><span class=\"line\">  truncate是删除表中的数据，表还在！</span><br><span class=\"line\"></span><br><span class=\"line\">删除表操作？</span><br><span class=\"line\">  drop table 表名; // 这不是删除表中的数据，这是把表删除。</span><br><span class=\"line\"># 快速创建表(复制) </span><br><span class=\"line\">CREATE TABLE zwcopy as SELECT * from zw;</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">什么是约束？</span><br><span class=\"line\">约束对应的英语单词： constraint</span><br><span class=\"line\">在创建表的时候，我们可以给表中的字段加上一些约束，来保证这个表中数据的</span><br><span class=\"line\">完整性、有效性！！！</span><br><span class=\"line\"></span><br><span class=\"line\">约束的作用就是为了保证：表中的数据有效！！</span><br><span class=\"line\"></span><br><span class=\"line\">约束包括哪些？</span><br><span class=\"line\">非空约束：not null</span><br><span class=\"line\">唯一性约束: unique</span><br><span class=\"line\">主键约束: primary key （简称PK）</span><br><span class=\"line\">外键约束：foreign key（简称FK）</span><br><span class=\"line\">检查约束：check（mysql不支持，oracle支持）</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"非空约束：not-null\"><a href=\"#非空约束：not-null\" class=\"headerlink\" title=\"非空约束：not null\"></a>非空约束：not null</h2><blockquote>\n<p>唯一性约束unique约束的字段不能重复，但是可以为NULL。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">drop table if exists t_vip;</span><br><span class=\"line\">create table t_vip(</span><br><span class=\"line\">  id int,</span><br><span class=\"line\">  name varchar(255) not null  // not null只有列级约束，没有表级约束！</span><br><span class=\"line\">);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"唯一性约束-unique\"><a href=\"#唯一性约束-unique\" class=\"headerlink\" title=\"唯一性约束: unique\"></a>唯一性约束: unique</h2><blockquote>\n<p>唯一性约束unique约束的字段不能重复，但是可以为NULL。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">唯一性约束unique约束的字段不能重复，但是可以为NULL。</span><br><span class=\"line\">drop table if exists t_vip;</span><br><span class=\"line\">create table t_vip(</span><br><span class=\"line\">  id int,</span><br><span class=\"line\">  name varchar(255) unique,</span><br><span class=\"line\">  email varchar(255)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">如何做到联合唯一约束</span><br><span class=\"line\">drop table if exists t_vip;</span><br><span class=\"line\">create table t_vip(</span><br><span class=\"line\">  id int,</span><br><span class=\"line\">  name varchar(255),</span><br><span class=\"line\">  email varchar(255),</span><br><span class=\"line\">  unique(name,email) // 约束没有添加在列的后面，这种约束被称为表级约束。</span><br><span class=\"line\">);</span><br><span class=\"line\">name和email两个字段联合起来唯一</span><br><span class=\"line\">在mysql当中，如果一个字段同时被not null和unique约束的话，该字段自动变成主键字段。</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"主键约束-primary-key\"><a href=\"#主键约束-primary-key\" class=\"headerlink\" title=\"主键约束: primary key\"></a>主键约束: primary key</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">主键约束的相关术语？</span><br><span class=\"line\">  主键约束：就是一种约束。</span><br><span class=\"line\">  主键字段：该字段上添加了主键约束，这样的字段叫做：主键字段</span><br><span class=\"line\">  主键值：主键字段中的每一个值都叫做：主键值。</span><br><span class=\"line\"></span><br><span class=\"line\">什么是主键？有啥用？</span><br><span class=\"line\">  主键值是每一行记录的唯一标识。</span><br><span class=\"line\">  主键值是每一行记录的身份证号！！！</span><br><span class=\"line\"></span><br><span class=\"line\">记住：任何一张表都应该有主键，没有主键，表无效！！</span><br><span class=\"line\"></span><br><span class=\"line\">主键的特征：not null + unique（主键值不能是NULL，同时也不能重复！）</span><br><span class=\"line\"></span><br><span class=\"line\">怎么给一张表添加主键约束呢？</span><br><span class=\"line\">  drop table if exists t_vip;</span><br><span class=\"line\">  // 1个字段做主键，叫做：单一主键</span><br><span class=\"line\">  create table t_vip(</span><br><span class=\"line\">    id int primary key,  //列级约束</span><br><span class=\"line\">    name varchar(255)</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">表级约束主要是给多个字段联合起来添加约束？</span><br><span class=\"line\">  drop table if exists t_vip;</span><br><span class=\"line\">  // id和name联合起来做主键：复合主键！！！！</span><br><span class=\"line\">  create table t_vip(</span><br><span class=\"line\">    id int,</span><br><span class=\"line\">    name varchar(255),</span><br><span class=\"line\">    email varchar(255),</span><br><span class=\"line\">    primary key(id,name)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  </span><br><span class=\"line\">在实际开发中不建议使用：复合主键。建议使用单一主键！</span><br><span class=\"line\">因为主键值存在的意义就是这行记录的身份证号，只要意义达到即可，单一主键可以做到。</span><br><span class=\"line\">复合主键比较复杂，不建议使用！！！</span><br><span class=\"line\"></span><br><span class=\"line\">主键值建议使用：</span><br><span class=\"line\">  int</span><br><span class=\"line\">  bigint</span><br><span class=\"line\">  char</span><br><span class=\"line\">  等类型。</span><br><span class=\"line\"></span><br><span class=\"line\">不建议使用：varchar来做主键。主键值一般都是数字，一般都是定长的！</span><br><span class=\"line\"></span><br><span class=\"line\">主键除了：单一主键和复合主键之外，还可以这样进行分类？</span><br><span class=\"line\">  自然主键：主键值是一个自然数，和业务没关系。</span><br><span class=\"line\">  业务主键：主键值和业务紧密关联，例如拿银行卡账号做主键值。这就是业务主键！</span><br><span class=\"line\"></span><br><span class=\"line\">在实际开发中使用业务主键多，还是使用自然主键多一些？</span><br><span class=\"line\">  自然主键使用比较多，因为主键只要做到不重复就行，不需要有意义。</span><br><span class=\"line\">  业务主键不好，因为主键一旦和业务挂钩，那么当业务发生变动的时候，</span><br><span class=\"line\">  可能会影响到主键值，所以业务主键不建议使用。尽量使用自然主键。</span><br><span class=\"line\">  </span><br><span class=\"line\">在mysql当中，有一种机制，可以帮助我们自动维护一个主键值？</span><br><span class=\"line\">\t\tdrop table if exists t_vip;</span><br><span class=\"line\">\t\tcreate table t_vip(</span><br><span class=\"line\">\t\t\tid int primary key auto_increment, //auto_increment表示自增，从1开始，以1递增！</span><br><span class=\"line\">\t\t\tname varchar(255)</span><br><span class=\"line\">\t\t);</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"外键约束：foreign-key\"><a href=\"#外键约束：foreign-key\" class=\"headerlink\" title=\"外键约束：foreign key\"></a>外键约束：foreign key</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">外键约束涉及到的相关术语：</span><br><span class=\"line\">  外键约束：一种约束（ foreign key）</span><br><span class=\"line\">  外键字段：该字段上添加了外键约束</span><br><span class=\"line\">  外键值：外键字段当中的每一个值。</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h1><blockquote>\n<p>什么是存储引擎，有什么用呢？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">存储引擎是MySQL中特有的一个术语，其它数据库中没有。（Oracle中有，但是不叫这个名字）</span><br><span class=\"line\">存储引擎这个名字高端大气上档次。实际上存储引擎是一个表存储/组织数据的方式。</span><br><span class=\"line\">不同的存储引擎，表存储数据的方式不同。</span><br><span class=\"line\"></span><br><span class=\"line\">怎么给表添加/指定“存储引擎”呢？</span><br><span class=\"line\">show create table t_student;</span><br><span class=\"line\"></span><br><span class=\"line\">可以在建表的时候给表指定存储引擎。</span><br><span class=\"line\">CREATE TABLE `t_student` (</span><br><span class=\"line\">  `no` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `name` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `cno` int(11) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`no`),</span><br><span class=\"line\">  KEY `cno` (`cno`),</span><br><span class=\"line\">  CONSTRAINT `t_student_ibfk_1` FOREIGN KEY (`cno`) REFERENCES `t_class` (`classno`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">在建表的时候可以在最后小括号的\")\"的右边使用：</span><br><span class=\"line\">  ENGINE来指定存储引擎。</span><br><span class=\"line\">  CHARSET来指定这张表的字符编码方式。</span><br><span class=\"line\">\t</span><br><span class=\"line\">结论：</span><br><span class=\"line\">  mysql默认的存储引擎是：InnoDB</span><br><span class=\"line\">  mysql默认的字符编码方式是：utf8</span><br><span class=\"line\">  </span><br><span class=\"line\">怎么查看mysql支持哪些存储引擎呢？</span><br><span class=\"line\">命令： show engines \\G</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"MyISAM存储引擎\"><a href=\"#MyISAM存储引擎\" class=\"headerlink\" title=\"MyISAM存储引擎\"></a>MyISAM存储引擎</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">它管理的表具有以下特征：</span><br><span class=\"line\">  使用三个文件表示每个表：</span><br><span class=\"line\">    格式文件 — 存储表结构的定义（mytable.frm）</span><br><span class=\"line\">    数据文件 — 存储表行的内容（mytable.MYD）</span><br><span class=\"line\">    索引文件 — 存储表上索引（mytable.MYI）：索引是一本书的目录，缩小扫描范围，提高查询效率的一种机制。</span><br><span class=\"line\">  可被转换为压缩、只读表来节省空间</span><br><span class=\"line\"></span><br><span class=\"line\">  提示一下：</span><br><span class=\"line\">    对于一张表来说，只要是主键，</span><br><span class=\"line\">    或者加有unique约束的字段上会自动创建索引。</span><br><span class=\"line\"></span><br><span class=\"line\">  MyISAM存储引擎特点：</span><br><span class=\"line\">    可被转换为压缩、只读表来节省空间</span><br><span class=\"line\">    这是这种存储引擎的优势！！！！</span><br><span class=\"line\">  </span><br><span class=\"line\">  MyISAM不支持事务机制，安全性低。</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"InnoDB存储引擎\"><a href=\"#InnoDB存储引擎\" class=\"headerlink\" title=\"InnoDB存储引擎\"></a>InnoDB存储引擎</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">这是mysql默认的存储引擎，同时也是一个重量级的存储引擎。</span><br><span class=\"line\">InnoDB支持事务，支持数据库崩溃后自动恢复机制。</span><br><span class=\"line\">InnoDB存储引擎最主要的特点是：非常安全。</span><br><span class=\"line\"></span><br><span class=\"line\">它管理的表具有下列主要特征：</span><br><span class=\"line\">  – 每个 InnoDB 表在数据库目录中以.frm 格式文件表示</span><br><span class=\"line\">  – InnoDB 表空间 tablespace 被用于存储表的内容（表空间是一个逻辑名称。表空间存储数据+索引。）</span><br><span class=\"line\"></span><br><span class=\"line\">  – 提供一组用来记录事务性活动的日志文件</span><br><span class=\"line\">  – 用 COMMIT(提交)、SAVEPOINT 及ROLLBACK(回滚)支持事务处理</span><br><span class=\"line\">  – 提供全 ACID 兼容</span><br><span class=\"line\">  – 在 MySQL 服务器崩溃后提供自动恢复</span><br><span class=\"line\">  – 多版本（MVCC）和行级锁定</span><br><span class=\"line\">  – 支持外键及引用的完整性，包括级联删除和更新</span><br><span class=\"line\"></span><br><span class=\"line\">InnoDB最大的特点就是支持事务：</span><br><span class=\"line\">  以保证数据的安全。效率不是很高，并且也不能压缩，不能转换为只读，</span><br><span class=\"line\">  不能很好的节省存储空间。</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"MEMORY存储引擎\"><a href=\"#MEMORY存储引擎\" class=\"headerlink\" title=\"MEMORY存储引擎\"></a>MEMORY存储引擎</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">使用 MEMORY 存储引擎的表，其数据存储在内存中，且行的长度固定，</span><br><span class=\"line\">这两个特点使得 MEMORY 存储引擎非常快。</span><br><span class=\"line\"></span><br><span class=\"line\">MEMORY 存储引擎管理的表具有下列特征：</span><br><span class=\"line\">  – 在数据库目录内，每个表均以.frm 格式的文件表示。</span><br><span class=\"line\">  – 表数据及索引被存储在内存中。（目的就是快，查询快！）</span><br><span class=\"line\">  – 表级锁机制。</span><br><span class=\"line\">  – 不能包含 TEXT 或 BLOB 字段。</span><br><span class=\"line\"></span><br><span class=\"line\">MEMORY 存储引擎以前被称为HEAP 引擎。</span><br><span class=\"line\"></span><br><span class=\"line\">MEMORY引擎优点：查询效率是最高的。不需要和硬盘交互。</span><br><span class=\"line\">MEMORY引擎缺点：不安全，关机之后数据消失。因为数据和索引都是在内存当中。</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">什么是事务？</span><br><span class=\"line\"></span><br><span class=\"line\">一个事务其实就是一个完整的业务逻辑。</span><br><span class=\"line\">是一个最小的工作单元。不可再分。</span><br><span class=\"line\"></span><br><span class=\"line\">什么是一个完整的业务逻辑？</span><br><span class=\"line\">  假设转账，从A账户向B账户中转账10000.</span><br><span class=\"line\">  将A账户的钱减去10000（update语句）</span><br><span class=\"line\">  将B账户的钱加上10000（update语句）</span><br><span class=\"line\">  这就是一个完整的业务逻辑。</span><br><span class=\"line\"></span><br><span class=\"line\">  以上的操作是一个最小的工作单元，要么同时成功，要么同时失败，不可再分。</span><br><span class=\"line\">  这两个update语句要求必须同时成功或者同时失败，这样才能保证钱是正确的。</span><br><span class=\"line\"></span><br><span class=\"line\">只有DML语句才会有事务这一说，其它语句和事务无关！！！</span><br><span class=\"line\">insert</span><br><span class=\"line\">delete</span><br><span class=\"line\">update</span><br><span class=\"line\">只有以上的三个语句和事务有关系，其它都没有关系。</span><br><span class=\"line\"></span><br><span class=\"line\">因为 只有以上的三个语句是数据库表中数据进行增、删、改的。</span><br><span class=\"line\">只要你的操作一旦涉及到数据的增、删、改，那么就一定要考虑安全问题。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">InnoDB存储引擎：提供一组用来记录事务性活动的日志文件</span><br><span class=\"line\"></span><br><span class=\"line\">事务开启了：</span><br><span class=\"line\">insert</span><br><span class=\"line\">insert</span><br><span class=\"line\">insert</span><br><span class=\"line\">delete</span><br><span class=\"line\">update</span><br><span class=\"line\">update</span><br><span class=\"line\">update</span><br><span class=\"line\">事务结束了！</span><br><span class=\"line\"></span><br><span class=\"line\">在事务的执行过程中，每一条DML的操作都会记录到“事务性活动的日志文件”中。</span><br><span class=\"line\">在事务的执行过程中，我们可以提交事务，也可以回滚事务。</span><br><span class=\"line\"></span><br><span class=\"line\">提交事务？</span><br><span class=\"line\">  清空事务性活动的日志文件，将数据全部彻底持久化到数据库表中。</span><br><span class=\"line\">  提交事务标志着，事务的结束。并且是一种全部成功的结束。</span><br><span class=\"line\"></span><br><span class=\"line\">回滚事务？</span><br><span class=\"line\">  将之前所有的DML操作全部撤销，并且清空事务性活动的日志文件</span><br><span class=\"line\">  回滚事务标志着，事务的结束。并且是一种全部失败的结束。</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"提交事务、回滚事务\"><a href=\"#提交事务、回滚事务\" class=\"headerlink\" title=\"提交事务、回滚事务\"></a>提交事务、回滚事务</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">提交事务：commit; 语句</span><br><span class=\"line\">回滚事务：rollback; 语句（回滚永远都是只能回滚到上一次的提交点！）</span><br><span class=\"line\"></span><br><span class=\"line\">事务对应的英语单词是：transaction</span><br><span class=\"line\"></span><br><span class=\"line\">测试一下，在mysql当中默认的事务行为是怎样的？</span><br><span class=\"line\">  mysql默认情况下是支持自动提交事务的。（自动提交）</span><br><span class=\"line\">  什么是自动提交？</span><br><span class=\"line\">    每执行一条DML语句，则提交一次！</span><br><span class=\"line\"></span><br><span class=\"line\">  这种自动提交实际上是不符合我们的开发习惯，因为一个业务</span><br><span class=\"line\">  通常是需要多条DML语句共同执行才能完成的，为了保证数据</span><br><span class=\"line\">  的安全，必须要求同时成功之后再提交，所以不能执行一条</span><br><span class=\"line\">  就提交一条。</span><br><span class=\"line\"></span><br><span class=\"line\">怎么将mysql的自动提交机制关闭掉呢？</span><br><span class=\"line\">  先执行这个命令：start transaction;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>代码演示</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">演示事务：</span><br><span class=\"line\">  ---------------------------------回滚事务----------------------------------------</span><br><span class=\"line\">  mysql&gt; use bjpowernode;</span><br><span class=\"line\">  Database changed</span><br><span class=\"line\">  mysql&gt; select * from dept_bak;</span><br><span class=\"line\">  Empty set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; start transaction;</span><br><span class=\"line\">  Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; insert into dept_bak values(10,'abc', 'tj');</span><br><span class=\"line\">  Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; insert into dept_bak values(10,'abc', 'tj');</span><br><span class=\"line\">  Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; select * from dept_bak;</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  | DEPTNO | DNAME | LOC  |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  |     10 | abc   | tj   |</span><br><span class=\"line\">  |     10 | abc   | tj   |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  2 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; rollback;</span><br><span class=\"line\">  Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; select * from dept_bak;</span><br><span class=\"line\">  Empty set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  ---------------------------------提交事务----------------------------------------</span><br><span class=\"line\">  mysql&gt; use bjpowernode;</span><br><span class=\"line\">  Database changed</span><br><span class=\"line\">  mysql&gt; select * from dept_bak;</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  | DEPTNO | DNAME | LOC  |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  |     10 | abc   | bj   |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; start transaction;</span><br><span class=\"line\">  Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; insert into dept_bak values(20,'abc</span><br><span class=\"line\">  Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; insert into dept_bak values(20,'abc</span><br><span class=\"line\">  Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; insert into dept_bak values(20,'abc</span><br><span class=\"line\">  Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; commit;</span><br><span class=\"line\">  Query OK, 0 rows affected (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; select * from dept_bak;</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  | DEPTNO | DNAME | LOC  |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  |     10 | abc   | bj   |</span><br><span class=\"line\">  |     20 | abc   | tj   |</span><br><span class=\"line\">  |     20 | abc   | tj   |</span><br><span class=\"line\">  |     20 | abc   | tj   |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  4 rows in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; rollback;</span><br><span class=\"line\">  Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; select * from dept_bak;</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  | DEPTNO | DNAME | LOC  |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  |     10 | abc   | bj   |</span><br><span class=\"line\">  |     20 | abc   | tj   |</span><br><span class=\"line\">  |     20 | abc   | tj   |</span><br><span class=\"line\">  |     20 | abc   | tj   |</span><br><span class=\"line\">  +--------+-------+------+</span><br><span class=\"line\">  4 rows in set (0.00 sec)</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"事务四个特性\"><a href=\"#事务四个特性\" class=\"headerlink\" title=\"事务四个特性\"></a>事务四个特性</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">A：原子性</span><br><span class=\"line\">  说明事务是最小的工作单元。不可再分。</span><br><span class=\"line\"></span><br><span class=\"line\">C：一致性</span><br><span class=\"line\">  所有事务要求，在同一个事务当中，所有操作必须同时成功，或者同时失败，</span><br><span class=\"line\">  以保证数据的一致性。</span><br><span class=\"line\"></span><br><span class=\"line\">I：隔离性</span><br><span class=\"line\">  A事务和B事务之间具有一定的隔离。</span><br><span class=\"line\">  教室A和教室B之间有一道墙，这道墙就是隔离性。</span><br><span class=\"line\">  A事务在操作一张表的时候，另一个事务B也操作这张表会那样？？？</span><br><span class=\"line\"></span><br><span class=\"line\">D：持久性</span><br><span class=\"line\">  事务最终结束的一个保障。事务提交，就相当于将没有保存到硬盘上的数据</span><br><span class=\"line\">  保存到硬盘上！</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"事务的隔离性\"><a href=\"#事务的隔离性\" class=\"headerlink\" title=\"事务的隔离性\"></a>事务的隔离性</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">A教室和B教室中间有一道墙，这道墙可以很厚，也可以很薄。这就是事务的隔离级别。</span><br><span class=\"line\">这道墙越厚，表示隔离级别就越高。</span><br><span class=\"line\"></span><br><span class=\"line\">事务和事务之间的隔离级别有哪些呢？4个级别</span><br><span class=\"line\"></span><br><span class=\"line\">读未提交：read uncommitted（最低的隔离级别）《没有提交就读到了》</span><br><span class=\"line\">  什么是读未提交？</span><br><span class=\"line\">    事务A可以读取到事务B未提交的数据。</span><br><span class=\"line\">  这种隔离级别存在的问题就是：</span><br><span class=\"line\">    脏读现象！(Dirty Read)</span><br><span class=\"line\">    我们称读到了脏数据。</span><br><span class=\"line\">  这种隔离级别一般都是理论上的，大多数的数据库隔离级别都是二档起步！</span><br><span class=\"line\"></span><br><span class=\"line\">读已提交：read committed《提交之后才能读到》</span><br><span class=\"line\">  什么是读已提交？</span><br><span class=\"line\">    事务A只能读取到事务B提交之后的数据。</span><br><span class=\"line\">  这种隔离级别解决了什么问题？</span><br><span class=\"line\">    解决了脏读的现象。</span><br><span class=\"line\">  这种隔离级别存在什么问题？</span><br><span class=\"line\">    不可重复读取数据。</span><br><span class=\"line\">    什么是不可重复读取数据呢？</span><br><span class=\"line\">      在事务开启之后，第一次读到的数据是3条，当前事务还没有</span><br><span class=\"line\">      结束，可能第二次再读取的时候，读到的数据是4条，3不等于4</span><br><span class=\"line\">      称为不可重复读取。</span><br><span class=\"line\"></span><br><span class=\"line\">  这种隔离级别是比较真实的数据，每一次读到的数据是绝对的真实。</span><br><span class=\"line\">  oracle数据库默认的隔离级别是：read committed</span><br><span class=\"line\"></span><br><span class=\"line\">可重复读：repeatable read《提交之后也读不到，永远读取的都是刚开启事务时的数据》</span><br><span class=\"line\">  什么是可重复读取？</span><br><span class=\"line\">    事务A开启之后，不管是多久，每一次在事务A中读取到的数据</span><br><span class=\"line\">    都是一致的。即使事务B将数据已经修改，并且提交了，事务A</span><br><span class=\"line\">    读取到的数据还是没有发生改变，这就是可重复读。</span><br><span class=\"line\">  可重复读解决了什么问题？</span><br><span class=\"line\">    解决了不可重复读取数据。</span><br><span class=\"line\">  可重复读存在的问题是什么？</span><br><span class=\"line\">    可以会出现幻影读。</span><br><span class=\"line\">    每一次读取到的数据都是幻象。不够真实！</span><br><span class=\"line\">  </span><br><span class=\"line\">  早晨9点开始开启了事务，只要事务不结束，到晚上9点，读到的数据还是那样！</span><br><span class=\"line\">  读到的是假象。不够绝对的真实。</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql中默认的事务隔离级别就是这个！！！！！！！！！！！</span><br><span class=\"line\"></span><br><span class=\"line\">序列化/串行化：serializable（最高的隔离级别）</span><br><span class=\"line\">  这是最高隔离级别，效率最低。解决了所有的问题。</span><br><span class=\"line\">  这种隔离级别表示事务排队，不能并发！</span><br><span class=\"line\">  synchronized，线程同步（事务同步）</span><br><span class=\"line\">  每一次读取到的数据都是最真实的，并且效率是最低的。</span><br><span class=\"line\"></span><br><span class=\"line\">查看隔离级别：mysql&gt; SELECT @@tx_isolation</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| @@tx_isolation  |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">| REPEATABLE-READ |</span><br><span class=\"line\">+-----------------+</span><br><span class=\"line\">mysql默认的隔离级别</span><br><span class=\"line\"></span><br><span class=\"line\">MYsql8.0:</span><br><span class=\"line\">mysql&gt; show variables like 'transaction_isolation';</span><br><span class=\"line\">+-----------------------+-----------------+</span><br><span class=\"line\">| Variable_name         | Value           |</span><br><span class=\"line\">+-----------------------+-----------------+</span><br><span class=\"line\">| transaction_isolation | REPEATABLE-READ |</span><br><span class=\"line\">+-----------------------+-----------------+</span><br><span class=\"line\">1 row in set, 1 warning (0.01 sec)</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"索引（index）\"><a href=\"#索引（index）\" class=\"headerlink\" title=\"索引（index）\"></a>索引（index）</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">什么是索引？</span><br><span class=\"line\">索引是在数据库表的字段上添加的，是为了提高查询效率存在的一种机制。</span><br><span class=\"line\">一张表的一个字段可以添加一个索引，当然，多个字段联合起来也可以添加索引。</span><br><span class=\"line\">索引相当于一本书的目录，是为了缩小扫描范围而存在的一种机制。</span><br><span class=\"line\"></span><br><span class=\"line\">对于一本字典来说，查找某个汉字有两种方式：</span><br><span class=\"line\">  第一种方式：一页一页挨着找，直到找到为止，这种查找方式属于全字典扫描。</span><br><span class=\"line\">  效率比较低。</span><br><span class=\"line\">  第二种方式：先通过目录（索引）去定位一个大概的位置，然后直接定位到这个</span><br><span class=\"line\">  位置，做局域性扫描，缩小扫描的范围，快速的查找。这种查找方式属于通过</span><br><span class=\"line\">  索引检索，效率较高。</span><br><span class=\"line\">  </span><br><span class=\"line\">select * from t_user where name = 'jack';</span><br><span class=\"line\"></span><br><span class=\"line\">以上的这条SQL语句会去name字段上扫描，为什么？</span><br><span class=\"line\">  因为查询条件是：name='jack'</span><br><span class=\"line\"></span><br><span class=\"line\">如果name字段上没有添加索引（目录），或者说没有给name字段创建索引，</span><br><span class=\"line\">MySQL会进行全扫描，会将name字段上的每一个值都比对一遍。效率比较低。</span><br><span class=\"line\"></span><br><span class=\"line\">MySQL在查询方面主要就是两种方式：</span><br><span class=\"line\">  第一种方式：全表扫描</span><br><span class=\"line\">  第二种方式：根据索引检索。</span><br><span class=\"line\"></span><br><span class=\"line\">注意：</span><br><span class=\"line\">  在实际中，汉语字典前面的目录是排序的，按照a b c d e f....排序，</span><br><span class=\"line\">  为什么排序呢？因为只有排序了才会有区间查找这一说！（缩小扫描范围</span><br><span class=\"line\">  其实就是扫描某个区间罢了！）</span><br><span class=\"line\"></span><br><span class=\"line\">  在mysql数据库当中索引也是需要排序的，并且这个所以的排序和TreeSet</span><br><span class=\"line\">  数据结构相同。TreeSet（TreeMap）底层是一个自平衡的二叉树！在mysql</span><br><span class=\"line\">  当中索引是一个B-Tree数据结构。</span><br><span class=\"line\"></span><br><span class=\"line\">  遵循左小又大原则存放。采用中序遍历方式遍历取数据。</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">假设有一张用户表：t_user</span><br><span class=\"line\"></span><br><span class=\"line\">id(PK)\t\t\t\t\tname\t\t\t\t\t\t每一行记录在硬盘上都有物理存储编号</span><br><span class=\"line\">----------------------------------------------------------------------------------</span><br><span class=\"line\">100\t\t\t\t\t\tzhangsan\t\t\t\t\t0x1111</span><br><span class=\"line\">120\t\t\t\t\t\tlisi\t\t\t\t\t\t0x2222</span><br><span class=\"line\">99\t\t\t\t\t\t\twangwu\t\t\t\t\t0x8888</span><br><span class=\"line\">88\t\t\t\t\t\t\tzhaoliu\t\t\t\t\t0x9999</span><br><span class=\"line\">101\t\t\t\t\t\tjack\t\t\t\t\t\t0x6666</span><br><span class=\"line\">55\t\t\t\t\t\t\tlucy\t\t\t\t\t\t0x5555</span><br><span class=\"line\">130\t\t\t\t\t\ttom\t\t\t\t\t\t0x7777</span><br><span class=\"line\"></span><br><span class=\"line\">提醒1：在任何数据库当中主键上都会自动添加索引对象，id字段上自动有索引，</span><br><span class=\"line\">因为id是PK。另外在mysql当中，一个字段上如果有unique约束的话，也会自动</span><br><span class=\"line\">创建索引对象。</span><br><span class=\"line\"></span><br><span class=\"line\">提醒2：在任何数据库当中，任何一张表的任何一条记录在硬盘存储上都有</span><br><span class=\"line\">一个硬盘的物理存储编号。</span><br><span class=\"line\"></span><br><span class=\"line\">提醒3：在mysql当中，索引是一个单独的对象，不同的存储引擎以不同的形式</span><br><span class=\"line\">存在，在MyISAM存储引擎中，索引存储在一个.MYI文件中。在InnoDB存储引擎中</span><br><span class=\"line\">索引存储在一个逻辑名称叫做tablespace的当中。在MEMORY存储引擎当中索引</span><br><span class=\"line\">被存储在内存当中。不管索引存储在哪里，索引在mysql当中都是一个树的形式</span><br><span class=\"line\">存在。（自平衡二叉树：B-Tree）</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"添加索引的条件\"><a href=\"#添加索引的条件\" class=\"headerlink\" title=\"添加索引的条件\"></a>添加索引的条件</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">什么条件下，我们会考虑给字段添加索引呢？</span><br><span class=\"line\">条件1：数据量庞大（到底有多么庞大算庞大，这个需要测试，因为每一个硬件环境不同）</span><br><span class=\"line\">条件2：该字段经常出现在where的后面，以条件的形式存在，也就是说这个字段总是被扫描。</span><br><span class=\"line\">条件3：该字段很少的DML(insert delete update)操作。（因为DML之后，索引需要重新排序。）</span><br><span class=\"line\"></span><br><span class=\"line\">建议不要随意添加索引，因为索引也是需要维护的，太多的话反而会降低系统的性能。</span><br><span class=\"line\">建议通过主键查询，建议通过unique约束的字段进行查询，效率是比较高的。</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"索引的创建和删除\"><a href=\"#索引的创建和删除\" class=\"headerlink\" title=\"索引的创建和删除\"></a>索引的创建和删除</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">创建索引：</span><br><span class=\"line\">  mysql&gt; create index emp_ename_index on emp(ename);</span><br><span class=\"line\">  给emp表的ename字段添加索引，起名：emp_ename_index</span><br><span class=\"line\"></span><br><span class=\"line\">删除索引：</span><br><span class=\"line\">  mysql&gt; drop index emp_ename_index on emp;</span><br><span class=\"line\">  将emp表上的emp_ename_index索引对象删除。</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"是否使用索引进行检索\"><a href=\"#是否使用索引进行检索\" class=\"headerlink\" title=\"是否使用索引进行检索\"></a>是否使用索引进行检索</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">1.5、在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索？</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; explain select * from emp where ename = 'KING';</span><br><span class=\"line\">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class=\"line\">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class=\"line\">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">扫描14条记录：说明没有使用索引。type=ALL</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; create index emp_ename_index on emp(ename);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; explain select * from emp where ename = 'KING';</span><br><span class=\"line\">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class=\"line\">| id | select_type | table | type | possible_keys   | key             | key_len | ref   | rows | Extra       |</span><br><span class=\"line\">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class=\"line\">|  1 | SIMPLE      | emp   | ref  | emp_ename_index | emp_ename_index | 33      | const |    1 | Using where |</span><br><span class=\"line\">+----+-------------+-------+------+-----------------+-----------------+---------+-------+------+-------------+</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"索引失效的情况\"><a href=\"#索引失效的情况\" class=\"headerlink\" title=\"索引失效的情况\"></a>索引失效的情况</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">索引有失效的时候，什么时候索引失效呢？</span><br><span class=\"line\"></span><br><span class=\"line\">失效的第1种情况：</span><br><span class=\"line\">  select * from emp where ename like '%T';</span><br><span class=\"line\"></span><br><span class=\"line\">  ename上即使添加了索引，也不会走索引，为什么？</span><br><span class=\"line\">    原因是因为模糊匹配当中以“%”开头了！</span><br><span class=\"line\">    尽量避免模糊查询的时候以“%”开始。</span><br><span class=\"line\">    这是一种优化的手段/策略。</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; explain select * from emp where ename like '%T';</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">失效的第2种情况：</span><br><span class=\"line\">  使用or的时候会失效，如果使用or那么要求or两边的条件字段都要有</span><br><span class=\"line\">  索引，才会走索引，如果其中一边有一个字段没有索引，那么另一个</span><br><span class=\"line\">  字段上的索引也会实现。所以这就是为什么不建议使用or的原因。</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; explain select * from emp where ename = 'KING' or job = 'MANAGER';</span><br><span class=\"line\">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  | id | select_type | table | type | possible_keys   | key  | key_len | ref  | rows | Extra       |</span><br><span class=\"line\">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  |  1 | SIMPLE      | emp   | ALL  | emp_ename_index | NULL | NULL    | NULL |   14 | Using where |</span><br><span class=\"line\">  +----+-------------+-------+------+-----------------+------+---------+------+------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">失效的第3种情况：</span><br><span class=\"line\">  使用复合索引的时候，没有使用左侧的列查找，索引失效</span><br><span class=\"line\">  什么是复合索引？</span><br><span class=\"line\">    两个字段，或者更多的字段联合起来添加一个索引，叫做复合索引。</span><br><span class=\"line\">  </span><br><span class=\"line\">  create index emp_job_sal_index on emp(job,sal);</span><br><span class=\"line\">  </span><br><span class=\"line\">  mysql&gt; explain select * from emp where job = 'MANAGER';</span><br><span class=\"line\">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class=\"line\">  | id | select_type | table | type | possible_keys     | key               | key_len | ref   | rows | Extra       |</span><br><span class=\"line\">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class=\"line\">  |  1 | SIMPLE      | emp   | ref  | emp_job_sal_index | emp_job_sal_index | 30      | const |    3 | Using where |</span><br><span class=\"line\">  +----+-------------+-------+------+-------------------+-------------------+---------+-------+------+-------------+</span><br><span class=\"line\">  </span><br><span class=\"line\">  mysql&gt; explain select * from emp where sal = 800;</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">失效的第4种情况：</span><br><span class=\"line\">  在where当中索引列参加了运算，索引失效。</span><br><span class=\"line\">  mysql&gt; create index emp_sal_index on emp(sal);</span><br><span class=\"line\"></span><br><span class=\"line\">  explain select * from emp where sal = 800;</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class=\"line\">  | id | select_type | table | type | possible_keys | key           | key_len | ref   | rows | Extra       |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class=\"line\">  |  1 | SIMPLE      | emp   | ref  | emp_sal_index | emp_sal_index | 9       | const |    1 | Using where |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">  mysql&gt; explain select * from emp where sal+1 = 800;</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\"></span><br><span class=\"line\">失效的第5种情况：</span><br><span class=\"line\">  在where当中索引列使用了函数</span><br><span class=\"line\">  explain select * from emp where lower(ename) = 'smith';</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  | id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\">  |  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |</span><br><span class=\"line\">  +----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">单一索引：一个字段上添加索引。</span><br><span class=\"line\">复合索引：两个字段或者更多的字段上添加索引。</span><br><span class=\"line\"></span><br><span class=\"line\">主键索引：主键上添加索引。</span><br><span class=\"line\">唯一性索引：具有unique约束的字段上添加索引。</span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">注意：唯一性比较弱的字段上添加索引用处不大。</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h1><blockquote>\n<p>什么是视图？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">视图：站在不同的角度去看待同一份数据。</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"视图创建和删除\"><a href=\"#视图创建和删除\" class=\"headerlink\" title=\"视图创建和删除\"></a>视图创建和删除</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">创建视图对象：</span><br><span class=\"line\">  create view dept2_view as select * from dept2;</span><br><span class=\"line\"></span><br><span class=\"line\">删除视图对象：</span><br><span class=\"line\">  drop view dept2_view;</span><br><span class=\"line\"></span><br><span class=\"line\">注意：只有DQL语句才能以view的形式创建。</span><br><span class=\"line\">  create view view_name as 这里的语句必须是DQL语句;</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"视图的用途\"><a href=\"#视图的用途\" class=\"headerlink\" title=\"视图的用途\"></a>视图的用途</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">《方便，简化开发，利于维护》</span><br><span class=\"line\">我们可以面向视图对象进行增删改查，对视图对象的增删改查，会导致</span><br><span class=\"line\">原表被操作！（视图的特点：通过对视图的操作，会影响到原表数据。）</span><br><span class=\"line\"></span><br><span class=\"line\">//面向视图查询</span><br><span class=\"line\">select * from dept2_view; </span><br><span class=\"line\"></span><br><span class=\"line\">// 面向视图插入</span><br><span class=\"line\">insert into dept2_view(deptno,dname,loc) values(60,'SALES', 'BEIJING');</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询原表数据</span><br><span class=\"line\">mysql&gt; select * from dept2;</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">| DEPTNO | DNAME      | LOC      |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\">|     10 | ACCOUNTING | NEW YORK |</span><br><span class=\"line\">|     20 | RESEARCH   | DALLAS   |</span><br><span class=\"line\">|     30 | SALES      | CHICAGO  |</span><br><span class=\"line\">|     40 | OPERATIONS | BOSTON   |</span><br><span class=\"line\">|     60 | SALES      | BEIJING  |</span><br><span class=\"line\">+--------+------------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">// 面向视图删除</span><br><span class=\"line\">mysql&gt; delete from dept2_view;</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询原表数据</span><br><span class=\"line\">mysql&gt; select * from dept2;</span><br><span class=\"line\">Empty set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">假设有一条非常复杂的SQL语句，而这条SQL语句需要在不同的位置上反复使用。</span><br><span class=\"line\">每一次使用这个sql语句的时候都需要重新编写，很长，很麻烦，怎么办？</span><br><span class=\"line\">  可以把这条复杂的SQL语句以视图对象的形式新建。</span><br><span class=\"line\">  在需要编写这条SQL语句的位置直接使用视图对象，可以大大简化开发。</span><br><span class=\"line\">  并且利于后期的维护，因为修改的时候也只需要修改一个位置就行，只需要</span><br><span class=\"line\">  修改视图对象所映射的SQL语句。</span><br><span class=\"line\"></span><br><span class=\"line\">我们以后面向视图开发的时候，使用视图的时候可以像使用table一样。</span><br><span class=\"line\">可以对视图进行增删改查等操作。视图不是在内存当中，视图对象也是</span><br><span class=\"line\">存储在硬盘上的，不会消失。</span><br><span class=\"line\"></span><br><span class=\"line\">再提醒一下：</span><br><span class=\"line\">  视图对应的语句只能是DQL语句。</span><br><span class=\"line\">  但是视图对象创建完成之后，可以对视图进行增删改查等操作。</span><br><span class=\"line\"></span><br><span class=\"line\">小插曲：</span><br><span class=\"line\">  增删改查，又叫做：CRUD。</span><br><span class=\"line\">  CRUD是在公司中程序员之间沟通的术语。一般我们很少说增删改查。</span><br><span class=\"line\">  一般都说CRUD。</span><br><span class=\"line\"></span><br><span class=\"line\">  C:Create（增）</span><br><span class=\"line\">  R:Retrive（查：检索）</span><br><span class=\"line\">  U:Update（改）</span><br><span class=\"line\">  D:Delete（删）</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"DBA常用命令\"><a href=\"#DBA常用命令\" class=\"headerlink\" title=\"DBA常用命令\"></a>DBA常用命令</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">重点掌握：</span><br><span class=\"line\">  数据的导入和导出（数据的备份）</span><br><span class=\"line\">  其它命令了解一下即可。</span><br><span class=\"line\"></span><br><span class=\"line\">数据导出？</span><br><span class=\"line\">  注意：在windows的dos命令窗口中：</span><br><span class=\"line\">    mysqldump bjpowernode&gt;D:\\bjpowernode.sql -uroot -p123456</span><br><span class=\"line\">  </span><br><span class=\"line\">  可以导出指定的表吗？</span><br><span class=\"line\">    mysqldump bjpowernode emp&gt;D:\\bjpowernode.sql -uroot -p123456</span><br><span class=\"line\"></span><br><span class=\"line\">数据导入？</span><br><span class=\"line\">  注意：需要先登录到mysql数据库服务器上。</span><br><span class=\"line\">  然后创建数据库：create database bjpowernode;</span><br><span class=\"line\">  使用数据库：use bjpowernode</span><br><span class=\"line\">  然后初始化数据库：source D:\\bjpowernode.sql</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"数据库设计三范式\"><a href=\"#数据库设计三范式\" class=\"headerlink\" title=\"数据库设计三范式\"></a>数据库设计三范式</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">什么是数据库设计范式？</span><br><span class=\"line\">数据库表的设计依据。教你怎么进行数据库表的设计。</span><br><span class=\"line\"></span><br><span class=\"line\">数据库设计范式共有？</span><br><span class=\"line\">3个。</span><br><span class=\"line\">第一范式：要求任何一张表必须有主键，每一个字段原子性不可再分。</span><br><span class=\"line\"></span><br><span class=\"line\">第二范式：建立在第一范式的基础之上，要求所有非主键字段完全依赖主键，</span><br><span class=\"line\">不要产生部分依赖。</span><br><span class=\"line\"></span><br><span class=\"line\">第三范式：建立在第二范式的基础之上，要求所有非主键字段直接依赖主键，</span><br><span class=\"line\">不要产生传递依赖。</span><br><span class=\"line\"></span><br><span class=\"line\">声明：三范式是面试官经常问的，所以一定要熟记在心！</span><br><span class=\"line\"></span><br><span class=\"line\">设计数据库表的时候，按照以上的范式进行，可以避免表中数据的冗余，空间的浪费。</span><br><span class=\"line\"></span><br><span class=\"line\">第一范式</span><br><span class=\"line\">最核心，最重要的范式，所有表的设计都需要满足。</span><br><span class=\"line\">必须有主键，并且每一个字段都是原子性不可再分。</span><br><span class=\"line\"></span><br><span class=\"line\">学生编号 学生姓名 联系方式</span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\">1001\t\t张三\t\tzs@gmail.com,1359999999</span><br><span class=\"line\">1002\t\t李四\t\tls@gmail.com,13699999999</span><br><span class=\"line\">1001\t\t王五\t\tww@163.net,13488888888</span><br><span class=\"line\"></span><br><span class=\"line\">以上是学生表，满足第一范式吗？</span><br><span class=\"line\">  不满足，第一：没有主键。第二：联系方式可以分为邮箱地址和电话</span><br><span class=\"line\"></span><br><span class=\"line\">学生编号(pk) 学生姓名\t邮箱地址\t\t\t联系电话</span><br><span class=\"line\">----------------------------------------------------</span><br><span class=\"line\">1001\t\t\t\t张三\t\tzs@gmail.com\t1359999999</span><br><span class=\"line\">1002\t\t\t\t李四\t\tls@gmail.com\t13699999999</span><br><span class=\"line\">1003\t\t\t\t王五\t\tww@163.net\t\t13488888888</span><br><span class=\"line\"></span><br><span class=\"line\">第二范式：</span><br><span class=\"line\">建立在第一范式的基础之上，</span><br><span class=\"line\">要求所有非主键字段必须完全依赖主键，不要产生部分依赖。</span><br><span class=\"line\"></span><br><span class=\"line\">学生编号 学生姓名 教师编号 教师姓名</span><br><span class=\"line\">----------------------------------------------------</span><br><span class=\"line\">1001\t\t\t张三\t\t001\t\t王老师</span><br><span class=\"line\">1002\t\t\t李四\t\t002\t\t赵老师</span><br><span class=\"line\">1003\t\t\t王五\t\t001\t\t王老师</span><br><span class=\"line\">1001\t\t\t张三\t\t002\t\t赵老师</span><br><span class=\"line\"></span><br><span class=\"line\">这张表描述了学生和老师的关系：（1个学生可能有多个老师，1个老师有多个学生）</span><br><span class=\"line\">这是非常典型的：多对多关系！</span><br><span class=\"line\"></span><br><span class=\"line\">分析以上的表是否满足第一范式？</span><br><span class=\"line\">  不满足第一范式。</span><br><span class=\"line\"></span><br><span class=\"line\">怎么满足第一范式呢？修改</span><br><span class=\"line\"></span><br><span class=\"line\">学生编号+教师编号(pk)\t\t学生姓名  教师姓名</span><br><span class=\"line\">----------------------------------------------------</span><br><span class=\"line\">1001\t\t\t001\t\t\t\t张三\t\t\t王老师</span><br><span class=\"line\">1002\t\t\t002\t\t\t\t李四\t\t\t赵老师</span><br><span class=\"line\">1003\t\t\t001\t\t\t\t王五\t\t\t王老师</span><br><span class=\"line\">1001\t\t\t002\t\t\t\t张三\t\t\t赵老师</span><br><span class=\"line\"></span><br><span class=\"line\">学生编号 教师编号，两个字段联合做主键，复合主键（PK: 学生编号+教师编号）</span><br><span class=\"line\">经过修改之后，以上的表满足了第一范式。但是满足第二范式吗？</span><br><span class=\"line\">  不满足，“张三”依赖1001，“王老师”依赖001，显然产生了部分依赖。</span><br><span class=\"line\">  产生部分依赖有什么缺点？</span><br><span class=\"line\">    数据冗余了。空间浪费了。“张三”重复了，“王老师”重复了。</span><br><span class=\"line\"></span><br><span class=\"line\">为了让以上的表满足第二范式，你需要这样设计：</span><br><span class=\"line\">  使用三张表来表示多对多的关系！！！！</span><br><span class=\"line\">  学生表</span><br><span class=\"line\">  学生编号(pk)\t\t学生名字</span><br><span class=\"line\">  ------------------------------------</span><br><span class=\"line\">  1001\t\t\t\t\t张三</span><br><span class=\"line\">  1002\t\t\t\t\t李四</span><br><span class=\"line\">  1003\t\t\t\t\t王五</span><br><span class=\"line\">  </span><br><span class=\"line\">  教师表</span><br><span class=\"line\">  教师编号(pk)\t\t教师姓名</span><br><span class=\"line\">  --------------------------------------</span><br><span class=\"line\">  001\t\t\t\t\t王老师</span><br><span class=\"line\">  002\t\t\t\t\t赵老师</span><br><span class=\"line\"></span><br><span class=\"line\">  学生教师关系表</span><br><span class=\"line\">  id(pk)\t\t\t学生编号(fk)\t\t\t教师编号(fk)</span><br><span class=\"line\">  ------------------------------------------------------</span><br><span class=\"line\">  1\t\t\t\t\t\t1001\t\t\t\t\t\t001</span><br><span class=\"line\">  2\t\t\t\t\t\t1002\t\t\t\t\t\t002</span><br><span class=\"line\">  3\t\t\t\t\t\t1003\t\t\t\t\t\t001</span><br><span class=\"line\">  4\t\t\t\t\t\t1001\t\t\t\t\t\t002</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">背口诀：</span><br><span class=\"line\">  多对多怎么设计？</span><br><span class=\"line\">    多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">第三范式</span><br><span class=\"line\">第三范式建立在第二范式的基础之上</span><br><span class=\"line\">要求所有非主键字典必须直接依赖主键，不要产生传递依赖。</span><br><span class=\"line\"></span><br><span class=\"line\">学生编号（PK） 学生姓名 班级编号  班级名称</span><br><span class=\"line\">---------------------------------------------------------</span><br><span class=\"line\">  1001\t\t\t\t张三\t\t01\t\t\t一年一班</span><br><span class=\"line\">  1002\t\t\t\t李四\t\t02\t\t\t一年二班</span><br><span class=\"line\">  1003\t\t\t\t王五\t\t03\t\t\t一年三班</span><br><span class=\"line\">  1004\t\t\t\t赵六\t\t03\t\t\t一年三班</span><br><span class=\"line\"></span><br><span class=\"line\">以上表的设计是描述：班级和学生的关系。很显然是1对多关系！</span><br><span class=\"line\">一个教室中有多个学生。</span><br><span class=\"line\"></span><br><span class=\"line\">分析以上表是否满足第一范式？</span><br><span class=\"line\">  满足第一范式，有主键。</span><br><span class=\"line\"></span><br><span class=\"line\">分析以上表是否满足第二范式？</span><br><span class=\"line\">  满足第二范式，因为主键不是复合主键，没有产生部分依赖。主键是单一主键。</span><br><span class=\"line\"></span><br><span class=\"line\">分析以上表是否满足第三范式？</span><br><span class=\"line\">  第三范式要求：不要产生传递依赖！</span><br><span class=\"line\">  一年一班依赖01，01依赖1001，产生了传递依赖。</span><br><span class=\"line\">  不符合第三范式的要求。产生了数据的冗余。</span><br><span class=\"line\"></span><br><span class=\"line\">那么应该怎么设计一对多呢？</span><br><span class=\"line\"></span><br><span class=\"line\">  班级表：一</span><br><span class=\"line\">  班级编号(pk)\t\t\t\t班级名称</span><br><span class=\"line\">  ----------------------------------------</span><br><span class=\"line\">  01\t\t\t\t\t\t\t\t一年一班</span><br><span class=\"line\">  02\t\t\t\t\t\t\t\t一年二班</span><br><span class=\"line\">  03\t\t\t\t\t\t\t\t一年三班</span><br><span class=\"line\"></span><br><span class=\"line\">  学生表：多</span><br><span class=\"line\"></span><br><span class=\"line\">  学生编号（PK） 学生姓名 班级编号(fk)</span><br><span class=\"line\">  -------------------------------------------</span><br><span class=\"line\">  1001\t\t\t\t张三\t\t\t01\t\t\t</span><br><span class=\"line\">  1002\t\t\t\t李四\t\t\t02\t\t\t</span><br><span class=\"line\">  1003\t\t\t\t王五\t\t\t03\t\t\t</span><br><span class=\"line\">  1004\t\t\t\t赵六\t\t\t03\t\t</span><br><span class=\"line\">  </span><br><span class=\"line\">  背口诀：</span><br><span class=\"line\">    一对多，两张表，多的表加外键！！！！！！！！！！！！</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"总结表的设计\"><a href=\"#总结表的设计\" class=\"headerlink\" title=\"总结表的设计\"></a>总结表的设计</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">一对多：</span><br><span class=\"line\">  一对多，两张表，多的表加外键！！！！！！！！！！！！</span><br><span class=\"line\"></span><br><span class=\"line\">多对多：</span><br><span class=\"line\">  多对多，三张表，关系表两个外键！！！！！！！！！！！！！！！</span><br><span class=\"line\"></span><br><span class=\"line\">一对一：</span><br><span class=\"line\">一对一放到一张表中不就行了吗？为啥还要拆分表？</span><br><span class=\"line\">在实际的开发中，可能存在一张表字段太多，太庞大。这个时候要拆分表。</span><br><span class=\"line\">一对一怎么设计？</span><br><span class=\"line\">  没有拆分表之前：一张表</span><br><span class=\"line\">    t_user</span><br><span class=\"line\">    id\t\tlogin_name\t\tlogin_pwd\t\treal_name\t\temail\t\t\t\taddress........</span><br><span class=\"line\">    ---------------------------------------------------------------------------</span><br><span class=\"line\">    1\t\t\tzhangsan\t\t123\t\t\t\t张三\t\t\t\tzhangsan@xxx</span><br><span class=\"line\">    2\t\t\tlisi\t\t\t123\t\t\t\t李四\t\t\t\tlisi@xxx</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  </span><br><span class=\"line\">  这种庞大的表建议拆分为两张：</span><br><span class=\"line\">    t_login 登录信息表</span><br><span class=\"line\">    id(pk)\t\tlogin_name\t\tlogin_pwd\t</span><br><span class=\"line\">    ---------------------------------</span><br><span class=\"line\">    1\t\t\t\tzhangsan\t\t123\t\t\t</span><br><span class=\"line\">    2\t\t\t\tlisi\t\t\t123\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">    t_user 用户详细信息表</span><br><span class=\"line\">    id(pk)\t\treal_name\t\temail\t\t\t\taddress........\tlogin_id(fk+unique)</span><br><span class=\"line\">    -----------------------------------------------------------------------------------------</span><br><span class=\"line\">    100\t\t\t张三\t\t\t\tzhangsan@xxx\t\t\t\t\t\t\t\t1</span><br><span class=\"line\">    200\t\t\t李四\t\t\t\tlisi@xxx\t\t\t\t\t\t\t\t\t2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    口诀：一对一，外键唯一！！！！！！！！！！</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"嘱咐\"><a href=\"#嘱咐\" class=\"headerlink\" title=\"嘱咐\"></a>嘱咐</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">数据库设计三范式是理论上的。</span><br><span class=\"line\"></span><br><span class=\"line\">实践和理论有的时候有偏差。</span><br><span class=\"line\"></span><br><span class=\"line\">最终的目的都是为了满足客户的需求，有的时候会拿冗余换执行速度。</span><br><span class=\"line\"></span><br><span class=\"line\">因为在sql当中，表和表之间连接次数越多，效率越低。（笛卡尔积）</span><br><span class=\"line\"></span><br><span class=\"line\">有的时候可能会存在冗余，但是为了减少表的连接次数，这样做也是合理的，</span><br><span class=\"line\">并且对于开发人员来说，sql语句的编写难度也会降低。</span><br><span class=\"line\"></span><br><span class=\"line\">面试的时候把这句话说上：他就不会认为你是初级程序员了！</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"笔记部分来源\"><a href=\"#笔记部分来源\" class=\"headerlink\" title=\"笔记部分来源\"></a>笔记部分来源</h2><p>[1]：<a href=\"https://www.jianshu.com/p/77a2c88a81c9\">https://www.jianshu.com/p/77a2c88a81c9</a><br>[2]：<a href=\"https://www.bilibili.com/video/BV1WT4y1a7K6\">https://www.bilibili.com/video/BV1WT4y1a7K6</a><br>[3]：<a href=\"https://www.bilibili.com/video/BV1Vy4y1z7EX\">https://www.bilibili.com/video/BV1Vy4y1z7EX</a></p>\n","categories":["mysql"],"tags":["mysql"]},{"title":"为什么Java中只有值传递？","url":"/posts/48f46c1/","content":"<h1 id=\"为什么-Java-中只有值传递？\"><a href=\"#为什么-Java-中只有值传递？\" class=\"headerlink\" title=\"为什么 Java 中只有值传递？\"></a>为什么 Java 中只有值传递？</h1><p>开始之前，我们先来搞懂下面这两个概念：</p>\n<ul>\n<li>形参&amp;实参</li>\n<li>值传递&amp;引用传递</li>\n</ul>\n<h1 id=\"形参-amp-实参\"><a href=\"#形参-amp-实参\" class=\"headerlink\" title=\"形参&amp;实参\"></a>形参&amp;实参</h1><p>方法的定义可能会用到参数（有参的方法），参数在程序语言中分为：</p>\n<ul>\n<li>实参（实际参数） ：用于传递给函数/方法的参数，必须有确定的值。</li>\n<li>形参（形式参数） ：用于定义函数/方法，接收实参，不需要有确定的值。<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// hello 为实参</span></span><br><span class=\"line\">sayHello(hello);</span><br><span class=\"line\"><span class=\"comment\">// str 为形参</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String str)</span> {</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h1 id=\"值传递-amp-引用传递\"><a href=\"#值传递-amp-引用传递\" class=\"headerlink\" title=\"值传递&amp;引用传递\"></a>值传递&amp;引用传递</h1>程序设计语言将实参传递给方法（或函数）的方式分为两种：</li>\n<li>值传递 ：方法接收的是实参值的拷贝，会创建副本。</li>\n<li>引用传递 ：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</li>\n</ul>\n<p><code>很多程序设计语言（比如 C++、 Pascal )提供了两种参数传递的方式，不过，在 Java 中只有值传递。</code></p>\n<h1 id=\"为什么-Java-只有值传递？\"><a href=\"#为什么-Java-只有值传递？\" class=\"headerlink\" title=\"为什么 Java 只有值传递？\"></a>为什么 Java 只有值传递？</h1><p>为什么说 Java 只有值传递呢？ 不需要太多废话，我通过 3 个例子来给大家证明。</p>\n<h1 id=\"案例1：传递基本类型参数\"><a href=\"#案例1：传递基本类型参数\" class=\"headerlink\" title=\"案例1：传递基本类型参数\"></a>案例1：传递基本类型参数</h1><h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">    swap(num1, num2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"num1 = \"</span> + num1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"num2 = \"</span> + num2);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> {</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"a = \"</span> + a);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"b = \"</span> + b);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"输出：\"><a href=\"#输出：\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">20</span></span><br><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\">num1 = <span class=\"number\">10</span></span><br><span class=\"line\">num2 = <span class=\"number\">20</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"解析：\"><a href=\"#解析：\" class=\"headerlink\" title=\"解析：\"></a>解析：</h2><h3 id=\"在-swap-方法中，a、b-的值进行交换，并不会影响到-num1、num2。因为，a、b-的值，只是从-num1、num2-的复制过来的。也就是说，a、b-相当于-num1、num2-的副本，副本的内容无论怎么修改，都不会影响到原件本身。\"><a href=\"#在-swap-方法中，a、b-的值进行交换，并不会影响到-num1、num2。因为，a、b-的值，只是从-num1、num2-的复制过来的。也就是说，a、b-相当于-num1、num2-的副本，副本的内容无论怎么修改，都不会影响到原件本身。\" class=\"headerlink\" title=\"在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。\"></a>在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</h3><h1 id=\"案例2：传递引用类型参数1\"><a href=\"#案例2：传递引用类型参数1\" class=\"headerlink\" title=\"案例2：传递引用类型参数1\"></a>案例2：传递引用类型参数1</h1><h2 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">  <span class=\"type\">int</span>[] arr = { <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> };</span><br><span class=\"line\">  System.out.println(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  change(arr);</span><br><span class=\"line\">  System.out.println(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 将数组的第一个元素变为0</span></span><br><span class=\"line\">  array[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"输出：-1\"><a href=\"#输出：-1\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"解析：-1\"><a href=\"#解析：-1\" class=\"headerlink\" title=\"解析：\"></a>解析：</h2><h3 id=\"看了这个案例很多人肯定觉得-Java-对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说-change-方法的参数拷贝的是-arr-（实参）的地址，因此，它和-arr-指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳-Java-对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\"><a href=\"#看了这个案例很多人肯定觉得-Java-对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说-change-方法的参数拷贝的是-arr-（实参）的地址，因此，它和-arr-指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳-Java-对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\" class=\"headerlink\" title=\"看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\"></a>看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例</h3><h1 id=\"案例3-：传递引用类型参数2\"><a href=\"#案例3-：传递引用类型参数2\" class=\"headerlink\" title=\"案例3 ：传递引用类型参数2\"></a>案例3 ：传递引用类型参数2</h1><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">xiaoZhang</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"小张\"</span>);</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">xiaoLi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"小李\"</span>);</span><br><span class=\"line\">    swap(xiaoZhang, xiaoLi);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"xiaoZhang:\"</span> + xiaoZhang.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"xiaoLi:\"</span> + xiaoLi.getName());</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(Person person1, Person person2)</span> {</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> person1;</span><br><span class=\"line\">    person1 = person2;</span><br><span class=\"line\">    person2 = temp;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person1:\"</span> + person1.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"person2:\"</span> + person2.getName());</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出:\"></a>输出:</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">person1:小李</span><br><span class=\"line\">person2:小张</span><br><span class=\"line\">xiaoZhang:小张</span><br><span class=\"line\">xiaoLi:小李</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"解析：-2\"><a href=\"#解析：-2\" class=\"headerlink\" title=\"解析：\"></a>解析：</h3><h3 id=\"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap-方法的参数-person1-和-person2-只是拷贝的实参-xiaoZhang-和-xiaoLi-的地址。因此，-person1-和-person2-的互换只是拷贝的两个地址的互换罢了，并不会影响到实参-xiaoZhang-和-xiaoLi-。\"><a href=\"#怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap-方法的参数-person1-和-person2-只是拷贝的实参-xiaoZhang-和-xiaoLi-的地址。因此，-person1-和-person2-的互换只是拷贝的两个地址的互换罢了，并不会影响到实参-xiaoZhang-和-xiaoLi-。\" class=\"headerlink\" title=\"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此， person1 和 person2 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi 。\"></a>怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此， person1 和 person2 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi 。</h3><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"Java-中将实参传递给方法（或函数）的方式是-值传递-：\"><a href=\"#Java-中将实参传递给方法（或函数）的方式是-值传递-：\" class=\"headerlink\" title=\"Java 中将实参传递给方法（或函数）的方式是 值传递 ：\"></a>Java 中将实参传递给方法（或函数）的方式是 值传递 ：</h2><ul>\n<li>如果参数是基本类型的话，很简单，传递的就是基本类型的字面量值的拷贝，会创建副本。</li>\n<li>如果参数是引用类型，传递的就是实参所引用的对象在堆中地址值的拷贝，同样也会创建副本。</li>\n</ul>\n<h1 id=\"引用于：-JavaGuide\"><a href=\"#引用于：-JavaGuide\" class=\"headerlink\" title=\"引用于： JavaGuide\"></a>引用于： JavaGuide</h1>","categories":["Java"],"tags":["java"]},{"title":"在Linux里安装jdk","url":"/posts/cccf557c/","content":"<h1 id=\"下载jdk\"><a href=\"#下载jdk\" class=\"headerlink\" title=\"下载jdk\"></a>下载jdk</h1><p>进入华为镜像网址：<a href=\"https://repo.huaweicloud.com/java/jdk/\">https://repo.huaweicloud.com/java/jdk/</a></p>\n<ol>\n<li><p>选择：8u181-b13</p>\n</li>\n<li><p>下载：jdk-8u181-linux-x64.tar.gz</p>\n</li>\n</ol>\n<img src=\"/posts/cccf557c/2.png\" alt=\"11\" style=\"zoom:67%;\">\n\n<img src=\"/posts/cccf557c/3.png\" style=\"zoom: 67%;\">\n\n<hr>\n<h1 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h1><p>在opt目录下创建 module目录</p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module</span><br></pre></td></tr></tbody></table></figure>\n\n<ol>\n<li><strong>进入到安装包目录下，解压安装包到opt/module目录</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>tar -zxvf jdk -8u22l-linux-x64.tar.gz  -C /opt</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>配置java环境配置</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p> <strong>vim /etc/profile</strong>        —-进入etc/profile配置全局变量</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p> <strong>export JAVA_HOME=/ opt/module/jdk1.8.0_181</strong> </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p> <strong>export PATH=$PATH:$JAVA_HOME/bin</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>配置完成</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>source /etc/profile</strong>    —-重新加载配置文件</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>java -version</strong>               —- 查看jdk版本</p>\n</blockquote>\n<p><code>后续可以使用命令 javac xxx.java  进行编译  java  xxx  运行</code></p>\n</li>\n</ul>\n","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"在Linux里安装mysql","url":"/posts/a91489ef/","content":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p><strong>下载至对应Mysql安装包</strong></p>\n<blockquote>\n<p><a href=\"https://downloads.mysql.com/archives/community/\">https://downloads.mysql.com/archives/community/</a></p>\n</blockquote>\n<p><img src=\"/posts/a91489ef/4.png\"></p>\n<h1 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h1><p><strong>在opt目录下创建 module目录</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>解压安装包至opt/module目录,并重命名</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz)  -C /opt/module</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz  mysql-5.7.34</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h1><p><strong><font color=\"ondine\">可不配置,但最好是配置，因为启动Mysql更方便些</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>对应实际安装目录路径</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">export MYSQL_HOME=/opt/module/mysql-5.7.34</span><br><span class=\"line\">export PATH=$PATH:$MYSQL_HOME/bin</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>刷新</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"创建用户与组or目录存放数据\"><a href=\"#创建用户与组or目录存放数据\" class=\"headerlink\" title=\"创建用户与组or目录存放数据\"></a>创建用户与组or目录存放数据</h2><figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">groupadd mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">useradd -r -g mysql mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">chown mysql:mysql  -R /var/lib/mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置-my-cnf\"><a href=\"#配置-my-cnf\" class=\"headerlink\" title=\"配置 my.cnf\"></a>配置 my.cnf</h2><ul>\n<li><blockquote>\n<p><strong>vim /etc/my.cnf</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"keyword\">user</span><span class=\"operator\">=</span>mysql</span><br><span class=\"line\"></span><br><span class=\"line\">basedir<span class=\"operator\">=</span><span class=\"operator\">/</span>opt<span class=\"operator\">/</span><span class=\"keyword\">module</span><span class=\"operator\">/</span>mysql<span class=\"number\">-5.7</span><span class=\"number\">.34</span>                          </span><br><span class=\"line\">datadir<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql                    </span><br><span class=\"line\">socket<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.sock </span><br><span class=\"line\"><span class=\"type\">character</span><span class=\"operator\">-</span><span class=\"keyword\">set</span><span class=\"operator\">-</span>server<span class=\"operator\">=</span>utf8mb4  </span><br><span class=\"line\">symbolic<span class=\"operator\">-</span>links<span class=\"operator\">=</span><span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log<span class=\"operator\">-</span>error<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>err.log</span><br><span class=\"line\">pid<span class=\"operator\">-</span>file<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.pid</span><br><span class=\"line\"></span><br><span class=\"line\">[client]</span><br><span class=\"line\">port<span class=\"operator\">=</span><span class=\"number\">3306</span>  </span><br><span class=\"line\">socket<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.sock</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<img src=\"/posts/a91489ef/1.png\" style=\"zoom:80%;\">\n\n<h2 id=\"初始化数据库\"><a href=\"#初始化数据库\" class=\"headerlink\" title=\"初始化数据库\"></a>初始化数据库</h2><figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd /opt/module/mysql-5.7.34/bin</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./mysqld --initialize --user=mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>复制下方图片位置初始密码</strong></p>\n<p><img src=\"/posts/a91489ef/2.png\"></p>\n<p><strong><font color=\"ondine\">注意以上图片的密码为初始密码(12位)，等下要进入MySQL修改</font></strong></p>\n<h2 id=\"复制-mysql-server-至-x2F-etc-x2F-init-d\"><a href=\"#复制-mysql-server-至-x2F-etc-x2F-init-d\" class=\"headerlink\" title=\"复制 mysql.server 至 /etc/init.d\"></a>复制 mysql.server 至 /etc/init.d</h2><p><a href=\"https://blog.csdn.net/m0_45406092/article/details/112380521\">etc/init.d的简单介绍</a></p>\n<p><strong><font color=\"ondine\">init.d 目录中存放的是一系列系统服务的管理（启动与停止）脚本。</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cp /opt/module/mysql-5.7.34/support-files/mysql.server /etc/init.d/mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"设置mysql系统服务-开启开机自启动\"><a href=\"#设置mysql系统服务-开启开机自启动\" class=\"headerlink\" title=\"设置mysql系统服务 开启开机自启动\"></a>设置mysql系统服务 开启开机自启动</h2><ol>\n<li><strong>进入系统服务文件修改 <code>vim /etc/init.d/mysql</code> ，  进入文件,往下翻 在<code>basedir</code> 和 <code>datadir</code>地址处填写</strong></li>\n</ol>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/init.d/mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">basedir=/opt/module/mysql-5.7.34</span><br><span class=\"line\">datadir=/var/lib/mysql</span><br></pre></td></tr></tbody></table></figure>\n\n\n<p>  <img src=\"/posts/a91489ef/5.png\"></p>\n<ol start=\"2\">\n<li><strong>设置MYSQL系统服务并开启自启</strong></li>\n</ol>\n<p><strong>增加 mysql 服务控制脚本执行权限</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/init.d/mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>将 mysql 服务加⼊到系统服务</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">chkconfig --add mysql</span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"启动MySQL\"><a href=\"#启动MySQL\" class=\"headerlink\" title=\"启动MySQL\"></a>启动MySQL</h1><p><strong>关闭防火墙</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>启动MySql服务</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">service mysql start</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>进入MySQL</strong></p>\n<p><strong><font color=\"orange\">如果未配置全局变量  就<code>cd /opt/mysql-5.7.34/bin</code>   再次输入 mysql -uroot -p即可</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">输入初始密码 进入mysql</font></strong></p>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><p><strong>进入mysql后修改密码</strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">alter user user() identified by \"123456\";</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"purple\">设置123456为密码</font></strong></p>\n<h2 id=\"设置远程主机连接-安装完成！\"><a href=\"#设置远程主机连接-安装完成！\" class=\"headerlink\" title=\"设置远程主机连接(安装完成！)\"></a>设置远程主机连接(安装完成！)</h2><p><strong>访问mysql库</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>使root能再任何host访问</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">update user set host='%' where user ='root'; </span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>刷新</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">flush privileges; </span><br></pre></td></tr></tbody></table></figure>\n<p><strong><font color=\"ondine\">安装完成</font></strong></p>\n<p><strong>Window连接：</strong></p>\n<img src=\"/posts/a91489ef/6.png\" style=\"zoom:25%;\">\n\n\n\n<img src=\"/posts/a91489ef/7.png\" style=\"zoom:25%;\">\n\n<hr>\n<center><font color=\"pink\">✿✿ヽ(°▽°)ノ✿完结撒花！</font></center>\n\n<hr>\n<h1 id=\"查看主机信息更改情况\"><a href=\"#查看主机信息更改情况\" class=\"headerlink\" title=\"查看主机信息更改情况\"></a>查看主机信息更改情况</h1><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">select user,host from user;</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<p><img src=\"/posts/a91489ef/3.png\"><br>小提示：<br><code>Host列指定了允许用户登录所使用的IP，比如user=root Host=192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。而%是个通配符，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host=%，表示所有IP都有连接权限。</code></p>\n<h1 id=\"远程连接错误情况\"><a href=\"#远程连接错误情况\" class=\"headerlink\" title=\"远程连接错误情况\"></a>远程连接错误情况</h1><ol>\n<li>2002的话就是没有开机后没有开启 mysql系统服务，开启即可</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>/etc/init.d/mysql start   或    server mysql start   开启服务”</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>1130 没有开远程连接</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从“localhost”改成”%” “</strong></p>\n</blockquote>\n<hr>\n</li>\n</ul>\n<h1 id=\"防火墙的开启、关闭、禁用命令\"><a href=\"#防火墙的开启、关闭、禁用命令\" class=\"headerlink\" title=\"防火墙的开启、关闭、禁用命令\"></a>防火墙的开启、关闭、禁用命令</h1><p>（1）设置开机启用防火墙：<strong>systemctl enable firewalld.service</strong></p>\n<p>（2）设置开机禁用防火墙：<strong>systemctl disable firewalld.service</strong></p>\n<p>（3）启动防火墙：<strong>systemctl start firewalld</strong></p>\n<p>（4）关闭防火墙：<strong>systemctl stop firewalld</strong></p>\n<p>（5）检查防火墙状态：<strong>systemctl status firewalld</strong> </p>\n<p>（6）重启防火墙：<strong>systemctl restart firewalld.service</strong></p>\n<p>3306进行防火墙配置：<code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code></p>\n<p>开放3306端口：<code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</code></p>\n<p>查看开放端口：<code>firewall-cmd --list-ports</code></p>\n","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"java常用类","url":"/posts/6c6d8dca/","content":"<h1 id=\"字符串相关的类\"><a href=\"#字符串相关的类\" class=\"headerlink\" title=\"字符串相关的类\"></a>字符串相关的类</h1><h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"String的特性\"><a href=\"#String的特性\" class=\"headerlink\" title=\"String的特性\"></a><center>String的特性</center></h3><ul>\n<li><font color=\"red\">String类：代表字符串。</font>Java 程序中的所有字符串字面值（如 “abc” ）都作 为此类的实例实现。</li>\n<li>String是一个final类，代表<font color=\"red\">不可变的字符序列</font>。</li>\n<li>字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。</li>\n<li>String对象的字符内容是存储在一个字符数组value[]中的。</li>\n</ul>\n<p><strong>源代码：</strong></p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span></span><br><span class=\"line\"><span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence {</span><br><span class=\"line\"><span class=\"comment\">/** The value is used for character storage. */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">char</span> value[];</span><br><span class=\"line\"><span class=\"comment\">/** Cache the hash code for the string */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> hash; <span class=\"comment\">// Default to 0</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"理解String的不可变性\"><a href=\"#理解String的不可变性\" class=\"headerlink\" title=\"理解String的不可变性\"></a>理解String的不可变性</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.testng.annotations.Test;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/31</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//String的使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringTest</span> {</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    String:字符串，使用一对“”引起来表示</span></span><br><span class=\"line\"><span class=\"comment\">    1.String 声明为final的，不可被继承</span></span><br><span class=\"line\"><span class=\"comment\">    2.String 实现了Serializable接口：表示字符串是支持序列化的</span></span><br><span class=\"line\"><span class=\"comment\">        实现了Comparable接口：表示String可以比较大小</span></span><br><span class=\"line\"><span class=\"comment\">    3.String：内部定义了final chat[] value用于存储字符串数据的</span></span><br><span class=\"line\"><span class=\"comment\">    4.String: 代表不可变的字符串序列。简称：不可变性</span></span><br><span class=\"line\"><span class=\"comment\">    通过字面量的方式（区别于new）,给一个字符串赋值，此时字符串值声明在字符串常量池中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        String s1=<span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String s2=<span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1==s2);   <span class=\"comment\">//比较s1和s2的地址值</span></span><br><span class=\"line\">        <span class=\"comment\">//结果为：true 常量池不会存储相同内容的字符串,所以s1和s2的地址都是相同的</span></span><br><span class=\"line\"></span><br><span class=\"line\">        s1=<span class=\"string\">\"hello\"</span>;   <span class=\"comment\">//1. 当对字符串重新赋值时，需要重写指定内存区域赋值</span></span><br><span class=\"line\">        <span class=\"comment\">//不能使用原有的value进行赋值（重新开辟赋值地址，存储hello，地址也变了）</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"******************\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s3=<span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        s3+=<span class=\"string\">\"def\"</span>;</span><br><span class=\"line\">        System.out.println(s3);</span><br><span class=\"line\">        <span class=\"comment\">//2. 对现有的字符串进行连接操作时，也需要重新指定内存区域赋值</span></span><br><span class=\"line\">        <span class=\"comment\">//不能使用原有的value进行赋值（也就是进行拼接操作，也会重新开辟内存地址）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String s4=<span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String s5=s4.replace(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"m\"</span>); </span><br><span class=\"line\">        <span class=\"comment\">//将下标为0的字符替换改变 重新开辟一个新地址存储</span></span><br><span class=\"line\">        <span class=\"comment\">//3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域</span></span><br><span class=\"line\">        System.out.println(s4==s5);</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"String的不同实例方式对比\"><a href=\"#String的不同实例方式对比\" class=\"headerlink\" title=\"String的不同实例方式对比\"></a>String的不同实例方式对比</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String的实例方式</span><br><span class=\"line\">方式一：通过字面量定义的方式</span><br><span class=\"line\">方式二：通过new + 构造器的方式</span><br><span class=\"line\"></span><br><span class=\"line\">面试题： String s = new String(\"abc\"); 方式创建对象，在内存中创建了几个对象？</span><br><span class=\"line\">两个： 一个是堆空间中的new结构，另一个是char[]对应的常量池中的数据：“abc”</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过字面量定义的方式，此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中</span></span><br><span class=\"line\">       String s1=<span class=\"string\">\"javaEE\"</span>;</span><br><span class=\"line\">       String s2=<span class=\"string\">\"javaEE\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//通过new + 构造器的方式：此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值</span></span><br><span class=\"line\">       String s3= <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"javaEE\"</span>);</span><br><span class=\"line\">       String s4= <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"javaEE\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1 == s2);  <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(s1 == s3);  <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s1 == s4);  <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s3 == s4);  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"*****************\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Tom\"</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">\"Tom\"</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(p1.name.equals(p2.name));  <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(p1.name==p2.name);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//true   比较的是String数组的地址直，常量池中只有一个  Tom在常量池里面</span></span><br><span class=\"line\">        <span class=\"comment\">// 他们都指向常量池的“tom\" 而常量池里面只有一个tom</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p1.name=<span class=\"string\">\"Jerry\"</span>;</span><br><span class=\"line\">        System.out.println(p2.name);   <span class=\"comment\">//Tom</span></span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"String不同拼接操作的对比\"><a href=\"#String不同拼接操作的对比\" class=\"headerlink\" title=\"String不同拼接操作的对比\"></a>String不同拼接操作的对比</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    结论：</span></span><br><span class=\"line\"><span class=\"comment\">    1.常量与常量的拼接结果在常量池。且常量池中不会存在相同的常量</span></span><br><span class=\"line\"><span class=\"comment\">    2.只要其中有一个是变量，结果就在堆中</span></span><br><span class=\"line\"><span class=\"comment\">    3.如果拼接的结果调用intern()方法，返回值就在常量池中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        String s1=<span class=\"string\">\"javaEE\"</span>;</span><br><span class=\"line\">        String s2=<span class=\"string\">\"hadoop\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String s3=<span class=\"string\">\"javaEEhadoop\"</span>;</span><br><span class=\"line\">        String s4=<span class=\"string\">\"jvaEE\"</span>+<span class=\"string\">\"hadoop\"</span>;</span><br><span class=\"line\">        String s5=s1+<span class=\"string\">\"hadoop\"</span>;</span><br><span class=\"line\">        String s6=<span class=\"string\">\"javaEE\"</span>+s2;</span><br><span class=\"line\">        String s7=s1+s2;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s3 == s4);   <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(s3 == s5);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s3 == s6);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s3 == s7);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s5 == s6);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s5 == s7);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s6 == s7);   <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String s8=s6.intern();          <span class=\"comment\">//返回值得到的s8使用的常量值中已经存在的\"javaEEhadoop\"</span></span><br><span class=\"line\">        System.out.println(s3 == s8);   <span class=\"comment\">//true</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"String常用的方法1\"><a href=\"#String常用的方法1\" class=\"headerlink\" title=\"String常用的方法1\"></a>String常用的方法1</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span>:返回字符串的长度： <span class=\"keyword\">return</span> value.length</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">charAt</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>：返回某索引处的字符<span class=\"keyword\">return</span> value[index]</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>：判断是否是空字符串：<span class=\"keyword\">return</span> value.length == <span class=\"number\">0</span></span><br><span class=\"line\">String <span class=\"title function_\">toLowerCase</span><span class=\"params\">()</span>：使用默认语言环境，将 String 中的所有字符转换为小写</span><br><span class=\"line\">String <span class=\"title function_\">toUpperCase</span><span class=\"params\">()</span>：使用默认语言环境，将 String 中的所有字符转换为大写</span><br><span class=\"line\">String <span class=\"title function_\">trim</span><span class=\"params\">()</span>：返回字符串的副本，忽略前导空白和尾部空白</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span>：比较字符串的内容是否相同</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">equalsIgnoreCase</span><span class=\"params\">(String anotherString)</span>：与equals方法类似，忽略大小写</span><br><span class=\"line\">String <span class=\"title function_\">concat</span><span class=\"params\">(String str)</span>：将指定字符串连接到此字符串的结尾。 等价于用“+”</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(String anotherString)</span>：比较两个字符串的大小</span><br><span class=\"line\">String <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">int</span> beginIndex)</span>：返回一个新的字符串，它是此字符串的从 beginIndex开始截取到最后的一个子字符串。</span><br><span class=\"line\">String <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">int</span> beginIndex, <span class=\"type\">int</span> endIndex)</span>：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">       String s1=<span class=\"string\">\"HelloWorld\"</span>;</span><br><span class=\"line\">       String s2=<span class=\"string\">\"helloworld\"</span>;</span><br><span class=\"line\">       System.out.println(s1.equals(s2));   <span class=\"comment\">//对比字符串内容是否相同</span></span><br><span class=\"line\">       System.out.println(s1.equalsIgnoreCase(s2));  <span class=\"comment\">//忽略大小写</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String s3=<span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">        String s4=s3.concat(<span class=\"string\">\"def\"</span>);   <span class=\"comment\">//相当于拼接 把字符串添加到结尾</span></span><br><span class=\"line\">        System.out.println(s4);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s5=<span class=\"string\">\"abc\"</span>;   <span class=\"comment\">//一个字符对比</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s6</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"abe\"</span>);  <span class=\"comment\">// c-e  99-101 =-1   Ascii码</span></span><br><span class=\"line\">        System.out.println(s5.compareTo(s6));</span><br><span class=\"line\"></span><br><span class=\"line\">        String s7=<span class=\"string\">\"为什么束手无策啊\"</span>;</span><br><span class=\"line\">        String s8=s7.substring(<span class=\"number\">2</span>); <span class=\"comment\">//数组下标2到末尾的字符串</span></span><br><span class=\"line\">        System.out.println(s7);</span><br><span class=\"line\">        System.out.println(s8);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s9=s7.substring(<span class=\"number\">3</span>,<span class=\"number\">7</span>); <span class=\"comment\">//数组下标2到下标5</span></span><br><span class=\"line\">        System.out.println(s9);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"String常用的方法2\"><a href=\"#String常用的方法2\" class=\"headerlink\" title=\"String常用的方法2\"></a>String常用的方法2</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">endsWith</span><span class=\"params\">(String suffix)</span>：测试此字符串是否以指定的后缀结束</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">startsWith</span><span class=\"params\">(String prefix)</span>：测试此字符串是否以指定的前缀开始</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">startsWith</span><span class=\"params\">(String prefix, <span class=\"type\">int</span> toffset)</span>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">contains</span><span class=\"params\">(CharSequence s)</span>：当且仅当此字符串包含指定的 <span class=\"type\">char</span> 值序列时，返回 <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">indexOf</span><span class=\"params\">(String str)</span>：返回指定子字符串在此字符串中第一次出现处的索引</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">indexOf</span><span class=\"params\">(String str, <span class=\"type\">int</span> fromIndex)</span>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">lastIndexOf</span><span class=\"params\">(String str)</span>：返回指定子字符串在此字符串中最右边出现处的索引</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">lastIndexOf</span><span class=\"params\">(String str, <span class=\"type\">int</span> fromIndex)</span>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span><br><span class=\"line\">注：indexOf和lastIndexOf方法如果未找到都是返回-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">       String str1=<span class=\"string\">\"hellowworld\"</span>;</span><br><span class=\"line\">       <span class=\"type\">boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span>str1.endsWith(<span class=\"string\">\"rld\"</span>);  <span class=\"comment\">//测试此字符串是否按指定的后缀结束</span></span><br><span class=\"line\">       System.out.println(b1);            <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">boolean</span> b2=str1.startsWith(<span class=\"string\">\"He\"</span>);  <span class=\"comment\">//测试此字符串 是否按指定的前缀开始</span></span><br><span class=\"line\">       System.out.println(b2);            <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">boolean</span> b3=str1.startsWith(<span class=\"string\">\"ll\"</span>,<span class=\"number\">2</span>);  <span class=\"comment\">//根据指定索引  是否按照指定的前缀开始</span></span><br><span class=\"line\">       System.out.println(b3);                           <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       String str2=<span class=\"string\">\"wor\"</span>;                          <span class=\"comment\">//是否包含含指定的 char 值序列</span></span><br><span class=\"line\">       System.out.println(str1.contains(str2));    <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(str1.indexOf(<span class=\"string\">\"zw\"</span>));    <span class=\"comment\">//返回  第一次出现位置的下标 如果未找到就是 -1</span></span><br><span class=\"line\">                                                 <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(str1.indexOf(<span class=\"string\">\"or\"</span>,<span class=\"number\">5</span>)); <span class=\"comment\">//返回 从指定的索引开始  判断</span></span><br><span class=\"line\">                                                               <span class=\"comment\">// 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">       String str3=<span class=\"string\">\"hellorworld\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(str3.lastIndexOf(<span class=\"string\">\"or\"</span>));  <span class=\"comment\">//返回 开始反向搜索 第一次出现位置的下标</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// 7</span></span><br><span class=\"line\">       System.out.println(str3.lastIndexOf(<span class=\"string\">\"or\"</span>,<span class=\"number\">6</span>)); <span class=\"comment\">//返回   指定的索引</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// 4</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"String常用的方法3\"><a href=\"#String常用的方法3\" class=\"headerlink\" title=\"String常用的方法3\"></a>String常用的方法3</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">replace</span><span class=\"params\">(<span class=\"type\">char</span> oldChar, <span class=\"type\">char</span> newChar)</span>：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span><br><span class=\"line\">String <span class=\"title function_\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span><br><span class=\"line\">String <span class=\"title function_\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span>：使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span><br><span class=\"line\">String <span class=\"title function_\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span>：使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(String regex)</span>：告知此字符串是否匹配给定的正则表达式。</span><br><span class=\"line\">String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span><br><span class=\"line\">String[] split(String regex, <span class=\"type\">int</span> limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span><br><span class=\"line\">    </span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">        String str1=<span class=\"string\">\"宜春yichun宜春\"</span>;</span><br><span class=\"line\">        String str2=str1.replace(<span class=\"string\">'春'</span>,<span class=\"string\">'.'</span>);   <span class=\"comment\">//注意是单引号‘号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(str2);    <span class=\"comment\">//宜.yichun宜.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String str3=str1.replace(<span class=\"string\">\"宜春\"</span>,<span class=\"string\">\"赣州\"</span>);  </span><br><span class=\"line\">        System.out.println(str3);       <span class=\"comment\">//赣州yichun赣州</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"***********************\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String str=<span class=\"string\">\"12hello34world5java67mysql89\"</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">string</span> <span class=\"operator\">=</span>str.replaceAll(<span class=\"string\">\"\\\\d+\"</span>,<span class=\"string\">\",\"</span>).replaceAll(<span class=\"string\">\"^,|,$\"</span>,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把字符串中的数字替换成 ， 如果结果中开头和结尾有 ， 的话就去掉</span></span><br><span class=\"line\">        System.out.println(string);    <span class=\"comment\">////hello,world,java,mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\">        str=<span class=\"string\">\"12345\"</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> matches=str.matches(<span class=\"string\">\"\\\\d+\"</span>);   <span class=\"comment\">//正则表达式</span></span><br><span class=\"line\">        System.out.println(matches);  <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String tel=<span class=\"string\">\"0571-4534289\"</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> result=tel.matches(<span class=\"string\">\"0571-\\\\d{7,8}\"</span>);   <span class=\"comment\">//正则表达式</span></span><br><span class=\"line\">        System.out.println(result);   <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//判断这是否是一个杭州的固定电话</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"***********************\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        str=<span class=\"string\">\"hello|world|java\"</span>;</span><br><span class=\"line\">        String[] strs=str.split(<span class=\"string\">\"\\\\|\"</span>);   <span class=\"comment\">//对 | 进行切片 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strs.length; i++) {</span><br><span class=\"line\">            System.out.println(strs[i]);   <span class=\"comment\">//hello  world  java</span></span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        str2 =<span class=\"string\">\"hello.world.java\"</span>;</span><br><span class=\"line\">        String[] strs2=str2.split(<span class=\"string\">\"\\\\.\"</span>);  <span class=\"comment\">//对 , 进行切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strs2.length; i++) {</span><br><span class=\"line\">            System.out.println(strs2[i]);  <span class=\"comment\">//hello  world  java</span></span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"String与基本数据类型包装类的转换\"><a href=\"#String与基本数据类型包装类的转换\" class=\"headerlink\" title=\"String与基本数据类型包装类的转换\"></a>String与基本数据类型包装类的转换</h3><ul>\n<li><p><strong>字符串 -&gt; 基本数据类型、包装类</strong></p>\n<ul>\n<li>Integer包装类的**public static int <font color=\"red\">parseInt(String s)</font>**：可以将由“数字”字 符组成的字符串转换为整型。</li>\n<li>类似地,使用java.lang包中的Byte、Short、Long、Float、Double类调相应 的类方法可以将由<font color=\"red\">“数字”字符</font>组成的字符串，转化为相应的基本数据类型。</li>\n</ul>\n</li>\n<li><p><strong>基本数据类型、包装类 -&gt;字符串</strong></p>\n<ul>\n<li>调用String类的**public String <font color=\"red\">valueOf(int n)</font>**可将int型转换为字符串</li>\n<li>相应的**valueOf(byte b)、valueOf(long l)、valueOf(float f)、valueOf(double  d)、valueOf(boolean b)**可由参数的相应类型到字符串的转换</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    复习:</span></span><br><span class=\"line\"><span class=\"comment\">    String 与基本数据类型、包装类型之间的转换</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</span></span><br><span class=\"line\"><span class=\"comment\">    基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">        String str1=<span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">// int num = (int)str1; //错误的</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span>Integer.parseInt(str1);    <span class=\"comment\">//String向 基本数据类型转换 要调用包装类</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String str2=String.valueOf(num);   <span class=\"comment\">//基本数据类型向 String转换使用String重载的valueOf方法</span></span><br><span class=\"line\">        String str3=num+<span class=\"string\">\"\"</span>;                <span class=\"comment\">//使用拼接也是可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(str1==str3);   <span class=\"comment\">//堆内存  是不等于常量池的</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<h3 id=\"String与char-之间的转换\"><a href=\"#String与char-之间的转换\" class=\"headerlink\" title=\"String与char[]之间的转换\"></a>String与char[]之间的转换</h3><ul>\n<li><p>字符数组 –&gt; 字符串</p>\n<ul>\n<li>String 类的构造器：<strong>String(char[]) 和 String(char[]，int offset，int length)</strong> 分别用字符数组中的全部字符和部分字符创建字符串对象。</li>\n</ul>\n</li>\n<li><p>字符串 –&gt; 字符数组</p>\n</li>\n<li><p>**public char[] toCharArray()**：将字符串中的全部字符存放在一个字符数组 中的方法。</p>\n</li>\n<li><p>**public void getChars(int srcBegin, int srcEnd, char[] dst,  int dstBegin)**：提供了将指定索引范围内的字符串存放到数组中的方法。</p>\n</li>\n</ul>\n  <figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    String 与 char[]之间的转换</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    String --&gt; char[]: 调用String的toCharArray()</span></span><br><span class=\"line\"><span class=\"comment\">    char[] --&gt; String: 调用String的构造器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        String str1=<span class=\"string\">\"abc123\"</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">char</span>[] charArray=str1.toCharArray();   <span class=\"comment\">//把String类型转换为 char数组类型</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; charArray.length; i++) {</span><br><span class=\"line\">            System.out.println(charArray[i]);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"type\">char</span>[] arr =<span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[]{<span class=\"string\">'h'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'l'</span>,<span class=\"string\">'o'</span>}; </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(arr);</span><br><span class=\"line\">        <span class=\"comment\">//利用构造器把 char数组类型 转换为String</span></span><br><span class=\"line\">        System.out.println(str2);</span><br><span class=\"line\"></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"String与byte-之间的转换\"><a href=\"#String与byte-之间的转换\" class=\"headerlink\" title=\"String与byte[]之间的转换\"></a>String与byte[]之间的转换</h3><ul>\n<li>字节数组 –&gt;字符串<ul>\n<li>**String(byte[])**：通过使用平台的默认字符集解码指定的 byte 数组，构 造一个新的 String。</li>\n<li><strong>String(byte[]，int offset，int length)</strong> ：用指定的字节数组的一部分， 即从数组起始位置offset开始取length个字节构造一个字符串对象。</li>\n</ul>\n</li>\n<li>字符串 –&gt; 字节数组</li>\n<li><strong>public byte[] getBytes()</strong> ：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</li>\n<li><strong>public byte[] getBytes(String charsetName)</strong> ：使用指定的字符集将 此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</li>\n</ul>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.StandardCharsets;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    编码：String --&gt; byte[]:调用String的getBytes()</span></span><br><span class=\"line\"><span class=\"comment\">    解码：byte --&gt; String:调用String的构造器</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    编码： 字符串 --&gt; 字符 （看得懂 --&gt; 看不懂的二进制数据）</span></span><br><span class=\"line\"><span class=\"comment\">    解码：编码的逆过程，字节 --&gt;字符串 （看不懂的二进制数据 --&gt; 看得懂）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    说明： 解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出选乱码。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException {</span><br><span class=\"line\">        String str1=<span class=\"string\">\"abc123中国\"</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes=str1.getBytes();   <span class=\"comment\">//使用默认的字符集，进行编码 Ascii UTF-8   字符串 -&gt;字节数组</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(bytes));</span><br><span class=\"line\">        <span class=\"comment\">//[97, 98, 99, 49, 50, 51, -28, -72, -83, -27, -101, -67]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] gbks=str1.getBytes(<span class=\"string\">\"GBK\"</span>);  <span class=\"comment\">//  字符串  字节数组</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用指定的字符集，进行编码 UTF-8 Ascii</span></span><br><span class=\"line\">        System.out.println(Arrays.toString(gbks));</span><br><span class=\"line\">        <span class=\"comment\">//[97, 98, 99, 49, 50, 51, -42, -48, -71, -6]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"*************************\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String str2=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes,<span class=\"number\">0</span>,<span class=\"number\">12</span>);   <span class=\"comment\">//使用默认的字符集，进行解码。 第一个到数组长度之间的   字节数组 -&gt;字符串</span></span><br><span class=\"line\">        System.out.println(str2);</span><br><span class=\"line\">        <span class=\"comment\">//abc123中国</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        String str3=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(gbks);    <span class=\"comment\">//默认解码方式  与gbk编码 不一样      字节数组 -&gt;字符串</span></span><br><span class=\"line\">        System.out.println(str3);        <span class=\"comment\">//乱码</span></span><br><span class=\"line\">        <span class=\"comment\">//abc123�й�</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(gbks,<span class=\"string\">\"gbk\"</span>);  <span class=\"comment\">//如果是 gbk 默认编码方式 指定的字符集将此 String 编码</span></span><br><span class=\"line\">        System.out.println(str4);</span><br><span class=\"line\">        <span class=\"comment\">//abc123中国</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"解决一个拼接问题\"><a href=\"#解决一个拼接问题\" class=\"headerlink\" title=\"解决一个拼接问题\"></a>解决一个拼接问题</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/4</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    结论：</span></span><br><span class=\"line\"><span class=\"comment\">    1. 常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量</span></span><br><span class=\"line\"><span class=\"comment\">    2. 只要其中有一个是变量，结果就在常量池中</span></span><br><span class=\"line\"><span class=\"comment\">    3. 如果拼接的结果调用intern()方法，返回值就在常量池中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        String s1=<span class=\"string\">\"javaEEhadoop\"</span>;</span><br><span class=\"line\">        String s2=<span class=\"string\">\"javaEE\"</span>;</span><br><span class=\"line\">        String s3=s2+<span class=\"string\">\"hadoop\"</span>;        <span class=\"comment\">//变成堆内存了</span></span><br><span class=\"line\">        System.out.println(s1==s3);   <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span><span class=\"string\">\"javaEE\"</span>;   <span class=\"comment\">//常量  加了final就是在常量池中的了</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s5</span> <span class=\"operator\">=</span>s4+<span class=\"string\">\"hadoop\"</span>;</span><br><span class=\"line\">        System.out.println(s1==s5);   <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用了 final 被final修饰的是不可改变的变量 等于说是常量 在常量池当中</span></span><br><span class=\"line\">        <span class=\"comment\">//最后常量和常量比较那就是 true 了</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"StringBuffer\"><a href=\"#StringBuffer\" class=\"headerlink\" title=\"StringBuffer\"></a>StringBuffer</h2><ul>\n<li>java.lang.StringBuffer代表<font color=\"red\">可变的字符序列</font>，JDK1.0中声明，可以对字符 串内容进行增删，此时不会产生新的对象。</li>\n<li>很多方法与String相同。</li>\n<li>作为参数传递时，方法内部可以改变值。</li>\n</ul>\n<h3 id=\"StringBuffer的源码分析\"><a href=\"#StringBuffer的源码分析\" class=\"headerlink\" title=\"StringBuffer的源码分析\"></a>StringBuffer的源码分析</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> syn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/18</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: syn</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringBufferBuilderTest</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  String、StringBuffer、StringBuilder三者的异同？</span></span><br><span class=\"line\"><span class=\"comment\">  String:不可变的字符序列</span></span><br><span class=\"line\"><span class=\"comment\">  StringBuffer:可变的字符序列:线程安全的，效率低</span></span><br><span class=\"line\"><span class=\"comment\">  StringBuilder:可变的字符序列：jdk5.0新增的 线程不安全的，效率高,底层使用char[]存储</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  源码分析：</span></span><br><span class=\"line\"><span class=\"comment\">  String str = new String(); //char[] value = new char[0];</span></span><br><span class=\"line\"><span class=\"comment\">  String str1 = new String(\"abc\"); //char[] value = new char[]{'a','b','c'};</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  StringBuffer sb1 = new StringBuffer();  //char[] value = new char[16];  底层创建了长度是16的数组</span></span><br><span class=\"line\"><span class=\"comment\">  System.out.print;n(sb1.lenght());</span></span><br><span class=\"line\"><span class=\"comment\">  sb1.append('a'); //value[0] = 'a';</span></span><br><span class=\"line\"><span class=\"comment\">  sb1.append('b'); //value[1] = 'b';</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  StringBuffer sb2 = new StringBuffer(\"abc\");  //char[] value = new char[\"abc\".lenght()+16]   //底层</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">  //问题1 System.out.println(sb2.lenght());</span></span><br><span class=\"line\"><span class=\"comment\">  //问题2.扩容问题：如果要添加的数据底层数组盛不下，那就需要扩容底层的数组</span></span><br><span class=\"line\"><span class=\"comment\">          默认情况下，扩容为原来容器的2倍+2，同时将原有的数组中的元素赋值到新的数组中</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">          指导意义：开发中建议大家使用：StringBuffer(int cappcity) 或 StringBuilder(int cappcity)</span></span><br><span class=\"line\"><span class=\"comment\">          尽量不使用自动扩容</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">    <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb1</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(<span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    sb1.setCharAt(<span class=\"number\">0</span>,<span class=\"string\">'m'</span>);</span><br><span class=\"line\">    System.out.println(sb1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb2</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">    System.out.println(sb2.length());</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"StringBuffer的常用方法\"><a href=\"#StringBuffer的常用方法\" class=\"headerlink\" title=\"StringBuffer的常用方法\"></a>StringBuffer的常用方法</h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">在字符串末尾添加各种类型：</span><br><span class=\"line\"><span class=\"keyword\">public</span> StringBuffer <span class=\"title function_\">append</span><span class=\"params\">(各种类型)</span></span><br><span class=\"line\">在某个位置添加各种类型：</span><br><span class=\"line\"><span class=\"keyword\">public</span> StringBuffer <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> offset, 各种类型)</span></span><br><span class=\"line\">删除字符或某一段字符串：</span><br><span class=\"line\">deleteCharAt(<span class=\"type\">int</span> index) / <span class=\"keyword\">public</span> StringBuffer <span class=\"title function_\">delete</span><span class=\"params\">(<span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span></span><br><span class=\"line\">包含的字符数：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span></span><br><span class=\"line\">返回某位置的字符：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">char</span> <span class=\"title function_\">charAt</span><span class=\"params\">(<span class=\"type\">int</span> index)</span></span><br><span class=\"line\">得到一段字符：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getChars</span><span class=\"params\">(<span class=\"type\">int</span> srcBegin, <span class=\"type\">int</span> srcEnd, <span class=\"type\">char</span>[] dst, <span class=\"type\">int</span> dstBegin)</span></span><br><span class=\"line\">字符串倒转：</span><br><span class=\"line\"><span class=\"keyword\">public</span> StringBuffer <span class=\"title function_\">reverse</span><span class=\"params\">()</span></span><br><span class=\"line\">替换某个位置的字符：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCharAt</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">char</span> ch)</span></span><br><span class=\"line\">转为字符串：</span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"StringBuilder类\"><a href=\"#StringBuilder类\" class=\"headerlink\" title=\"StringBuilder类\"></a>StringBuilder类</h2><ul>\n<li>StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且 提供相关功能的方法也一样</li>\n<li>面试题：对比String、StringBuffer、StringBuilder<ul>\n<li>String(JDK1.0)：<font color=\"red\">不可变字符序列</font></li>\n<li>StringBuffer(JDK1.0)：<font color=\"red\">可变字符序列、效率低、线程安全</font></li>\n<li>StringBuilder(JDK 5.0)：<font color=\"red\">可变字符序列、效率高、线程不安全</font></li>\n</ul>\n</li>\n</ul>\n<p><font color=\"orange\">注意：作为参数传递的话，方法内部String不会改变其值，StringBuffer和StringBuilder 会改变其值</font></p>\n<h2 id=\"三者的效率测试\"><a href=\"#三者的效率测试\" class=\"headerlink\" title=\"三者的效率测试\"></a>三者的效率测试</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">        //初始设置</span><br><span class=\"line\">        long startTime = 0L;</span><br><span class=\"line\">        long endTime = 0L;</span><br><span class=\"line\">        String text = \"\";</span><br><span class=\"line\">        StringBuffer buffer = new StringBuffer(\"\");</span><br><span class=\"line\">        StringBuilder builder = new StringBuilder(\"\");</span><br><span class=\"line\">//开始对比  执行了一遍 System.currentTimeMillis(); 返回以毫秒为单位的当前时间。</span><br><span class=\"line\">        startTime = System.currentTimeMillis();</span><br><span class=\"line\">        for (int i = 0; i &lt; 20000; i++) {</span><br><span class=\"line\">            buffer.append(String.valueOf(i));</span><br><span class=\"line\">        }</span><br><span class=\"line\">        endTime = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(\"StringBuffer的执行时间：\" + (endTime - startTime));</span><br><span class=\"line\">        startTime = System.currentTimeMillis();</span><br><span class=\"line\">        for (int i = 0; i &lt; 20000; i++) {</span><br><span class=\"line\">            builder.append(String.valueOf(i));</span><br><span class=\"line\">        }</span><br><span class=\"line\">        endTime = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(\"StringBuilder的执行时间：\" + (endTime - startTime));</span><br><span class=\"line\">        startTime = System.currentTimeMillis();</span><br><span class=\"line\">        for (int i = 0; i &lt; 20000; i++) {</span><br><span class=\"line\">            text = text + i;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        endTime = System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(\"String的执行时间：\" + (endTime - startTime));</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">sb.append(str);</span><br><span class=\"line\">System.out.println(sb.length());<span class=\"comment\">// 4</span></span><br><span class=\"line\">System.out.println(sb);<span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"type\">StringBuffer</span> <span class=\"variable\">sb1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(str);</span><br><span class=\"line\">System.out.println(sb1);<span class=\"comment\">//  报错</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">String a=<span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">String b=<span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">String c=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">String d=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">System.out.println(a==b);  <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(a.equals(b)); <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(c.equals(d)); <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(c==d);    <span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(a.equals(c));  <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(a==c);     <span class=\"comment\">//false</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h1 id=\"JDK8之前日期时间API\"><a href=\"#JDK8之前日期时间API\" class=\"headerlink\" title=\"JDK8之前日期时间API\"></a>JDK8之前日期时间API</h1><p><img src=\"/posts/6c6d8dca/\"><img src=\"/posts/6c6d8dca/1.png\" alt=\"1\" style=\"zoom:50%;\"></p>\n<h1 id=\"JDK8中新日期时间API\"><a href=\"#JDK8中新日期时间API\" class=\"headerlink\" title=\"JDK8中新日期时间API\"></a>JDK8中新日期时间API</h1>","categories":["Java"],"tags":["java"]},{"title":"在Linux里配置静态IP","url":"/posts/b8f25ef1/","content":"<h1 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h1><p>解决 VMware 虚拟机频繁变动 IP 的问题</p>\n<p><code>按以下步骤</code></p>\n<h1 id=\"保留一个网络配置器设置\"><a href=\"#保留一个网络配置器设置\" class=\"headerlink\" title=\"保留一个网络配置器设置\"></a>保留一个网络配置器设置</h1><p><strong>步骤：</strong></p>\n<p>右键创建的虚拟机–》》设置把网络适配器设置 VMnet8(NAT) 多余的网络适配器移除，保留一个</p>\n<img src=\"/posts/b8f25ef1/1.png\" style=\"zoom: 80%;\">\n\n<p><code>如果要设置多台，就得每台重复此步骤</code></p>\n<h1 id=\"Window网络适配器设置\"><a href=\"#Window网络适配器设置\" class=\"headerlink\" title=\"Window网络适配器设置\"></a>Window网络适配器设置</h1><p><strong>步骤：</strong></p>\n<p>点击VMnet8网络适配器–》》右键属性–》》lnternet协议版本4 (TCP/IPv4)</p>\n<img src=\"/posts/b8f25ef1/2.png\" style=\"zoom: 80%;\">\n\n<h1 id=\"虚拟网络编辑器设置\"><a href=\"#虚拟网络编辑器设置\" class=\"headerlink\" title=\"虚拟网络编辑器设置\"></a>虚拟网络编辑器设置</h1><p><strong>步骤：</strong></p>\n<p>编辑–》虚拟网络编辑器</p>\n<img src=\"/posts/b8f25ef1/3.png\" style=\"zoom: 80%;\">\n\n<h1 id=\"进入虚拟机设置\"><a href=\"#进入虚拟机设置\" class=\"headerlink\" title=\"进入虚拟机设置\"></a>进入虚拟机设置</h1><p><strong>步骤：</strong></p>\n<ol>\n<li><strong>命令：</strong></li>\n</ol>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/network-scripts/</span><br><span class=\"line\">ip addr</span><br><span class=\"line\">mv ifcfg-enp0s3 ifcfg-16777736   </span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"red\">下方 eno16777736即为网卡名(不同环境条件情况下为不同，大多数为ifcfg-ens33，记住MAC地址即可)，mv 重命名 ifcfg-enp0s3 为 ifcfg-16777736(网卡名)</font></strong></p>\n<ol start=\"2\">\n<li><strong>进入 ifcfg-16777736 更改配置文件：</strong></li>\n</ol>\n<p><strong><font color=\"red\">关键点在于HWADDR 绑定 网卡对应的MAC地址！！！</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ONBOOT=yes</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">HWADDR=#MAC地址</span><br><span class=\"line\">IPADDR=#想要的固定ip</span><br><span class=\"line\">GATEWAY=#VMnet的网关ip</span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"/posts/b8f25ef1/4.png\" style=\"zoom: 80%;\">\n\n<img src=\"/posts/b8f25ef1/8.png\" style=\"zoom:80%;\">\n\n<p><strong>最后reboot重启虚拟机，ifconfig 查看 ip 已经生效！！！</strong></p>\n<p><img src=\"/posts/b8f25ef1/9.png\"></p>\n<hr>\n<h1 id=\"引用链接\"><a href=\"#引用链接\" class=\"headerlink\" title=\"引用链接\"></a>引用链接</h1><blockquote>\n<p>本文为自己学习步骤笔记，更详情参考<a href=\"https://blog.hayasa.xyz/2021/11/16/VMwareStaticIP/\">VMware 配置固定ip</a></p>\n</blockquote>\n","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"数组的排序","url":"/posts/1960323c/","content":"<h1 id=\"八大排序：\"><a href=\"#八大排序：\" class=\"headerlink\" title=\"八大排序：\"></a>八大排序：</h1><p><a href=\"https://blog.csdn.net/daocaokafei/article/details/122442020\">https://blog.csdn.net/daocaokafei/article/details/122442020</a></p>\n","categories":["Java"],"tags":["数据结构"]},{"title":"爬虫笔记","url":"/posts/1db3959d/","content":"<p>pip指令:</p>\n<figure class=\"highlight cmd\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pip install &lt;包名&gt; 安装指定的包</span><br><span class=\"line\">pip uninstall &lt;包名&gt; 删除指定的包</span><br><span class=\"line\">pip list 显示已安装的包</span><br><span class=\"line\">pip freeze 显示已经安装的包，并且以指定的格式显示</span><br></pre></td></tr></tbody></table></figure>\n<p>修改pip下载源：</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pip install 包名 -i 国内源地址</span><br><span class=\"line\">豆瓣源：https://pypi.mirrors.ustc.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<p><strong>常用请求头信息</strong></p>\n<ul>\n<li>User-Agent: 请求载体的身份标识</li>\n<li>Connection: 请求完毕后，是断开连接还是不保持连接<br>常用响应头信息</li>\n<li>Content-Tyoe:服务器响应回客户端的数据类型<br>https协议：</li>\n<li>安全的超文本传输协议<br>加密方式</li>\n<li>对称密钥加密</li>\n<li>非对称密钥加密</li>\n<li>证书密钥加密<br>request模块<br>request模块：<br>是python中原生的一款基于网络请求的模块。功能非常强大，，简单便捷效率极高<br>作用：<br>模拟浏览器发出请求<br>如何使用：(requests模块编码流程)</li>\n<li>指定url</li>\n<li>发请求</li>\n<li>获取相应数据</li>\n<li>持久化存储<br>环境安装:<figure class=\"highlight cmd\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<p><strong>实战编码：</strong></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">\"http://www.bilibili.com\"</span>  <span class=\"comment\"># 指定url</span></span><br><span class=\"line\">reponse = requests.get(url=url)  <span class=\"comment\"># 发起请求,get方法回返回一个响应对象</span></span><br><span class=\"line\">page_text = reponse.text  <span class=\"comment\"># 获取响应数据text饭hi i的是字符串形式的响应数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">'./bilibili.html'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'爬取数据结束！！!'</span>)</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>网页采集器：</strong></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">headers = {  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36'</span></span><br><span class=\"line\">}</span><br><span class=\"line\">url = <span class=\"string\">\"https://www.sogou.com/web?\"</span></span><br><span class=\"line\">kw = <span class=\"built_in\">input</span>(<span class=\"string\">\"请输入：\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">param = {  <span class=\"comment\"># 处理url携带参数</span></span><br><span class=\"line\">    <span class=\"string\">'query'</span>: kw</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">#对指定的url发起的请求对应的url是携带参数的</span></span><br><span class=\"line\">response = requests.get(url=url,params=param,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page_text = response.text</span><br><span class=\"line\">fileName = kw + <span class=\"string\">'.html'</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fileName, <span class=\"string\">'保存成功！！！'</span>)</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>百度翻译</strong>：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">post_url = <span class=\"string\">'https://fanyi.baidu.com/sug'</span>  <span class=\"comment\"># 1.指定url</span></span><br><span class=\"line\">headers = {  <span class=\"comment\"># 2.UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36'</span></span><br><span class=\"line\">}</span><br><span class=\"line\">word = <span class=\"built_in\">input</span>(<span class=\"string\">'请输入:'</span>)</span><br><span class=\"line\">data = {  <span class=\"comment\"># 3.post请求参数处理(同get请求一致)  参数处理</span></span><br><span class=\"line\">    <span class=\"string\">'kw'</span>: word</span><br><span class=\"line\">}</span><br><span class=\"line\">response = requests.post(url=post_url, data=data, headers=headers)  <span class=\"comment\"># 请求发送</span></span><br><span class=\"line\"><span class=\"comment\"># 5.获取响应数据对象：json()方法返回的是obj json类型</span></span><br><span class=\"line\">dic_obj = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fileName = word + <span class=\"string\">'.json'</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(fileName, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic_obj)</span><br></pre></td></tr></tbody></table></figure>\n<p><strong>药监总局：</strong></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首页  http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\">#首页和页面的区别就是在后面加了id，所以先去爬取每个页面的id,存储起来，然后for循环post将结果存进list,然后再格式化存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">headers = {  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36'</span></span><br><span class=\"line\">}</span><br><span class=\"line\">url = <span class=\"string\">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'</span></span><br><span class=\"line\">id_list = []  <span class=\"comment\"># 存储企业的id</span></span><br><span class=\"line\">all_data_list = []  <span class=\"comment\"># 存储所有的企业的id</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">20</span>):   <span class=\"comment\">#爬取前20页</span></span><br><span class=\"line\">    page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">    data = {</span><br><span class=\"line\">        <span class=\"string\">'on'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">        <span class=\"string\">'page'</span>: page,</span><br><span class=\"line\">        <span class=\"string\">'pageSize'</span>: <span class=\"string\">'15'</span>,</span><br><span class=\"line\">        <span class=\"string\">'productName'</span>: <span class=\"string\">' '</span>,</span><br><span class=\"line\">        <span class=\"string\">'conditionType'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'applyname'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'applysn'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> zw <span class=\"keyword\">in</span> json_ids[<span class=\"string\">'list'</span>]:  <span class=\"comment\"># 批量获取ID，储存id</span></span><br><span class=\"line\">        id_list.append(zw[<span class=\"string\">'ID'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">post_url = <span class=\"string\">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:  <span class=\"comment\"># 把储存的id赋值给字典</span></span><br><span class=\"line\">    data = {</span><br><span class=\"line\">        <span class=\"string\">'id'</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    detial_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">    all_data_list.append(detial_json)  <span class=\"comment\"># 存进列表</span></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">'./zw,json'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'ovver!!!'</span>)<span class=\"comment\"># 首页  http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\">#首页和页面的区别就是在后面加了id，所以先去爬取每个页面的id,存储起来，然后for循环post将结果存进list,然后再格式化存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">headers = {  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36'</span></span><br><span class=\"line\">}</span><br><span class=\"line\">url = <span class=\"string\">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList'</span></span><br><span class=\"line\">id_list = []  <span class=\"comment\"># 存储企业的id</span></span><br><span class=\"line\">all_data_list = []  <span class=\"comment\"># 存储所有的企业的id</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">20</span>):   <span class=\"comment\">#爬取前20页</span></span><br><span class=\"line\">    page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">    data = {</span><br><span class=\"line\">        <span class=\"string\">'on'</span>: <span class=\"string\">'true'</span>,</span><br><span class=\"line\">        <span class=\"string\">'page'</span>: page,</span><br><span class=\"line\">        <span class=\"string\">'pageSize'</span>: <span class=\"string\">'15'</span>,</span><br><span class=\"line\">        <span class=\"string\">'productName'</span>: <span class=\"string\">' '</span>,</span><br><span class=\"line\">        <span class=\"string\">'conditionType'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'applyname'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'applysn'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> zw <span class=\"keyword\">in</span> json_ids[<span class=\"string\">'list'</span>]:  <span class=\"comment\"># 批量获取ID，储存id</span></span><br><span class=\"line\">        id_list.append(zw[<span class=\"string\">'ID'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">post_url = <span class=\"string\">'http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:  <span class=\"comment\"># 把储存的id赋值给字典</span></span><br><span class=\"line\">    data = {</span><br><span class=\"line\">        <span class=\"string\">'id'</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    detial_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">    all_data_list.append(detial_json)  <span class=\"comment\"># 存进列表</span></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">'./zw,json'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'ovver!!!'</span>)</span><br></pre></td></tr></tbody></table></figure>\n","categories":["Python"],"tags":["python"]},{"title":"部署Hive","url":"/posts/4b2a10e2/","content":"<h1 id=\"虚拟机环境准备\"><a href=\"#虚拟机环境准备\" class=\"headerlink\" title=\"虚拟机环境准备\"></a>虚拟机环境准备</h1><p><strong>例如：三台主机，nano为Master(主人)，其他主机为Slave(奴隶)</strong></p>\n<table>\n<thead>\n<tr>\n<th>我的计算机</th>\n<th>nano</th>\n<th>nano-slave1</th>\n<th>nano-slave2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP</td>\n<td>192.168.100.200</td>\n<td>192.168.100.201</td>\n<td>192.168.100.202</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>hosts(域名)</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td>mysql-5.7.37</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>hive</td>\n<td>hive-2.3.4</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>先确保安装了mysql</strong></p>\n<p><a href=\"https://blog-zw.top/posts/a91489ef/\">在Linux里安装mysql</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><h2 id=\"准备hive-tar-gz安装包\"><a href=\"#准备hive-tar-gz安装包\" class=\"headerlink\" title=\"准备hive.tar.gz安装包\"></a>准备hive.tar.gz安装包</h2><p><a href=\"https://archive.apache.org/dist/hadoop/common/\">hive下载</a></p>\n<blockquote>\n<p>例：下载  hive-2.3.4-bin.tar.gz版本</p>\n</blockquote>\n<h2 id=\"解压安装包，配置环境\"><a href=\"#解压安装包，配置环境\" class=\"headerlink\" title=\"解压安装包，配置环境\"></a>解压安装包，配置环境</h2><p><strong><font color=\"blue\">在opt目录下创建 module目录</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module</span><br></pre></td></tr></tbody></table></figure>\n<p><strong><font color=\"blue\">解压安装包至opt/module目录,并重命名</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf apache-hive-2.3.4-bin.tar.gz -C /opt/module/</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv apache-hive-2.3.4-bin/ hive-2.3.4</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">配置环境变量</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">对应实际安装目录路径</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">export HIVE_HOME=/opt/module/hive-2.3.4</span><br><span class=\"line\">export PATH=$PATH:$HIVE_HOME/bin</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">刷新</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">source /etc/profil</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置元数据到MySql\"><a href=\"#配置元数据到MySql\" class=\"headerlink\" title=\"配置元数据到MySql\"></a>配置元数据到MySql</h2><p><strong>jdbc驱动版本与mysql数据库版本有一定的对应关系</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">Connector/J 5.1 支持Mysql 4.1、Mysql 5.0、Mysql 5.1、Mysql 6.0 alpha这些版本。</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/developer_chan/p/8602267.html\">MySQL JDBC驱动版本与MySQL数据库版本对应关系</a></p>\n<p><strong><font color=\"ondine\">我们的mysql版本为 5.7.37，所以我们选择 JDBC 5.1.37（5.1版本） 驱动版本进行下载</font></strong></p>\n<p><a href=\"https://downloads.mysql.com/archives/c-j/\">MySQL的 JDBC驱动程序下载</a></p>\n<p><strong>将 MySQL的 JDBC驱动上传到 Hive的 lib目录下</strong></p>\n<img src=\"/posts/4b2a10e2/1.png\" style=\"zoom:50%;\">\n\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><h2 id=\"hive-site-xml\"><a href=\"#hive-site-xml\" class=\"headerlink\" title=\"hive-site.xml\"></a>hive-site.xml</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd $HIVE_HOME/conf</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong>在$HIVE_HOME/conf目录下新建 hive-site.xml文件</strong></p>\n<p><strong><font color=\"orange\">注意！这里配置对应MySQL的账号密码,这里创建的元数据库名字为：hive,对应MySQL</font></strong></p>\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">\"1.0\"</span>?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml-stylesheet type=<span class=\"string\">\"text/xsl\"</span> href=<span class=\"string\">\"configuration.xsl\"</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--连接数据库URL(必选参数)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://192.168.100.200:3306/hive?createDatabaseIfNotExist=true<span class=\"symbol\">&amp;amp;</span>useSSL=false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--连接数据驱动(必选参数)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--数据库连接用户名(必选参数)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--数据库连接密码(必选参数)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--验证元数据的一致性，默认为false(可选参数)--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.schema.verification<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hive.metastore.warehouse.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/user/hive/warehouse<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>location of default database for the warehouse<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"初始化元数据库\"><a href=\"#初始化元数据库\" class=\"headerlink\" title=\"初始化元数据库\"></a>初始化元数据库</h2><p><strong>进入 hive-2.3.4/bin 目录</strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd $HIVE_HOME/bin</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">schematool -dbType mysql -initSchema</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/4b2a10e2/5.png\"></p>\n<h1 id=\"进入hive-shell\"><a href=\"#进入hive-shell\" class=\"headerlink\" title=\"进入hive shell\"></a>进入hive shell</h1><p><strong><font color=\"blue\">启动HDFS以及YARN集群</font><font color=\"orange\">确保都启动了！！！</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">start-dfs.sh</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">start-yarn.sh</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hive</span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"/posts/4b2a10e2/6.png\" style=\"zoom:50%;\">\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p> <strong><font color=\"ondine\">创建数据库和数据表</font></strong></p>\n<p><strong><font color=\"blue\">创建数据库</font></strong></p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database db_test;</span><br></pre></td></tr></tbody></table></figure>\n<p><strong><font color=\"blue\">打开数据库</font></strong></p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">use db_test;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">创建表</font></strong></p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tb_test(id <span class=\"type\">int</span>,name <span class=\"type\">varchar</span>(<span class=\"number\">8</span>));</span><br></pre></td></tr></tbody></table></figure>\n<p><strong><font color=\"blue\">显示表</font></strong></p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> tables;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">插入数据</font></strong></p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> tb_test <span class=\"keyword\">values</span>(<span class=\"number\">1</span>,<span class=\"string\">'zw'</span>);</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">查询数据</font></strong></p>\n<figure class=\"highlight sql\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> tb_test;</span><br></pre></td></tr></tbody></table></figure>\n\n<p> <img src=\"/posts/4b2a10e2/7.png\"></p>\n<p><strong><font color=\"ondine\">打开hadoop&nbsp; 查看数据文件</font></strong></p>\n<p><img src=\"/posts/4b2a10e2/8.png\"></p>\n<hr>\n<center><font color=\"pink\">✿✿ヽ(°▽°)ノ✿完结撒花！</font></center>\n\n","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"部署Spark","url":"/posts/60f4196a/","content":"<h1 id=\"虚拟机环境准备\"><a href=\"#虚拟机环境准备\" class=\"headerlink\" title=\"虚拟机环境准备\"></a>虚拟机环境准备</h1><p><strong>例如：三台主机，nano为Master(主人)，其他主机为Slave(奴隶)</strong></p>\n<table>\n<thead>\n<tr>\n<th>我的计算机</th>\n<th>nano</th>\n<th>nano-slave1</th>\n<th>nano-slave1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP</td>\n<td>192.168.100.200</td>\n<td>192.168.100.201</td>\n<td>192.168.100.202</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>hosts(域名)</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n</tr>\n<tr>\n<td>hadoop</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n</tr>\n<tr>\n<td>spark-yarn</td>\n<td>spark-2.1.1</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>先确保安装了Hadoop，jdk</strong></p>\n<p><a href=\"https://blog-zw.top/posts/803094f7/#more\">Hadoop全分布式搭建</a></p>\n<p><a href=\"https://blog-zw.top/posts/cccf557c/\">在Linux里安装jdk</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p><strong>准备spark-2.1.1-bin-hadoop2.7.tar.gz</strong></p>\n<p><a href=\"https://archive.apache.org/dist/spark/spark-2.1.1/\">spark下载</a></p>\n<blockquote>\n<p>例：下载  spark-2.1.1-bin-hadoop2.7.tar.gz版本</p>\n</blockquote>\n<hr>\n<h1 id=\"Spark-yarn\"><a href=\"#Spark-yarn\" class=\"headerlink\" title=\"Spark-yarn\"></a>Spark-yarn</h1><h2 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h2><p><strong><font color=\"blue\">在opt目录下创建 module目录</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">解压安装包至opt/module目录,并重命名</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf spark-2.1.1-bin-hadoop2.7.tgz -C /opt/module/</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv spark-2.1.1-bin-hadoop2.7/ spark-2.1.1-yarn</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">配置Hadoop环境配置</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">#Spark_HOME_Yarn</span><br><span class=\"line\">export SPARK_HOME=/opt/module/spark-2.1.1-yarn</span><br><span class=\"line\">export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p><strong><font color=\"blue\">在 hadoop 的配置文件/opt/module/hadoop/etc/hadoop/yarn-site.xml 添加</font><font color=\"orange\">并分发！！！</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /opt/module/hadoop-2.7.7/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight xml\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Spark on Yarn--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--是否启动一个线程检查每个任务正使用的物理内存量，如果任务超出分配值，则直接将其杀掉，默认是true --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--是否启动一个线程检查每个任务正使用的虚拟内存量，如果任务超出分配值，则直接将其杀掉，默认是 true --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">修改 spark-2.1.1-yarn/conf/spark-env.sh</font><font color=\"orange\">换成自己的JAVA_HOME和HADOOP_HOME/etc/hadoop</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv spark-env.sh.template spark-env.sh</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/opt/module/jdk1.8.0_181</span><br><span class=\"line\">YARN_CONF_DIR=/opt/module/hadoop-2.7.7/etc/hadoop</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">启动HDFS以及YARN集群</font><font color=\"orange\">确保都启动了！！！</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">start-dfs.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">start-yarn.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p> <strong><font color=\"blue\">提交应用</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">bin/spark-submit \\</span><br><span class=\"line\">--class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">--master yarn \\</span><br><span class=\"line\">--deploy-mode cluster \\</span><br><span class=\"line\">examples/jars/spark-examples_2.11-2.1.1.jar \\</span><br><span class=\"line\">10</span><br></pre></td></tr></tbody></table></figure>\n\n<p>查看<a href=\"192.168.100.201:8088\">192.168.100.201:8088</a>页面</p>\n<p><img src=\"/posts/60f4196a/1.png\"></p>\n<h2 id=\"配置历史服务器\"><a href=\"#配置历史服务器\" class=\"headerlink\" title=\"配置历史服务器\"></a>配置历史服务器</h2><p> <strong><font color=\"blue\">配置slaves文件</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv slaves.template slaves</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">master</span><br><span class=\"line\">slave1</span><br><span class=\"line\">slave2</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">修改 spark-defaults.conf.template 文件名为 spark-defaults.conf</font></strong><br><strong><font color=\"ondine\">spark-default.conf 文件，配置日志存储路径</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv spark-defaults.conf.template spark-defaults.conf</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">spark.eventLog.enabled true</span><br><span class=\"line\">spark.eventLog.dir hdfs://192.168.100.200:8020/directory</span><br><span class=\"line\"></span><br><span class=\"line\">spark.yarn.historyServer.address=192.168.100.200:18080</span><br><span class=\"line\">spark.history.ui.port=18080</span><br></pre></td></tr></tbody></table></figure>\n\n<p><u><font color=\"red\">注意：需要启动 hadoop 集群，HDFS 上的目录需要提前存在</font></u></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">hadoop fs -mkdir /directory</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">修改 spark-env.sh 文件, 添加日志配置</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">export SPARK_HISTORY_OPTS=\"</span><br><span class=\"line\">-Dspark.history.ui.port=18080</span><br><span class=\"line\">-Dspark.history.fs.logDirectory=hdfs://192.168.200.200:8020/directory</span><br><span class=\"line\">-Dspark.history.retainedApplications=30\"</span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>参数 1 含义：WEB UI 访问的端口号为 18080 </li>\n<li>参数 2 含义：指定历史服务器日志存储路径 spark.eventLog.enabled true spark.eventLog.dir hdfs://192.168.100.200:8020/directory </li>\n<li>参数 3 含义：指定保存 Application 历史记录的个数，如果超过这个值，旧的应用程序信息将被删 除，这个是内存中的应用数，而不是页面上显示的应用数。</li>\n</ul>\n<p><strong><font color=\"blue\">启动历史服务</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">sbin/start-history-server.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/60f4196a/2.png\"></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>$$<br>提交应用，计算\\pi<br>$$</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">bin/spark-submit \\</span><br><span class=\"line\">--class org.apache.spark.examples.SparkPi \\</span><br><span class=\"line\">--master yarn \\</span><br><span class=\"line\">--deploy-mode client \\</span><br><span class=\"line\">examples/jars/spark-examples_2.11-2.1.1.jar \\</span><br><span class=\"line\">10</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/60f4196a/3.png\"></p>\n<p>Web 页面查看日志:<a href=\"192.168.100.201:8088\">192.168.100.201:8088</a></p>\n<img src=\"/posts/60f4196a/4.png\" style=\"zoom: 50%;\">\n\n<hr>\n<center><font color=\"pink\">✿✿ヽ(°▽°)ノ✿完结撒花！</font></center>","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"部署ZooKeeper","url":"/posts/1875b86c/","content":"<h1 id=\"虚拟机环境准备\"><a href=\"#虚拟机环境准备\" class=\"headerlink\" title=\"虚拟机环境准备\"></a>虚拟机环境准备</h1><p><strong>例如：三台主机，nano为Master(主人)，其他主机为Slave(奴隶)</strong></p>\n<table>\n<thead>\n<tr>\n<th>我的计算机</th>\n<th>nano</th>\n<th>nano-slave1</th>\n<th>nano-slave1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP</td>\n<td>192.168.100.200</td>\n<td>192.168.100.201</td>\n<td>192.168.100.202</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>hosts(域名)</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n</tr>\n<tr>\n<td>hadoop</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>zookeep-3.4.6</td>\n<td>zookeep-3.4.6</td>\n<td>zookeep-3.4.6</td>\n</tr>\n</tbody></table>\n<p><strong>先确保安装了Hadoop，jdk</strong></p>\n<p><a href=\"https://blog-zw.top/posts/803094f7/#more\">Hadoop全分布式搭建</a></p>\n<p><a href=\"https://blog-zw.top/posts/cccf557c/\">在Linux里安装jdk</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p><strong>准备zookeeper-3.4.6.tar.gz</strong></p>\n<p><a href=\"https://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/\">zookeeper下载</a></p>\n<blockquote>\n<p>例：下载 zookeeper-3.4.6.tar.gz 版本</p>\n</blockquote>\n<h1 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h1><h2 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h2><p><strong><font color=\"blue\">在opt目录下创建 module目录</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">解压安装包至opt/module目录</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf zookeeper-3.4.6.tar.gz -C /opt/module/</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置服务器编号\"><a href=\"#配置服务器编号\" class=\"headerlink\" title=\"配置服务器编号\"></a>配置服务器编号</h2><p><strong><font color=\"blue\">在/opt/module/zookeeper-3.4.6 这个目录下创建 zkData</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module/zookeeper-3.4.6/zkData</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">在/opt/module/zookeeper-3.4.6/zkData 目录下创建一个 myid 的文件</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim myid</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">在文件中添加与 server 对应的编号（注意：上下不要有空行，左右不要有空格）</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">分发zookeeper 到其他机器上，并分别在 slave1、slave2上修改 myid 文件中内容为 2、3</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scp -r /opt/module/zookeeper-3.4.6/ root@slave1:/opt/module/</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /opt/module/zookeeper-3.4.6/zkData/myid</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"配置zoo-cfg文件\"><a href=\"#配置zoo-cfg文件\" class=\"headerlink\" title=\"配置zoo.cfg文件\"></a>配置zoo.cfg文件</h2><p><strong><font color=\"blue\">重命名/opt/module/zookeeper-3.5.6/conf/zoo_sample.cfg</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv /opt/module/zookeeper-3.4.6/conf/zoo_sample.cfg /opt/module/zookeeper-3.4.6/conf/zoo.cfg</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">打开 zoo.cfg 文件</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /opt/module/zookeeper-3.4.6/conf/zoo.cfg</span><br></pre></td></tr></tbody></table></figure>\n<p><strong><font color=\"blue\">修改数据存储路径配置,增加如下配置</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">dataDir=/opt/module/zookeeper-3.4.6/zkData</span><br><span class=\"line\">#######################cluster##########################</span><br><span class=\"line\">server.1=192.168.100.200:2888:3888</span><br><span class=\"line\">server.2=192.168.100.201:2888:3888</span><br><span class=\"line\">server.3=192.168.100.202:2888:3888</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"pink\">PS：</font><font color=\"ondine\">上面配置参数解读</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">server.A=B:C:D</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">A:是一个数字，表示这个是第几号服务器,集群模式下配置一个文件 myid，这个文件在 dataDir 目录下，这个文件里面有一个数据</span><br><span class=\"line\">就是 A 的值，Zookeeper 启动时读取此文件，拿到里面的数据与 zoo.cfg 里面的配置信息比</span><br><span class=\"line\">较从而判断到底是哪个 server;</span><br><span class=\"line\"></span><br><span class=\"line\">B:是这个服务器的地址;</span><br><span class=\"line\"></span><br><span class=\"line\">C:是这个服务器 Follower 与集群中的 Leader 服务器交换信息的端口；</span><br><span class=\"line\"></span><br><span class=\"line\">D:是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的</span><br><span class=\"line\">Leader，而这个端口就是用来执行选举时服务器相互通信的端口。</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">分发zoo.cfg文件到其他机器上</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scp -r /opt/module/zookeeper-3.4.6/conf/zoo.cfg root@slave1:/opt/module/zookeeper-3.4.6/conf/</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"集群启动\"><a href=\"#集群启动\" class=\"headerlink\" title=\"集群启动\"></a>集群启动</h2><p><strong><font color=\"orange\">三台需要关闭防火墙</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld.service</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">systemctl disable firewalld.service</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">分别启动 Zookeeper</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">/opt/module/zookeeper-3.4.6/bin/zkServer.sh start</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">查看状态</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">/opt/module/zookeeper-3.4.6/bin/zkServer.sh status</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">重启ZK服务</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">/opt/module/zookeeper-3.4.6/bin/zkServer.sh restart</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"pink\">结果：</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@master conf]# /opt/module/zookeeper-3.4.6/bin/zkServer.sh status</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/module/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@slave1 ~]# /opt/module/zookeeper-3.4.6/bin/zkServer.sh status</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/module/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: follower</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@slave2 ~]# /opt/module/zookeeper-3.4.6/bin/zkServer.sh status</span><br><span class=\"line\">JMX enabled by default</span><br><span class=\"line\">Using config: /opt/module/zookeeper-3.4.6/bin/../conf/zoo.cfg</span><br><span class=\"line\">Mode: leader</span><br></pre></td></tr></tbody></table></figure>\n\n<p><a href=\"https://blog.csdn.net/qq_43553032/article/details/126002002\">集群的坑</a></p>\n<hr>\n<center><font color=\"pink\">✿✿ヽ(°▽°)ノ✿完结撒花！</font></center>\n\n","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"部署flink","url":"/posts/fb9eca5e/","content":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p><strong>准备flink-1.10.1-bin-scala_2.12.tgz安装包</strong></p>\n<p><a href=\"https://archive.apache.org/dist/flink/flink-1.10.1/\">flink下载</a></p>\n<blockquote>\n<p>例：下载  flink-1.10.1-bin-scala_2.12.tgz版本</p>\n</blockquote>\n"},{"title":"部署flume","url":"/posts/2237ee8e/","content":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p><strong>准备flume-1.7.0.tar.gz安装包</strong></p>\n<p><a href=\"https://archive.apache.org/dist/flume/1.7.0/\">flume下载</a></p>\n<blockquote>\n<p>例：下载  apache-flume-1.7.0.tar.gz版本</p>\n</blockquote>\n"},{"title":"部署kafka","url":"/posts/679a8c54/","content":"<h1 id=\"虚拟机环境准备\"><a href=\"#虚拟机环境准备\" class=\"headerlink\" title=\"虚拟机环境准备\"></a>虚拟机环境准备</h1><p><strong>例如：三台主机，nano为Master(主人)，其他主机为Slave(奴隶)</strong></p>\n<table>\n<thead>\n<tr>\n<th>我的计算机</th>\n<th>nano</th>\n<th>nano-slave1</th>\n<th>nano-slave1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP</td>\n<td>192.168.100.200</td>\n<td>192.168.100.201</td>\n<td>192.168.100.202</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>hosts(域名)</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n</tr>\n<tr>\n<td>hadoop</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>zookeep-3.4.6</td>\n<td>zookeep-3.4.6</td>\n<td>zookeep-3.4.6</td>\n</tr>\n<tr>\n<td>kafka</td>\n<td>kafka_2.12-2.8.2</td>\n<td>kafka_2.12-2.8.2</td>\n<td>kafka_2.12-2.8.2</td>\n</tr>\n</tbody></table>\n<p><strong>先确保安装了Hadoop，jdk,zookeeper</strong></p>\n<p><a href=\"https://blog-zw.top/posts/803094f7/#more\">Hadoop全分布式搭建</a></p>\n<p><a href=\"https://blog-zw.top/posts/cccf557c/\">在Linux里安装jdk</a></p>\n<p><a href=\"https://blog-zw.top/posts/1875b86c/\">部署ZooKeeper</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p><strong>准备kafka_2.12-2.8.2.tgz</strong></p>\n<p><a href=\"http://mirrors.aliyun.com/apache/kafka/2.8.2/?spm=a2c6h.25603864.0.0.3c7d126ermiGVq\">kafka下载</a></p>\n<blockquote>\n<p>例：下载 kafka_2.12-2.8.2.tgz 版本</p>\n</blockquote>\n<h1 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h1><h2 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h2><p><strong><font color=\"blue\">在opt目录下创建 module目录</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">解压安装包至opt/module目录</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf kafka_2.12-2.8.2.tgz -C /opt/module/</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"创建logs文件夹\"><a href=\"#创建logs文件夹\" class=\"headerlink\" title=\"创建logs文件夹\"></a>创建logs文件夹</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module/kafka_2.12-2.8.2/logs</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">logs 既是数据存储目录，也是日志存储目录</font></strong></p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /opt/module/kafka_2.12-2.8.2/config/server.properties</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">进入文件修改(找到对应位置，没有则增加)</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">broker.id=0</span><br><span class=\"line\">delete.topic.enable=true</span><br><span class=\"line\">log.dirs=/opt/module/kafka_2.12-2.8.2/logs</span><br><span class=\"line\">zookeeper.connect=192.168.100.200:2181,192.168.100.201:2181,192.168.100.202:2181</span><br></pre></td></tr></tbody></table></figure>\n\n<p>#broker.id的全局唯一编号，不能重复(修改处) 此处3台节点都要修改</p>\n<p>#删除topic功能使能(修改处)</p>\n<p>#kafka运行日志存放的路径(修改处)</p>\n<p>#配置连接Zookeeper集群地址(修改处)</p>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"># KAFKA_HOME</span><br><span class=\"line\">export KAFKA_HOME=/opt/module/kafka_2.12-2.8.2</span><br><span class=\"line\">export PATH=$PATH:$KAFKA_HOME/bin</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"分发安装包和配置文件\"><a href=\"#分发安装包和配置文件\" class=\"headerlink\" title=\"分发安装包和配置文件\"></a>分发安装包和配置文件</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">scp -r /opt/module/kafka_2.12-2.8.2/ root@slave1:/opt/module/</span><br><span class=\"line\">scp -r /opt/module/kafka_2.12-2.8.2/ root@slave2:/opt/module/</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"orange\">分发安装包后一定要修改各个节点的/config/broker.id ！！！slave主机 改为 1、2</font></strong></p>\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><h2 id=\"集群启动zookeeper\"><a href=\"#集群启动zookeeper\" class=\"headerlink\" title=\"集群启动zookeeper\"></a>集群启动zookeeper</h2><p><strong><font color=\"ondine\">因为kafka依赖zk，所以先要启动zk</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">/opt/module/zookeeper-3.4.6/bin/zkServer.sh start</span><br><span class=\"line\">/opt/module/zookeeper-3.4.6/bin/zkServer.sh status</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"启动kafka-server-前台\"><a href=\"#启动kafka-server-前台\" class=\"headerlink\" title=\"启动kafka server(前台)\"></a>启动kafka server(前台)</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd /opt/module/kafka_2.12-2.8.2/bin</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-server-start.sh ../config/server.properties</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/679a8c54/1.png\"></p>\n<p><strong><font color=\"orange\">窗口会一直运行，输出结果前10行为成功，下面测试可选择进行</font></strong></p>\n<hr>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p><strong><font color=\"blue\">1. 进入bin目录</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd /opt/module/kafka_2.12-2.8.2/bin</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">2. 启动kafka server(后台运行)</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-server-start.sh -daemon ../config/server.properties</span><br></pre></td></tr></tbody></table></figure>\n<p><code>-daemon 参数挂起进程</code></p>\n<p><img src=\"/posts/679a8c54/7.png\"></p>\n<p><strong><font color=\"blue\">3. 查看端口已被监听，启动成功</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">ss -tlnp | grep 9092</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/679a8c54/2.png\"></p>\n<p><strong><font color=\"blue\">4. 在 master 创建 topic(主题)</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --create --zookeeper 192.168.100.200:2181 --replication-factor 1 --partitions 1 --topic topic1</span><br></pre></td></tr></tbody></table></figure>\n<p><img src=\"/posts/679a8c54/3.png\"></p>\n<p><strong><font color=\"blue\">5. 查看topic(主题) 信息</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --describe --zookeeper 192.168.100.200:2181 --topic topic1</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/679a8c54/4.png\"></p>\n<p><strong><font color=\"blue\">6. 在 master 启动<font color=\"red\">生产者控制台</font></font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-console-producer.sh --broker-list 192.168.100.200:9092 --topic topic1</span><br></pre></td></tr></tbody></table></figure>\n<p><strong><font color=\"ondine\">例：下方图片填写的为 发送的信息</font></strong><br><img src=\"/posts/679a8c54/5.png\"></p>\n<p><code>输入任意信息，然后消费者控制台可收到，发送的对应信息，关机后仍保存之前创建的 topic (主题)</code></p>\n<p><strong><font color=\"blue\">7.&nbsp; 启动<font color=\"red\">消费者控制台</font></font></strong></p>\n<p><code>打开集群任意主机,需启动 jps Kafka 进程 </code></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd /opt/module/kafka_2.12-2.8.2/bin</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-server-start.sh -daemon ../config/server.properties</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-console-consumer.sh --bootstrap-server 192.168.100.200:9092 --topic topic1 --from-beginning</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">此时在</font><font color=\"red\">生产者控制台</font><font color=\"ondine\">发一条测试消息，<font color=\"red\">消费者控制台</font>即可收到</font></strong></p>\n<p><img src=\"/posts/679a8c54/6.png\"></p>\n<hr>\n<h1 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h1><p><strong><font color=\"ondine\">关闭kafka服务命令</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-server-stop.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/679a8c54/8.png\"></p>\n<p><strong><font color=\"ondine\">在zk中查看创建的主题</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --list --bootstrap-server 192.168.100.200:9092,192.168.100.201:9092,192.168.100.202:9092</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/679a8c54/9.png\"></p>\n<p><strong><font color=\"ondine\">创建的主题：topic2</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --create --zookeeper 192.168.100.200:2181 --replication-factor 1 --partitions 1 --topic topic2</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"ondine\">删除创建的主题：topic2</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">kafka-topics.sh --delete --topic topic2 --zookeeper 192.168.100.200:2181</span><br></pre></td></tr></tbody></table></figure>\n\n<p><img src=\"/posts/679a8c54/10.png\"></p>\n<p><code>需在server.properties中增加设置，默认未开启delete.topic.enable=true,我们前面配置了</code></p>\n<hr>\n<center><font color=\"pink\">✿✿ヽ(°▽°)ノ✿完结撒花！</font></center>","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"部署sqoop","url":"/posts/661ed9f1/","content":"<h1 id=\"虚拟机环境准备\"><a href=\"#虚拟机环境准备\" class=\"headerlink\" title=\"虚拟机环境准备\"></a>虚拟机环境准备</h1><p><strong>例如：三台主机，nano为Master(主人)，其他主机为Slave(奴隶)</strong></p>\n<table>\n<thead>\n<tr>\n<th>我的计算机</th>\n<th>nano</th>\n<th>nano-slave1</th>\n<th>nano-slave2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP</td>\n<td>192.168.100.200</td>\n<td>192.168.100.201</td>\n<td>192.168.100.202</td>\n</tr>\n<tr>\n<td>hostname</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>hosts(域名)</td>\n<td>master</td>\n<td>slave1</td>\n<td>slave2</td>\n</tr>\n<tr>\n<td>JDK</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n<td>jdk1.8.0_181</td>\n</tr>\n<tr>\n<td>hadoop</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n<td>hadoop-2.7.7</td>\n</tr>\n<tr>\n<td>hive</td>\n<td>hive-2.3.4</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>zookeeper</td>\n<td>zookeep-3.4.6</td>\n<td>zookeep-3.4.6</td>\n<td>zookeep-3.4.6</td>\n</tr>\n<tr>\n<td>sqoop</td>\n<td>sqoop-1.4.2</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>先确保安装了Hadoop，jdk，zookeeper</strong></p>\n<p><a href=\"https://blog-zw.top/posts/803094f7/#more\">Hadoop全分布式搭建</a></p>\n<p><a href=\"https://blog-zw.top/posts/cccf557c/\">在Linux里安装jdk</a></p>\n<p><a href=\"https://blog-zw.top/posts/1875b86c/\">部署ZooKeeper</a></p>\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p><strong>准备sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz</strong></p>\n<p><a href=\"http://archive.apache.org/dist/sqoop/1.4.2/\">sqoop下载</a></p>\n<blockquote>\n<p>例：下载 sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz 版本</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h2><p><strong><font color=\"blue\">在opt目录下创建 module目录</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/module</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">解压安装包至opt/module目录，并重命名</font></strong></p>\n<figure class=\"highlight shell\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz -C /opt/module/</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv sqoop-1.4.2.bin__hadoop-2.0.0-alpha/ sqoop-1.4.2</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p><strong><font color=\"ondine\">Sqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">cd /opt/module/sqoop-1.4.2/conf/</span><br></pre></td></tr></tbody></table></figure>\n<p><strong><font color=\"blue\">重命名配置文件</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">mv sqoop-env-template.sh sqoop-env.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">修改配置文件</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">vim sqoop-env.sh</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">export HADOOP_COMMON_HOME=/opt/module/hadoop-2.7.7</span><br><span class=\"line\">export HADOOP_MAPRED_HOME=/opt/module/hadoop-2.7.7</span><br><span class=\"line\">export HIVE_HOME=/opt/module/hive-2.3.4</span><br><span class=\"line\">export ZOOKEEPER_HOME=/opt/module/zookeeper-3.4.6</span><br><span class=\"line\">export ZOOCFGDIR=/opt/module/zookeeper-3.4.6</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"blue\">拷贝jdbc驱动到sqoop的lib目录下</font></strong></p>\n<p><a href=\"https://downloads.mysql.com/archives/c-j/\">JDBC驱动程序下载</a></p>\n<blockquote>\n<p>我们选择 JDBC 5.1.37（5.1版本） 驱动版本进行下载,</p>\n</blockquote>\n<p><strong><font color=\"ondine\">下载 zip格式 进行解压上传mysql-connector-java-5.1.37-bin.jar 到sqoop的lib目录下</font></strong></p>\n<img src=\"/posts/661ed9f1/1.png\" style=\"zoom: 50%;\">\n\n<h2 id=\"验证Sqoop\"><a href=\"#验证Sqoop\" class=\"headerlink\" title=\"验证Sqoop\"></a>验证Sqoop</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">/opt/module/sqoop-1.4.2/bin/sqoop help</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"pink\">结果：</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@master ~]# /opt/module/sqoop-1.4.2/bin/sqoop help</span><br><span class=\"line\">Warning: /usr/lib/hbase does not exist! HBase imports will fail.</span><br><span class=\"line\">Please set $HBASE_HOME to the root of your HBase installation.</span><br><span class=\"line\">usage: sqoop COMMAND [ARGS]</span><br><span class=\"line\"></span><br><span class=\"line\">Available commands:</span><br><span class=\"line\">  codegen            Generate code to interact with database records</span><br><span class=\"line\">  create-hive-table  Import a table definition into Hive</span><br><span class=\"line\">  eval               Evaluate a SQL statement and display the results</span><br><span class=\"line\">  export             Export an HDFS directory to a database table</span><br><span class=\"line\">  help               List available commands</span><br><span class=\"line\">  import             Import a table from a database to HDFS</span><br><span class=\"line\">  import-all-tables  Import tables from a database to HDFS</span><br><span class=\"line\">  job                Work with saved jobs</span><br><span class=\"line\">  list-databases     List available databases on a server</span><br><span class=\"line\">  list-tables        List available tables in a database</span><br><span class=\"line\">  merge              Merge results of incremental imports</span><br><span class=\"line\">  metastore          Run a standalone Sqoop metastore</span><br><span class=\"line\">  version            Display version information</span><br><span class=\"line\"></span><br><span class=\"line\">See 'sqoop help COMMAND' for information on a specific command.</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"测试是否能够成功连接数据库\"><a href=\"#测试是否能够成功连接数据库\" class=\"headerlink\" title=\"测试是否能够成功连接数据库\"></a>测试是否能够成功连接数据库</h2><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">/opt/module/sqoop-1.4.2/bin/sqoop list-databases --connect jdbc:mysql://192.168.100.200:3306/ --username root --password 123456</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><font color=\"pink\">结果：</font></strong></p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">[root@master ~]# /opt/module/sqoop-1.4.2/bin/sqoop list-databases --connect jdbc:mysql://192.168.100.200:3306/ --username root --password 123456</span><br><span class=\"line\">Warning: /usr/lib/hbase does not exist! HBase imports will fail.</span><br><span class=\"line\">Please set $HBASE_HOME to the root of your HBase installation.</span><br><span class=\"line\">22/09/25 17:02:51 WARN tool.BaseSqoopTool: Setting your password on the command-line is insecure. Consider using -P instead.</span><br><span class=\"line\">22/09/25 17:02:51 INFO manager.MySQLManager: Preparing to use a MySQL streaming resultset.</span><br><span class=\"line\">information_schema</span><br><span class=\"line\">hive</span><br><span class=\"line\">mysql</span><br><span class=\"line\">performance_schema</span><br><span class=\"line\">sys</span><br></pre></td></tr></tbody></table></figure>\n\n<hr>\n<center><font color=\"pink\">✿✿ヽ(°▽°)ノ✿完结撒花！</font></center>\n\n","categories":["大数据部署"],"tags":["大数据部署"]},{"title":"面向对象 上","url":"/posts/1833/","content":"<h1 id=\"面向过程与面向对象-上\"><a href=\"#面向过程与面向对象-上\" class=\"headerlink\" title=\"面向过程与面向对象 上\"></a><center>面向过程与面向对象 上</center></h1><h3 id=\"面向过程与面向对象\"><a href=\"#面向过程与面向对象\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h3><ul>\n<li>二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，<font>强调的<br>是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对<br>象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</font></li>\n<li>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如<br>抽象、分类、继承、聚合、多态等。<h3 id=\"面向过程-POP-与-面向对象-OOP\"><a href=\"#面向过程-POP-与-面向对象-OOP\" class=\"headerlink\" title=\"面向过程(POP) 与 面向对象(OOP)\"></a>面向过程(POP) 与 面向对象(OOP)</h3></li>\n<li>封装 (Encapsulation)</li>\n<li>继承 (Inheritance)</li>\n<li>多态 (Polymorphism)<h3 id=\"面向过程与面向对象-1\"><a href=\"#面向过程与面向对象-1\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h3><h4 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程\"></a>面向过程</h4><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">1. 打开冰箱</span><br><span class=\"line\">2. 把大象装进冰箱</span><br><span class=\"line\">3. 把冰箱门关住</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">人{</span><br><span class=\"line\">    打开(冰箱){</span><br><span class=\"line\">        冰箱.开门();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    操作(大象){</span><br><span class=\"line\">        大象.进入(冰箱);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    关闭(冰箱){</span><br><span class=\"line\">        冰箱.关门();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">冰箱{</span><br><span class=\"line\">    开门(){}</span><br><span class=\"line\">    关门(){}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">大象{</span><br><span class=\"line\">    进入(冰箱){}</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"面向对象的思想概述\"><a href=\"#面向对象的思想概述\" class=\"headerlink\" title=\"面向对象的思想概述\"></a><center>面向对象的思想概述</center></h2></li>\n<li><h5 id=\"类-Class-和对象-Object-是面向对象的核心概念。\"><a href=\"#类-Class-和对象-Object-是面向对象的核心概念。\" class=\"headerlink\" title=\"类(Class)和对象(Object)是面向对象的核心概念。\"></a>类(Class)和对象(Object)是面向对象的核心概念。</h5></li>\n</ul>\n<ul>\n<li><blockquote>\n<p>类是对一类事物的描述，是抽象的、概念上的定义</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><h5 id=\"“万事万物皆对象”\"><a href=\"#“万事万物皆对象”\" class=\"headerlink\" title=\"“万事万物皆对象”\"></a>“万事万物皆对象”</h5></li>\n</ul>\n<ul>\n<li><blockquote>\n<p>可以理解为：类 = 抽象概念的人；对象 = 实实在在的某个人</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>面向对象程序设计的重点是类的设计</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>类的设计，其实就是类的成员的设计</p>\n</blockquote>\n<h2 id=\"面向对象的思想概述-1\"><a href=\"#面向对象的思想概述-1\" class=\"headerlink\" title=\"面向对象的思想概述\"></a><center>面向对象的思想概述</center></h2></li>\n</ul>\n<ul>\n<li>可以理解为：类 = 抽象概念的人；对象 = 实实在在的某个人</li>\n<li>面向对象程序设计的重点是类的设计</li>\n<li>类的设计，其实就是类的成员的设计</li>\n</ul>\n<h3 id=\"类的语法格式\"><a href=\"#类的语法格式\" class=\"headerlink\" title=\"类的语法格式\"></a><center>类的语法格式</center></h3><figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\">修饰符 class 类名{</span><br><span class=\"line\">    属性声明;</span><br><span class=\"line\">    方法声明;</span><br><span class=\"line\">}</span><br><span class=\"line\">说明：修饰符<span class=\"keyword\">public</span>:类可以被任意访问</span><br><span class=\"line\">    类的正文要用{ }扩起来</span><br><span class=\"line\"></span><br><span class=\"line\">举例：</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>{</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;              <span class=\"comment\">//声明私有变量 age</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showAge</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>{   <span class=\"comment\">//声明方法showAge()</span></span><br><span class=\"line\">            age=<span class=\"number\">1</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"对象的创建和使用\"><a href=\"#对象的创建和使用\" class=\"headerlink\" title=\"对象的创建和使用\"></a>对象的创建和使用</h3><ul>\n<li><blockquote>\n<p>创建对象语法： 类名 对象名 = new 类名();</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>使用“对象名.对象成员”的方式访问对象成员（包括属性和方法）</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>说明：如果创建了一个类的多个对象，对于类中定义的属性，每个对象都拥有各自的一套副本，且互不干扰。</li>\n</ul>\n<br>\n空指针异常：就是调用  .参数 如果点之前的结构是不是null,如果是null意味着没指针，没有指针指下面的结构，就是空指针\n\n\n<h2 id=\"对象的创建和使用：匿名对象\"><a href=\"#对象的创建和使用：匿名对象\" class=\"headerlink\" title=\"对象的创建和使用：匿名对象\"></a>对象的创建和使用：匿名对象</h2><pre><code>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。如： new Person().shout();\n1.如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。\n2.我们经常将匿名对象作为实参传递给一个方法调用。\n</code></pre>\n<p>实际使用传入匿名对象：</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">zhangshan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">zw</span> <span class=\"variable\">aa</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">zw</span>();</span><br><span class=\"line\">        aa.show(<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>());    <span class=\"comment\">//创建匿名对象</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">zw</span>{</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">(Student Stu)</span>{    <span class=\"comment\">//传入的时候是匿名对象</span></span><br><span class=\"line\">        Stu.play();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"打游戏\"</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n","categories":["Java"],"tags":["java"]},{"title":"面向过程：面向过程性能比面向对象高？？","url":"/posts/ac481412/","content":"<p>面向过程 ：面向过程性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。</p>\n<p>—-》》<br>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p>\n<p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p>\n<p>引用：<a href=\"https://github.com/Snailclimb/JavaGuide/issues/431\">https://github.com/Snailclimb/JavaGuide/issues/431</a></p>\n","categories":["Java"],"tags":["java"]}]