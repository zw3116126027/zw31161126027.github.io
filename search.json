[{"title":"HTML盒子模型","url":"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/","content":"<h1 id=\"关于HTML盒子模型的笔记\"><a href=\"#关于HTML盒子模型的笔记\" class=\"headerlink\" title=\"关于HTML盒子模型的笔记\"></a>关于HTML盒子模型的笔记</h1><h3 id=\"样式图：\"><a href=\"#样式图：\" class=\"headerlink\" title=\"样式图：\"></a>样式图：</h3><p><img src=\"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E9%A2%84%E8%A7%88.png\"></p>\n<p>建议：连接css文件(在css打代码更方便些)<br>  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./css/master.css&quot;</span>&gt;</span>  <span class=\"comment\">&lt;!-- herf：实际文件地址--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><ul>\n<li>浏览器默认样式</li>\n<li>所有元素都是矩形</li>\n<li>margin: 外边距</li>\n<li>border: 边框，有很多样式，直角、圆角、颜色等</li>\n<li>padding: 内边距</li>\n<li>content: 内容，就是本身的内容，比如一段话</li>\n</ul>\n<p>在浏览器默认所有的元素和边缘有空白是怎么回事呢？</p>\n<p><code>其实就是浏览器默认的边距样式，而且不一样的浏览器，样式也可能不一样，我们可以吧默认样式去掉。</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;  <span class=\"comment\">/*默认通配符 匹配所有标签 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;  <span class=\"comment\">/*去掉外边距*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说一说盒子\"><a href=\"#说一说盒子\" class=\"headerlink\" title=\"说一说盒子:\"></a>说一说盒子:</h3><p>所有界面的元素都可以看出一个盒子，盒子模型就是包围内容的一个盒子。<br><img src=\"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/1.png\"></p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;              <span class=\"comment\">/*盒子的大小，高宽也就是一个矩形*/</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aqua;    <span class=\"comment\">/*背景颜色*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;             <span class=\"comment\">/*内边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">300px</span>;             <span class=\"comment\">/*外边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid black;  <span class=\"comment\">/*边框样式为实线，颜色为黑色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在设置了，<code>内边距</code>，<code>边框</code>，<code>外边距</code> 我们可以看出盒子似乎大了，不是一开始设置的300*150大小了，这是因为我们增加了内边距边框，但是为什么增加内边距边框,就导致盒子变大了呢？因为它默认的规则是，所有增加的边距边框都往外加！！！在内容高度宽度的基础上往外加！</p>\n<p>我们可以设置box-sizing:<br>一般默认的box-sizing为 content-box<br>我们设置为 border-box</p>\n<h3 id=\"预览：\"><a href=\"#预览：\" class=\"headerlink\" title=\"预览：\"></a>预览：</h3><p><img src=\"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/2.png\"></p>\n<h3 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自己的通俗理解:<br><code>也就是比如说，如果要建设一个房子,默认要装修就是在建好的房子里面装修，但是 未设置 box-sizing 就是反着来在初始房子大小往外扩建装修,但如果设置了box-sizing 为 border-box 就变成了在房子里面装修了，width:300px heigit:150 也就是基础房子的大小(盒子)</code></p>\n","categories":["HTML"],"tags":["HTML盒子模型"]},{"title":"IDEA配置JDBC","url":"/2022/05/04/IDEA%E9%85%8D%E7%BD%AEJDBC/","content":"<p><a href=\"https://blog.csdn.net/qq_34622844/article/details/102817852\">https://blog.csdn.net/qq_34622844/article/details/102817852</a></p>\n","categories":["Java"],"tags":["IDEA配置JDBC"]},{"title":"IO流","url":"/2022/05/26/IO%E6%B5%81/","content":"<h3 id=\"流是输入输出的方式\"><a href=\"#流是输入输出的方式\" class=\"headerlink\" title=\"流是输入输出的方式\"></a>流是输入输出的方式</h3><p>流是一维单向的,一维的</p>\n<p>stream</p>\n<h3 id=\"流的基础类\"><a href=\"#流的基础类\" class=\"headerlink\" title=\"流的基础类\"></a>流的基础类</h3><ul>\n<li>InputStream</li>\n<li>OutputStream</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IOtest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] buffer =<span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> System.in.read(buffer);  <span class=\"comment\">//读到了多少东西</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;读到了&quot;</span>+len+<span class=\"string\">&quot;字节&quot;</span>);</span><br><span class=\"line\">            System.out.println(s);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;s的长度是：&quot;</span>+s.length());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只能处理单个字节，单个字节的读，单个字节的写</p>\n<h3 id=\"流过滤器\"><a href=\"#流过滤器\" class=\"headerlink\" title=\"流过滤器\"></a>流过滤器</h3><ul>\n<li>以一个介质流对象为基础层层构建过滤器，最终形成的流对象能在数据的输入输出过程中，逐层使用过滤器的方式来读写数据</li>\n</ul>\n","categories":["Java"],"tags":["IO流"]},{"title":"Java多线程","url":"/2022/03/31/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/","content":"<h1 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h1><p>Thread 、Runnable、Callable</p>\n<p>类              接口              接口</p>\n<h1 id=\"继承Thread类\"><a href=\"#继承Thread类\" class=\"headerlink\" title=\"继承Thread类\"></a>继承Thread类</h1><ul>\n<li><p>子类继承Thread类具备多线程能力</p>\n</li>\n<li><p>启动线程：子类对象.start()<br><font color=\"red\">不建议使用：避免OOP单继承局限性</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test1 test2=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        test2.start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Thread类的有关方法\"><a href=\"#Thread类的有关方法\" class=\"headerlink\" title=\"Thread类的有关方法\"></a>Thread类的有关方法</h1><ul>\n<li><p><font color=\"red\">void start():</font>启动线程，并执行对象的run()方法</p>\n</li>\n<li><p><font color=\"red\">run():</font>线程在被调度时执行的操作</p>\n</li>\n<li><p><font color=\"red\">String getName():</font>返回线程的名称</p>\n</li>\n<li><p><font color=\"red\">void setName(String name):</font>设置该线程名称</p>\n</li>\n<li><p><font color=\"red\">static Thread currentThread(): </font>返回当前线程。在Thread子类中就 是this，通常用于主线程和Runnable实现类</p>\n</li>\n<li><p><font color=\"red\">static void yield()：</font>线程让步</p>\n<ul>\n<li><blockquote>\n<p>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p>\n<p>若队列中没有同优先级的线程，忽略此方法</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><font color=\"red\">join() ：</font>当某个程序执行流中调用其他线程的 join() 方法时，调用线程将 被阻塞，直到 join() 方法加入的 join 线程执行完为止</p>\n</li>\n<li><p><font color=\"red\">static void sleep(long millis)：</font>(指定时间:毫秒)</p>\n<ul>\n<li><blockquote>\n<p>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后 重排队。</p>\n<p>抛出InterruptedException异常</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>stop():</strong> 强制线程生命期结束，不推荐使用</p>\n</li>\n<li><p><strong>boolean isAlive()：</strong>返回boolean，判断线程是否还活着</p>\n</li>\n</ul>\n<h1 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h1><ul>\n<li><p>实现接口Runnable具有多线程能力</p>\n</li>\n<li><p>启动线程：传入目标对象+Thread对象.start()<br><font color=\"red\">推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在看代码！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test1 test2=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(test2).start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我在学习多线程！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多线程并发问题\"><a href=\"#多线程并发问题\" class=\"headerlink\" title=\"多线程并发问题\"></a>多线程并发问题</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;  <span class=\"comment\">//调用Runnable</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> ticketNums=<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ticketNums&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;&quot;</span>+ticketNums--+<span class=\"string\">&quot;票&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"comment\">//获取多线程名字   Thread.currentThread().getName</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test1 t1=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;张三&quot;</span>).start();   <span class=\"comment\">//多线程名字</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;李四&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;黄牛&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"龟兔赛跑\"><a href=\"#龟兔赛跑\" class=\"headerlink\" title=\"龟兔赛跑\"></a>龟兔赛跑</h1></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String winner;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;  <span class=\"comment\">//模拟兔子休息</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Thread.currentThread().getName().equals(<span class=\"string\">&quot;兔子&quot;</span>)&amp;&amp; i%<span class=\"number\">10</span>==<span class=\"number\">0</span>)&#123;   <span class=\"comment\">//10步睡眠停顿</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> flag=gameOver(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;跑了&quot;</span>+i+<span class=\"string\">&quot;步&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">gameOver</span><span class=\"params\">(<span class=\"type\">int</span> steps)</span>&#123;  <span class=\"comment\">//判断是否完成比赛</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (winner!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (steps&gt;=<span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">                winner = Thread.currentThread().getName();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;winner is &quot;</span>+winner);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test1 t1=<span class=\"keyword\">new</span> <span class=\"title class_\">test1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;兔子&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1,<span class=\"string\">&quot;乌龟&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Callable接口-了解即可-扩充\"><a href=\"#Callable接口-了解即可-扩充\" class=\"headerlink\" title=\"Callable接口(了解即可)扩充\"></a>Callable接口(了解即可)扩充</h1><ol>\n<li><p>实现Callable接口，需要返回类型</p>\n</li>\n<li><p>重写call方法，需要抛出异常</p>\n</li>\n<li><p>创建目标对象  如：t1</p>\n</li>\n<li><p>创建执行服务：ExecutorService ser &#x3D; Executors.newFixedThreadPool(1);</p>\n</li>\n<li><p>提交执行：Future<Boolean> result1 &#x3D; ser.submit(t1);  &#x2F;&#x2F; t1为目标对象</Boolean></p>\n</li>\n<li><p>获取结果：boolean r1 &#x3D; result1.get()</p>\n</li>\n<li><p>关闭服务：ser.shutdownNow();</p>\n<p><code>演示：利用callable改造下载图片案例</code></p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.FileUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.testng.annotations.Test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/22</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">callable的好处</span></span><br><span class=\"line\"><span class=\"comment\">1. 可以定义返回值</span></span><br><span class=\"line\"><span class=\"comment\">2. 可以抛出异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Boolean&gt; &#123;   <span class=\"comment\">//设置返回值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">test</span><span class=\"params\">(String url, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">call</span><span class=\"params\">()</span>  &#123;</span><br><span class=\"line\">        webDownloader webDownloader1=<span class=\"keyword\">new</span> <span class=\"title class_\">webDownloader</span>();</span><br><span class=\"line\">        webDownloader1.downloader(url,name);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;下载了文件名为：&quot;</span>+name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        test t1=<span class=\"keyword\">new</span> <span class=\"title class_\">test</span>(<span class=\"string\">&quot;https://blog-zw.top/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png&quot;</span>,<span class=\"string\">&quot;1.jpg&quot;</span>);</span><br><span class=\"line\">        test t2=<span class=\"keyword\">new</span> <span class=\"title class_\">test</span>(<span class=\"string\">&quot;https://blog-zw.top/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png&quot;</span>,<span class=\"string\">&quot;2.jpg&quot;</span>);</span><br><span class=\"line\">        test t3=<span class=\"keyword\">new</span> <span class=\"title class_\">test</span>(<span class=\"string\">&quot;https://blog-zw.top/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png&quot;</span>,<span class=\"string\">&quot;3.jpg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务  线程池   池子里有3个线程</span></span><br><span class=\"line\">        ExecutorService ser= Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//提交执行</span></span><br><span class=\"line\">        Future&lt;Boolean&gt; r1=ser.submit(t1);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r2=ser.submit(t2);</span><br><span class=\"line\">        Future&lt;Boolean&gt; r3=ser.submit(t3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> rs1=r1.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> rs2=r2.get();</span><br><span class=\"line\">        <span class=\"type\">boolean</span> rs3=r3.get();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//打印返回结果</span></span><br><span class=\"line\">\t\tSystem.out.println(rs1);</span><br><span class=\"line\">        System.out.println(rs2);</span><br><span class=\"line\">        System.out.println(rs3);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//关闭服务</span></span><br><span class=\"line\">        ser.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">webDownloader</span>&#123;  <span class=\"comment\">//下载</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">downloader</span><span class=\"params\">(String url,String name)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                FileUtils.copyURLToFile(<span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(url),<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(name));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;io异常，downloader方法出现异常&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lamda表达式\"><a href=\"#Lamda表达式\" class=\"headerlink\" title=\"Lamda表达式\"></a>Lamda表达式</h1><ol>\n<li><p>希腊字母表中排序第十一位的字母，英文名称为Lambda</p>\n</li>\n<li><p>避免匿名内部类定义过多</p>\n</li>\n<li><p>其实质属于函数式编程的概念</p>\n</li>\n</ol>\n<p>为什么要使用lambda表达式？</p>\n<pre><code>* 避免匿名内部类定义过多\n* 可以让你的代码看起来很简洁\n* 去掉了一堆没有意义的代码，只留下核心的逻辑。\n</code></pre>\n   <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/22</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">like2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ilike</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;I like lamdad-&gt;静态内部类&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ilike</span> <span class=\"variable\">like</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">like</span>();   <span class=\"comment\">//接口new 外部类</span></span><br><span class=\"line\">            like.lamda();              <span class=\"comment\">//对象调用方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">            like = <span class=\"keyword\">new</span> <span class=\"title class_\">like2</span>();         <span class=\"comment\">// 静态内部类 new 对象</span></span><br><span class=\"line\">            like.lamda();              <span class=\"comment\">// 把静态内部类，赋给like对象，就不用创建新对象了，</span></span><br><span class=\"line\">            <span class=\"comment\">// like2 zw = new like2(); // 也可以这样创建一个对象，上面的就是覆盖了对象</span></span><br><span class=\"line\">            <span class=\"comment\">// zw.lamda();</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">class</span> <span class=\"title class_\">like3</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ilike</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;I like lamdad-&gt;局部内部类&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            like = <span class=\"keyword\">new</span> <span class=\"title class_\">like3</span>();</span><br><span class=\"line\">            like.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            like = <span class=\"keyword\">new</span> <span class=\"title class_\">ilike</span>() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;I like lamdad-&gt;匿名内部类&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            like.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ilike</span> <span class=\"variable\">zw</span> <span class=\"operator\">=</span> () -&gt; &#123;  <span class=\"comment\">// lamda表示简化</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like lamd-&gt;lamda表达式&quot;</span>);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            zw.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            zw = () -&gt; &#123;        <span class=\"comment\">// 简化1：</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like lamdba-&gt;简化 类型 lamdab表达式，&quot;</span>);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            zw.lamda();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*zw = a -&gt; &#123;        // 简化2：  在有参数的情况下 可以简化括号</span></span><br><span class=\"line\"><span class=\"comment\">                System.out.println(&quot;I like lamdba-&gt;简化lamdba表达式&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">            zw = () -&gt;       <span class=\"comment\">// 简化3：   只有一条语句情况下可以简化花括号</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;I like lamdba-&gt;简化 类型和花括号 lamdba表达式，&quot;</span>);</span><br><span class=\"line\">            zw.lamda();</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            总结：</span></span><br><span class=\"line\"><span class=\"comment\">               1.lamdba表达式只能有一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹</span></span><br><span class=\"line\"><span class=\"comment\">               2. 前提是接口是函数式接口</span></span><br><span class=\"line\"><span class=\"comment\">               3. 多个参数可以去掉参数类型</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ilike</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">like</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ilike</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lamda</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;I like lamdad-&gt;外部类&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"静态代理类\"><a href=\"#静态代理类\" class=\"headerlink\" title=\"静态代理类\"></a>静态代理类</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    静态代理模式总结：</span></span><br><span class=\"line\"><span class=\"comment\">    真实对象和代理对象都要实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\">    代理对象要代理真实的角色</span></span><br><span class=\"line\"><span class=\"comment\">    好处：</span></span><br><span class=\"line\"><span class=\"comment\">    代理对象可以做很多真实对象做不了的事情(也就布置现场和结婚)</span></span><br><span class=\"line\"><span class=\"comment\">    真实对象专注做自己的事情</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    这句话说出来就明白了：婚礼公司相当于thread，结婚的人相当于实现runnable接口的类。</span></span><br><span class=\"line\"><span class=\"comment\">    用thread代替接口实现类做一些东西。</span></span><br><span class=\"line\"><span class=\"comment\">    就是把Thread作为代理类使用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">jintaidaili</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        You you=<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;System.out.println(<span class=\"string\">&quot;我爱你&quot;</span>);&#125;).start();   <span class=\"comment\">//Lamdba表达式</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">WedddingCompany</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>()).HappyMarry();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">WedddingCompany</span> <span class=\"variable\">wedddingCompany</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WedddingCompany</span>(you);</span><br><span class=\"line\">        wedddingCompany.HappyMarry();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数式接口，结婚</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span>  <span class=\"title class_\">Marry</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//真实角色，你去结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;zw要结婚了，超开心！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理角色,帮助你结婚</span></span><br><span class=\"line\"><span class=\"comment\">//传入一个对象进行结婚</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WedddingCompany</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Marry</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//代理谁-》真实角色</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Marry target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WedddingCompany</span><span class=\"params\">(Marry target)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target=target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HappyMarry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        before();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target.HappyMarry();  <span class=\"comment\">//这就是真实对象</span></span><br><span class=\"line\">        after();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;结婚之前,布置现场&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h1><h2 id=\"线程方法\"><a href=\"#线程方法\" class=\"headerlink\" title=\"线程方法\"></a>线程方法</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">setPriority(int newPriority)</td>\n<td align=\"left\">更改线程的优先级</td>\n</tr>\n<tr>\n<td align=\"left\">static void sleep(long millis)</td>\n<td align=\"left\">在指定的毫秒数内让当前正在执行的线程休眠</td>\n</tr>\n<tr>\n<td align=\"left\">void join()</td>\n<td align=\"left\">等待该线程终止</td>\n</tr>\n<tr>\n<td align=\"left\">static void yield()</td>\n<td align=\"left\">暂停当前正在执行的线程对象，并执行其他线程 (礼让)</td>\n</tr>\n<tr>\n<td align=\"left\">void interrupt()</td>\n<td align=\"left\">中断线程，别用这个方式</td>\n</tr>\n<tr>\n<td align=\"left\">boolean isAive()</td>\n<td align=\"left\">测试线程是否处于活动状态</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.线程中定义线程体使用的标识</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;run....Thread&quot;</span>+i++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//2.线程体使用该标识</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//3.设置一个公开的方法停止线程，转标识位</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">test2</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">test2</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(t1).start();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span>+i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">900</span>)&#123;</span><br><span class=\"line\">                t1.stop();   <span class=\"comment\">//停止子线程</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程该停止了&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>推荐线程自己停下来</p>\n<p>建议使用一个标志位进行终止变量当 flag&#x3D;false,则终止线程运行</p>\n<p>以上代码停止的是子线程</p>\n<h1 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h1><p>要想实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类 及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的<strong>五种状态</strong>：</p>\n<ul>\n<li><font color=\"red\">新建：</font>当一个<strong>Thread</strong>类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li>\n<li><font color=\"red\">就绪：</font>处于新建状态的线程被<strong>start()<strong>后，将进入线程队列等待</strong>CPU</strong>时间片，此时它已 具备了运行的条件，只是没分配到CPU资源</li>\n<li><font color=\"red\">运行：</font>当就绪的线程被调度并获得<strong>CPU</strong>资源时,便进入运行状态， **run()**方法定义了线 程的操作和功能</li>\n<li><font color=\"red\">阻塞：</font>在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 <strong>CPU</strong> 并临时中 止自己的执行，进入阻塞状态</li>\n<li><font color=\"red\">死亡：</font> 线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li>\n</ul>\n<h1 id=\"线程休眠-sleep\"><a href=\"#线程休眠-sleep\" class=\"headerlink\" title=\"线程休眠_sleep\"></a>线程休眠_sleep</h1><p>Thread.sleep(1000);</p>\n<ul>\n<li>sleep(时间)指定当前线程阻塞的毫秒数；</li>\n<li>sleep存在异常interruptedException;   &#x2F;&#x2F;需要抛出</li>\n<li>sleep时间到达后线程进入就绪状态；</li>\n<li>sleep可以模拟网络延时，倒计时等。</li>\n<li>每个对象都有一个锁,sleep不会释放锁；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/26</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancDaojishi</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//模拟倒计时</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">tenDown</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            System.out.println(num--);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//打印当前系统时间，前一秒</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Date</span> <span class=\"variable\">starTime</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis());</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;HH:mm:ss&quot;</span>).format(starTime));</span><br><span class=\"line\">                starTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(System.currentTimeMillis());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h1><p>Thread.yield();   </p>\n<ul>\n<li><p>礼让线程，让当前正在执行的线程暂停，但不堵塞</p>\n</li>\n<li><p>将线程从运行状态转为就绪状态</p>\n</li>\n<li><p>让cpu重新调度，礼让不一定成功！看cpu心情</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancYieid</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyYield</span> <span class=\"variable\">myYield</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyYield</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;a&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myYield,<span class=\"string\">&quot;b&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyYield</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程开始执行&quot;</span>);</span><br><span class=\"line\">        Thread.yield();    <span class=\"comment\">//礼让   (不一定成功)</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;线程停止执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从运行到就绪状态，就是礼让，还是有抢夺CPU资源的机会的</p>\n</li>\n</ul>\n<h1 id=\"Join\"><a href=\"#Join\" class=\"headerlink\" title=\"Join\"></a>Join</h1><p>​    thread.join()   </p>\n<ul>\n<li>Join合并线程，待线程执行完成后，再执行其他线程，其他线程阻塞</li>\n<li>可以想象成插队</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/27</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//测试Join方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancJoin</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程vip来了&quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">duoxiancJoin</span> <span class=\"variable\">testJoin</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">duoxiancJoin</span>();</span><br><span class=\"line\">        Thread thread= <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(testJoin);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//start()要放到if里面，不然在主线程启动时，vip线程也在执行中</span></span><br><span class=\"line\">                thread.start();</span><br><span class=\"line\">                thread.join();   <span class=\"comment\">//插队</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main&quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程状态观测\"><a href=\"#线程状态观测\" class=\"headerlink\" title=\"线程状态观测\"></a>线程状态观测</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">thread.getState()   线程状态观测</span><br><span class=\"line\"></span><br><span class=\"line\">枚举 Thread.State</span><br><span class=\"line\">线程状态。线程可以处于下列状态之一： </span><br><span class=\"line\"></span><br><span class=\"line\">NEW</span><br><span class=\"line\">至今尚未启动的线程处于这种状态。 </span><br><span class=\"line\">RUNNABLE</span><br><span class=\"line\">正在 Java 虚拟机中执行的线程处于这种状态。 </span><br><span class=\"line\">BLOCKED</span><br><span class=\"line\">受阻塞并等待某个监视器锁的线程处于这种状态。 </span><br><span class=\"line\">WAITING</span><br><span class=\"line\">无限期地等待另一个线程来执行某一特定操作的线程处于这种状态。 </span><br><span class=\"line\">TIMED_WAITING</span><br><span class=\"line\">等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态。 </span><br><span class=\"line\">TERMINATED</span><br><span class=\"line\">已退出的线程处于这种状态。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancState</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">     Thread thread= <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                 Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                 e.printStackTrace();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;////////&quot;</span>);    <span class=\"comment\">//结束打印</span></span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//观察状态</span></span><br><span class=\"line\">        Thread.<span class=\"type\">State</span> <span class=\"variable\">state</span> <span class=\"operator\">=</span> thread.getState();</span><br><span class=\"line\">        System.out.println(state);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//观察启动后</span></span><br><span class=\"line\">        thread.start();   <span class=\"comment\">//启动</span></span><br><span class=\"line\">        state=thread.getState();</span><br><span class=\"line\">        System.out.println(state);  <span class=\"comment\">//Run</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (state!=Thread.State.TERMINATED)&#123;   <span class=\"comment\">//只要线程不终止</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">100</span>);    <span class=\"comment\">//100毫秒刷新</span></span><br><span class=\"line\">            state=thread.getState();   <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">            System.out.println(state);   <span class=\"comment\">//输出状态</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//线程中断或者结束，一旦进入死亡状态，就不能再次启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/03/31/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/1.png\"></p>\n<h1 id=\"线程的优先级\"><a href=\"#线程的优先级\" class=\"headerlink\" title=\"线程的优先级\"></a>线程的优先级</h1><ul>\n<li><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</p>\n</li>\n<li><p>线程的优先级用数字表示，范围从1~10.</p>\n<ol>\n<li>Thread.MIN_PRIORITY &#x3D; 1;</li>\n<li>Thread.MAX_PRIOPITY &#x3D; 10;</li>\n<li>Thread.NORM_PRIOPITY &#x3D; 5;</li>\n</ol>\n</li>\n<li><p>使用以下方式改变或获取优先级</p>\n<ul>\n<li>getPriority.setPriority(int XXX)</li>\n</ul>\n<p><code>优先级的设定建议在start()调度前</code></p>\n<p><code>优先级低只是意味着调度的概率低.并不是优先级低就不会调用了.这都是看CPU的调度</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancYouxianji</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//getPriority  返回线程的优先级</span></span><br><span class=\"line\">        <span class=\"comment\">//setPriority  更改线程的优先级</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority()); <span class=\"comment\">//主线程main的优先级</span></span><br><span class=\"line\">        <span class=\"type\">Mypriority</span> <span class=\"variable\">mypriority</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mypriority</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t6</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(mypriority);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t2.setPriority(<span class=\"number\">1</span>);    <span class=\"comment\">//更改线程优先级</span></span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t3.setPriority(<span class=\"number\">4</span>);</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t4.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        t5.setPriority(-1);      //报错</span></span><br><span class=\"line\"><span class=\"comment\">//        t5.start();</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        t6.setPriority(11);    //报错    默认线程是  5   0-10   10为最高级</span></span><br><span class=\"line\"><span class=\"comment\">//        t6.start();、</span></span><br><span class=\"line\">        <span class=\"comment\">//     优先级低只是意味着调度的概率低.并不是优先级低就不会调用了.这都是看CPU的调度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">Mypriority</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h1><ul>\n<li>默认是false表示用户线程，正常的线程都是用户线程</li>\n<li>线程分为<font color=\"red\">用户线程</font>和<font color=\"red\">守护线程</font></li>\n<li>虚拟机必须确保用户线程执行完毕</li>\n<li>虚拟机不用等待守护线程执行完毕</li>\n<li>如：后台记录操作日志，监控内存，垃圾回收等待..</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> duoxianc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">duoxiancShouhu</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">God</span> <span class=\"variable\">god</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">God</span>();</span><br><span class=\"line\">        youI you= <span class=\"keyword\">new</span> <span class=\"title class_\">youI</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(god);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"literal\">true</span>);  <span class=\"comment\">//默认是false表示用户线程，正常的线程都是用户线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">        thread.start();     <span class=\"comment\">//守护线程启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(you).start();   <span class=\"comment\">//你启动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">God</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//守护线程 守护着你</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;上帝保佑着你&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">youI</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你一生都开心的活着&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-====goofbye! world&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程同步机制（重点）\"><a href=\"#线程同步机制（重点）\" class=\"headerlink\" title=\"线程同步机制（重点）\"></a>线程同步机制（重点）</h1></li>\n<li><p>处理多线程问题时，<font color=\"red\">多个线程访问同一个对象(并发)</font>，并且某些线程还想修改这个对象，这个时候我们就需要线程同步. <font color=\"red\">线程同步其实就是一种等待</font>，多个需要同时访问此对象的线程进入<font color=\"red\">这个对象的等待池</font>形成队列，等待前面线程使用完毕，下一个线程再使用。</p>\n</li>\n<li><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<font color=\"red\">锁机制synchronized</font>,当一个线程获得对象的排它锁，独占资源，其他线程必须等待</p>\n</li>\n<li><p>一个线程持有锁会导致其他所有需要此锁的线程挂起</p>\n</li>\n<li><p>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题</p>\n</li>\n<li><p>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致优先级倒置，引起性能问题</p>\n<p><code>形成条件：队列+锁</code></p>\n</li>\n</ul>\n<h1 id=\"三大不安全案例\"><a href=\"#三大不安全案例\" class=\"headerlink\" title=\"三大不安全案例\"></a>三大不安全案例</h1><h2 id=\"买票\"><a href=\"#买票\" class=\"headerlink\" title=\"买票\"></a>买票</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: syn</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不安全的买票</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnBuyTicket</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BuyTicket</span> <span class=\"variable\">station</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">BuyTicket</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(station,<span class=\"string\">&quot;zw&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(station,<span class=\"string\">&quot;lwx&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(station,<span class=\"string\">&quot;黄牛党&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BuyTicket</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticketNum</span> <span class=\"operator\">=</span><span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span><span class=\"literal\">true</span>;   <span class=\"comment\">//外部停止方式</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//买票</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                buy();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ticketNum&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;拿到&quot;</span>+ticketNum--);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"取钱\"><a href=\"#取钱\" class=\"headerlink\" title=\"取钱\"></a>取钱</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不安全的取钱</span></span><br><span class=\"line\"><span class=\"comment\">//两个人去银行取钱</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UNsafeBank</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">account</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">100</span>,<span class=\"string\">&quot;基金&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Drawing</span> <span class=\"variable\">zw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Drawing</span>(account,<span class=\"number\">50</span>,<span class=\"string\">&quot;你&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Drawing</span> <span class=\"variable\">lwx</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Drawing</span>(account,<span class=\"number\">100</span>,<span class=\"string\">&quot;girlFriend&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        zw.start();</span><br><span class=\"line\">        lwx.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//账户</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Account</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> money;   <span class=\"comment\">//余额</span></span><br><span class=\"line\">    String name;  <span class=\"comment\">//卡名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(<span class=\"type\">int</span> money, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//银行</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Drawing</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Account account;  <span class=\"comment\">//账户</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> drawingMoney;   <span class=\"comment\">//取了多少钱</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> nowMoney;   <span class=\"comment\">//现在手里有多少钱</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Drawing</span><span class=\"params\">(Account account,<span class=\"type\">int</span> drawingMoney,String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);   <span class=\"comment\">//把取钱的名字，调给父类 Thread  相当于给线程取名字</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.account=account;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.drawingMoney=drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//取钱</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (account.money-drawingMoney&lt;<span class=\"number\">0</span>)&#123;    <span class=\"comment\">//账户的钱 减去 取的钱</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;钱不够取不了&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//sleep可以放大问题的发生性</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);     <span class=\"comment\">//延时 1秒</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//卡内余额= 余额 -你取的钱</span></span><br><span class=\"line\">        account.money=account.money-drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//你手里的钱</span></span><br><span class=\"line\">        nowMoney=nowMoney+drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(account.name+<span class=\"string\">&quot;余额为：&quot;</span>+account.money);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//继承 Thread 调用.this 也就相当于  Thread.currentThread().getName();</span></span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.getName()+<span class=\"string\">&quot;手里的钱：&quot;</span>+nowMoney);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程不安全\"><a href=\"#线程不安全\" class=\"headerlink\" title=\"线程不安全\"></a>线程不安全</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/29</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: syn</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程不安全的集合</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnsafeList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();   <span class=\"comment\">//ArrayList 线程不安全</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                list.add(Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//原因比如说：两个线程同一瞬间，操作了同一个位置，把两个数组添加到了同一个位置，就把它覆盖掉了，然后元素就会少</span></span><br><span class=\"line\">        <span class=\"comment\">//少的元素就是这么来的</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">3000</span>);   <span class=\"comment\">//等待结果，休眠等待线程跑完</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(list.size());   <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同步方法和同步块\"><a href=\"#同步方法和同步块\" class=\"headerlink\" title=\"同步方法和同步块\"></a>同步方法和同步块</h1><p><code>锁的对象就是变化的量，需要增删改的对象</code></p>\n<h2 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h2><ul>\n<li><p>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们只需<br>要针对方法提出一套机制，这套机制就是synchronized关键字，它包括两种用法：<br>synchronized方法和synchronized块</p>\n<ul>\n<li><blockquote>\n<p>同步方法：public synchronized void method(int args){}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>synchronized)方法控制对 “对像”的访问，每个对象对应一把锁，每个<br>synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞<br>方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获<br>得这个锁，继续执行</p>\n<ul>\n<li><blockquote>\n<p>缺陷：若将一个大的方法声明为synchronized将会影响效率</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>方法里面需要修改的内容才需要锁，锁的太多，浪费资源</p>\n</li>\n</ul>\n<h2 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h2><ul>\n<li><p>同步块：synchronized<font color=\"red\">(Obj){}</font></p>\n</li>\n<li><p><font color=\"red\">Obj </font>称为<strong>同步监视器</strong></p>\n<ul>\n<li>Obj 可以是任何对象，但是推荐使用共享资源作为同步监视器</li>\n<li>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this,就是这个对象本身，或者是 class</li>\n</ul>\n</li>\n<li><p>同步监视器的执行过程</p>\n<ol>\n<li><p>第一个线程访问，锁定同步监视器，执行其中代码.</p>\n</li>\n<li><p>第二个线程访问，发现同步监视器被锁定，无法访问.</p>\n</li>\n<li><p>第一个线程访问完毕,解锁同步监视器.</p>\n</li>\n<li><p>第二个线程访问.发现同步监视器没有锁，然后锁定并访问</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//不安全的买票</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;   <span class=\"comment\">//同步方法  锁的 this</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ticketNum&lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;拿到&quot;</span>+ticketNum--);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//取钱</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (account)&#123;   <span class=\"comment\">//把账户锁了  哪个类的属性发生变化，就锁哪个类</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (account.money-drawingMoney&lt;<span class=\"number\">0</span>)&#123;    <span class=\"comment\">//账户的钱 减去 取的钱</span></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;钱不够取不了&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//sleep可以放大问题的发生性</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);     <span class=\"comment\">//延时 1秒</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//卡内余额= 余额 -你取的钱</span></span><br><span class=\"line\">            account.money=account.money-drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//你手里的钱</span></span><br><span class=\"line\">            nowMoney=nowMoney+drawingMoney;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(account.name+<span class=\"string\">&quot;余额为：&quot;</span>+account.money);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//继承 Thread 调用.this 也就相当于  Thread.currentThread().getName();</span></span><br><span class=\"line\">            System.out.println(<span class=\"built_in\">this</span>.getName()+<span class=\"string\">&quot;手里的钱：&quot;</span>+nowMoney);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//线程不安全的集合</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnsafeList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();   <span class=\"comment\">//ArrayList 线程不安全</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (list)&#123;</span><br><span class=\"line\">                    list.add(Thread.currentThread().getName());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//原因比如说：两个线程同一瞬间，操作了同一个位置，把两个数组添加到了同一个位置，就把它覆盖掉了，然后元素就会少</span></span><br><span class=\"line\">        <span class=\"comment\">//少的元素就是这么来的</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">10</span>);   <span class=\"comment\">//等待结果，休眠等待线程跑完   加上同步块，必须sleep，要不然主线程会先输出</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(list.size());   <span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h1><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行，而<br>导致两个或者多个线程都在等待对方释放资源，都停止执行的情形.某一个同步块<br>同时拥有“<font color=\"red\">两个以上对象的锁</font>”时，就可能会发生“死锁”的问题。</p>\n<ul>\n<li>产生死锁的四个必要条件：<ol>\n<li>互斥条件：一个资源每次只能被一个进程使用。</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li>\n<li>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n</li>\n<li><strong>上面列出了死锁的四个必要条件，我们只要想办法破其中的任意一个或多个条件</strong><br><strong>就可以避免死锁发生</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: Lock</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeadLock</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        a a1=<span class=\"keyword\">new</span> <span class=\"title class_\">a</span>(<span class=\"number\">0</span>,<span class=\"string\">&quot;lwx&quot;</span>);</span><br><span class=\"line\">        a a2=<span class=\"keyword\">new</span> <span class=\"title class_\">a</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;zw&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        a1.start();</span><br><span class=\"line\">        a2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Zw</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lwx</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">a</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            activity();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> Zw zw= <span class=\"keyword\">new</span> <span class=\"title class_\">Zw</span>();</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"type\">Lwx</span> <span class=\"variable\">lwx</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Lwx</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> num;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">a</span><span class=\"params\">(<span class=\"type\">int</span> num, String name)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.num = num;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">activity</span><span class=\"params\">()</span>&#123;   <span class=\"comment\">//死锁</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(num==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (zw)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">&quot;吃饭&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (lwx)&#123;    <span class=\"comment\">// 放到 if 外面就不会出现死锁</span></span><br><span class=\"line\">                        System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lwx)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (zw)&#123;     <span class=\"comment\">//放到 if 外面就不会出现死锁</span></span><br><span class=\"line\">                        System.out.println(<span class=\"built_in\">this</span>.name+<span class=\"string\">&quot;吃饭&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"lock锁\"><a href=\"#lock锁\" class=\"headerlink\" title=\"lock锁\"></a>lock锁</h1><ul>\n<li>从JDK5.0开始，Java提供了更强大的线程同步机制一一通过显式定义同步锁对<br>象来实现同步。同步锁使用L0ck对象充当</li>\n<li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。<br>锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开<br>始访问共享资源之前应先获得Lock对象</li>\n<li>ReentrantLock类实现了Lock,它拥有与synchronized相同的并发性和内存语<br>义，在实现线程安全的控制中，比较常用的是ReentrantLock,可以显式加锁、释<br>放锁。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();   <span class=\"comment\">//加锁</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//保证线程安全的代码</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();  <span class=\"comment\">//解锁</span></span><br><span class=\"line\">            <span class=\"comment\">//如果同步代码有异常，要将unlock()写入finally语句块</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: Lock</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LockTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        TestLock2 a1=<span class=\"keyword\">new</span> <span class=\"title class_\">TestLock2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(a1).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(a1).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestLock2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        buy();   <span class=\"comment\">//调用buy方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                lock.lock();   <span class=\"comment\">//加锁</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ticket &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(ticket--);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>&#123;  <span class=\"comment\">//如果同步代码有异常，要将unlock()写入finally语句块</span></span><br><span class=\"line\">                lock.unlock();   <span class=\"comment\">//解锁</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"synchriized-与-Lock-的对比\"><a href=\"#synchriized-与-Lock-的对比\" class=\"headerlink\" title=\"synchriized 与 Lock 的对比\"></a>synchriized 与 Lock 的对比</h1><ul>\n<li><strong>Lock是显式锁(手动开启和关闭锁，别忘记关闭锁)synchronized是隐式锁，出了</strong><br><strong>作用域自动释放</strong></li>\n<li><strong>Lock只有代码块锁，synchronized有代码块锁和方法锁</strong></li>\n<li><strong>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展</strong><br><strong>性（提供更多的子类）</strong></li>\n<li><strong>优先使用顺序：</strong><ul>\n<li><strong>Lock&gt;同步代码块(已经进入了方法体，分配了相应资源)&gt;同步方法（在方</strong><br><strong>法体之外）</strong></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"线程协作\"><a href=\"#线程协作\" class=\"headerlink\" title=\"线程协作\"></a>线程协作</h1><h2 id=\"生产者消费者模式\"><a href=\"#生产者消费者模式\" class=\"headerlink\" title=\"生产者消费者模式\"></a>生产者消费者模式</h2><h3 id=\"线程通信\"><a href=\"#线程通信\" class=\"headerlink\" title=\"线程通信\"></a>线程通信</h3><p>应用场景：生产者和消费者问题</p>\n<ul>\n<li>假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将<br>仓库中产品取走消费.</li>\n<li>如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到<br>仓库中的产品被消费者取走为止.</li>\n<li>如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，<br>直到仓库中再次放入产品为止.</li>\n</ul>\n<h3 id=\"线程通信-分析\"><a href=\"#线程通信-分析\" class=\"headerlink\" title=\"线程通信-分析\"></a>线程通信-分析</h3><p><strong>这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之</strong><br><strong>间相互依赖，互为条件。</strong></p>\n<ul>\n<li>对于生产者，没有生产，产品之前，要通知消费者等待。而生产了产品之后，又<br>需要马上通知消费者消费</li>\n<li>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产品<br>以供消费。</li>\n<li>在生产者消费者问题中，仅有synchronized,是不够的<ul>\n<li>synchronized可阻止并发更新同一个共享资源，实现了同步</li>\n<li>synchronized不能用来实现不同线程之间的消息传递（通信）</li>\n</ul>\n</li>\n<li><strong>java提供了几个方法解决线程之间的通信问题</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>wait()</td>\n<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody></table>\n<p><font color=\"red\">注意：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常lllegalMonitorStateException</font></p>\n<h3 id=\"解决方式-1\"><a href=\"#解决方式-1\" class=\"headerlink\" title=\"解决方式 1\"></a>解决方式 1</h3><p>并发协作模型”生产者&#x2F;消费者模式“–&gt;管程法</p>\n<ul>\n<li>生产者：负责生产数据的模块(可能是方法，对象，线程，进程);</li>\n<li>消费者：负责处理数据的模块(可能是方法，对象，线程，进程)；</li>\n<li>缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区</li>\n</ul>\n<p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试：生产者消费者模型--&gt;利用缓冲区解决：管程法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产者 ，消费者，产品，缓冲区</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPC</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">synContainer</span> <span class=\"variable\">container</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">synContainer</span>();  <span class=\"comment\">//缓存区</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Productor</span>(container).start();     <span class=\"comment\">//启动生产者</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>(container).start();      <span class=\"comment\">//消费者</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生产者</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Productor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    synContainer container;          <span class=\"comment\">//传入缓冲区对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Productor</span><span class=\"params\">(synContainer container)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.container=container;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            container.push(<span class=\"keyword\">new</span> <span class=\"title class_\">Cicken</span>(i));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;生产了&quot;</span>+i+<span class=\"string\">&quot;只鸡&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//消费者</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    synContainer container;       <span class=\"comment\">//传入缓冲区对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Consumer</span><span class=\"params\">(synContainer container)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.container=container;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;消费了--&gt;&quot;</span>+container.pop().id+<span class=\"string\">&quot;只鸡&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//产品</span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">Cicken</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;  <span class=\"comment\">//产品编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Cicken</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//缓冲区</span></span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">synContainer</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//产品容器</span></span><br><span class=\"line\">    Cicken[] cickens =<span class=\"keyword\">new</span> <span class=\"title class_\">Cicken</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生产者放入</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">synchronized</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(Cicken cicken)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count==<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//通知消费者消费  等待</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有满，我们就需要丢入产品</span></span><br><span class=\"line\">        cickens[count]=cicken;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notify();</span><br><span class=\"line\">        <span class=\"comment\">//可以通知消费者消费了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> Cicken <span class=\"title function_\">pop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">while</span> (count==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//等待生产者生产，消费者等待</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果可以消费</span></span><br><span class=\"line\">        count--;</span><br><span class=\"line\">        Cicken chicken=cickens[count];</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notify();</span><br><span class=\"line\">        <span class=\"comment\">//吃完了，通知生产者生产</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> chicken;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//消费者消费产品</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"解决方式-2\"><a href=\"#解决方式-2\" class=\"headerlink\" title=\"解决方式 2\"></a>解决方式 2</h3><p>并发协作模型”生产者&#x2F;消费者模式“–&gt;信号灯</p>\n<p>利用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h3 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h3>","categories":["Java"],"tags":["Java"]},{"title":"Java容易忘记的","url":"/2022/04/16/Java%E5%AE%B9%E6%98%93%E5%BF%98%E8%AE%B0%E7%9A%84/","content":"<h3 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承:\"></a>什么是继承:</h3><p>将具有<code>相同属性</code>和<code>方法</code>的类中相同属性和方法提取出，构建一个新类，这个新类就是父类，<code>然后由父类再构建子类，子类继承父类的属性和方法，使得子类对象具有父类的特征和行为</code></p>\n<hr>\n<h2 id=\"类变量、类方法与static关键字\"><a href=\"#类变量、类方法与static关键字\" class=\"headerlink\" title=\"类变量、类方法与static关键字:\"></a>类变量、类方法与static关键字:</h2><blockquote>\n<p>static修饰的变量和方法可以通过类名和对象名访问，<code>而不用static修饰的变量和方法只能通过对象名访问。</code></p>\n</blockquote>\n<ul>\n<li>类变量或静态常量：static修饰的属性称为类属性（类变量）<br>如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">zhangshan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        Student.play();   <span class=\"comment\">//类的属性 直接用类名调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"方法名的重载和重写\"><a href=\"#方法名的重载和重写\" class=\"headerlink\" title=\"方法名的重载和重写\"></a>方法名的重载和重写</h2><h3 id=\"方法的重载：指同一个类中多个方法：\"><a href=\"#方法的重载：指同一个类中多个方法：\" class=\"headerlink\" title=\"方法的重载：指同一个类中多个方法：\"></a>方法的重载：指同一个类中多个方法：</h3><ul>\n<li><blockquote>\n<p>方法名相同</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>参数列表不同（个数、顺序、类型三者只要有一项不同）</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>与返回值、访问修饰符无关</p>\n</blockquote>\n</li>\n</ul>\n<p><code>发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</code></p>\n<h2 id=\"综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\"><a href=\"#综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\" class=\"headerlink\" title=\"综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\"></a>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</h2><h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写:\"></a>重写:</h2><ol>\n<li><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p>\n</li>\n<li><p>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</p>\n</li>\n<li><p>如果父类方法访问修饰符为 private&#x2F;final&#x2F;static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。<br>构造方法无法被重写</p>\n<h2 id=\"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\"><a href=\"#综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\" class=\"headerlink\" title=\"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\"></a>综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。</h2></li>\n</ol>\n<h2 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h2><ul>\n<li><blockquote>\n<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>\n</blockquote>\n<h3 id=\"方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂-Java-讲义》-）：\"><a href=\"#方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂-Java-讲义》-）：\" class=\"headerlink\" title=\"方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂 Java 讲义》 ）：\"></a><strong>方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂 Java 讲义》 ）：</strong></h3></li>\n<li><p>“两同”即方法名相同、形参列表相同；</p>\n</li>\n<li><p>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</p>\n</li>\n<li><p>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</p>\n</li>\n<li><blockquote>\n<p>关于 重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a><strong>extends关键字</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> health;  <span class=\"comment\">//健康值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> love;    <span class=\"comment\">//亲密值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name+<span class=\"string\">&#x27;，&#x27;</span>+health+<span class=\"string\">&#x27;,&#x27;</span>+love;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;   <span class=\"comment\">//extends 继承关键字</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span><span class=\"string\">&quot;Q仔&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span><span class=\"string\">&quot;Q妹&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>有些父类成员不能继承：</strong></p>\n<ul>\n<li><code>private成员</code> </li>\n<li><code>子类与父类不在同包，使用默认访问权限的成员</code></li>\n<li><code>构造方法</code></li>\n</ul>\n<p><strong>继承特性：</strong></p>\n<ul>\n<li>传递性:B类继承A类，C类继承B类，C类也继承A类的属性和方法。</li>\n<li>单根性，一个子类只能继承一个父类。</li>\n</ul>\n<hr>\n<h2 id=\"super关键字\"><a href=\"#super关键字\" class=\"headerlink\" title=\"super关键字\"></a><strong>super关键字</strong></h2><p>子类访问父类的成员使用super。</p>\n<ul>\n<li><code>super():调用父类的构造方法。</code></li>\n<li><code>super.name:访问父类的属性。</code></li>\n<li><code>super.toString():访问父类的方法</code></li>\n</ul>\n<hr>\n<h2 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a><strong>方法的重写</strong></h2><p>在继承关系中，子类会自动继承父类中定义的方法，但有时在子类中需要对继承的方法进行一些修改，即对父类的方法进行重写。</p>\n<ul>\n<li>子类方法与父类方法具有相同的名字。</li>\n<li>参数列表与父类方法相同。</li>\n<li>返回值类型与父类方法相同。</li>\n<li>子类方法访问权限不能比父类更严格。</li>\n<li>抛出的异常<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;  <span class=\"comment\">//Penguin子类重写toString()</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q仔&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q妹&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String sex;   <span class=\"comment\">//性别</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>&#123;   <span class=\"comment\">//Penguin子类重写toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"built_in\">super</span>.toString(); <span class=\"comment\">//toString():访问父类的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> info+<span class=\"string\">&quot;,&quot;</span>+sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"抽象类、抽象方法和abstract关键字\"><a href=\"#抽象类、抽象方法和abstract关键字\" class=\"headerlink\" title=\"抽象类、抽象方法和abstract关键字\"></a><strong>抽象类、抽象方法和abstract关键字</strong></h2><h3 id=\"1-抽象类\"><a href=\"#1-抽象类\" class=\"headerlink\" title=\"1. 抽象类\"></a>1. 抽象类</h3><ul>\n<li>在继承关系中，去实例化一个父类没有意义，<code>它的特征和方法无法确定，可以使用抽象类来限制父类被实例化，抽象类是不能被实例化的。</code><br>如：<blockquote>\n<p>Pet ww &#x3D; new Pet(); &#x2F;&#x2F;实例化父类没有意义</p>\n</blockquote>\n</li>\n<li>抽象类用关键字abstract来修饰。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;   <span class=\"comment\">//抽象类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> health;  <span class=\"comment\">//健康值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> love;    <span class=\"comment\">//亲密值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;  <span class=\"comment\">//企鹅类</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Pet</span> <span class=\"variable\">ww</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();   <span class=\"comment\">//语法错误，抽象类无法实例化</span></span><br><span class=\"line\">    <span class=\"type\">Pet</span> <span class=\"variable\">zw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>(); <span class=\"comment\">//正确</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-抽象方法\"><a href=\"#2-抽象方法\" class=\"headerlink\" title=\"2. 抽象方法\"></a>2. 抽象方法</h3>父类的play方法，<code>每个子类实现步骤都不一样，即方法体没有实际意义的语句</code>，像这样的方法可以写成抽象方法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;  <span class=\"comment\">//子类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;   <span class=\"comment\">//父类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><code>抽象方法用abstract关键字修饰。</code></li>\n<li><code>抽象方法没有方法体。</code></li>\n<li><code>抽象方法必须在抽象类里。</code></li>\n<li><code>抽象方法必须在子类中被实现。</code></li>\n</ul>\n<hr>\n<h2 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a><strong>final关键字</strong></h2><p><code>final关键字修饰的变量的值是最终的值，即不能修改它的值—常量。</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q仔&quot;</span>;   <span class=\"comment\">//final 修饰变量的最终值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q妹&quot;</span>;  <span class=\"comment\">//final 修饰变量的最终值</span></span><br></pre></td></tr></table></figure>\n<p><code>final关键字修饰的类为最终的子类—不能被继承。</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span>  &#123;   <span class=\"comment\">//最终只类</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1、final修饰的类不可以被继承，但可以继承其他的类。</p>\n<p>2、final修饰的方法子类可以继承但是不能重写。</p>\n<p>3、子类重写父类的非final方法可以加上final。</p>\n<p>4、被final修饰的基本数据类型的变量可以看作是常量，赋值后不能改变。</p>\n<p>5、被final修饰的引用数据类型变量的引用内存地址值不能改变，可以改变引用数据类型变量的属性值。</p>\n<p>6、被final修饰的成员变量必须在对象创建完成前进行赋值，可以直接赋值，如果没有直接赋值则需要用构造方法进行赋值，如果有多个构造方法则多个构造方法都要为其赋值，但是不能用set方法赋值。</p>\n<p>7、成员变量在堆内存中是有默认值的，final固定的是成员变量的手动赋值不是内存中的默认值。</p>\n<p>8、被final修饰的静态成员变量只能直接赋值或者通过静态代码块赋值。</p>\n<hr>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a><strong>多态性</strong></h2><ol>\n<li>对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类的引用）</li>\n<li>多态的使用，虚拟方法调用有了对象的多态性后,我们在编译期，只能调用父类声明的方法，但在运行期，我们实际指向的是子类重写父类方法。<br><code>总结：编译，看左边；运行,看右边。</code><br>如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Pet</span> <span class=\"variable\">qq</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>();  <span class=\"comment\">//对象的多态性：父类的引用指向子类的对象</span></span><br><span class=\"line\"><span class=\"type\">Pet</span> <span class=\"variable\">ww</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();</span><br></pre></td></tr></table></figure></li>\n<li>多态性的使用前提：<code>只适用于方法，不适用于属性（属性不会被覆盖和重写）</code><br>如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pet qq=<span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>();</span><br><span class=\"line\">System.out.println(qq.j);   <span class=\"comment\">//调用父类的变量</span></span><br></pre></td></tr></table></figure></li>\n<li>“不要犯傻，如果它不是晚绑定，它就不是多态”</li>\n</ol>\n<h1 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h1><h3 id=\"abstract-抽象的\"><a href=\"#abstract-抽象的\" class=\"headerlink\" title=\"abstract 抽象的\"></a>abstract 抽象的</h3><ol>\n<li>可以用来修饰：类、方法</li>\n<li>具体的</li>\n</ol>\n<p>abstract修饰类：抽象类</p>\n<ul>\n<li><blockquote>\n<p>不能实例化</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>抽象类一定有构造器</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>都会提供抽象类的子类</p>\n</blockquote>\n</li>\n</ul>\n<p>abstract修饰方法：抽象方法</p>\n<ul>\n<li><blockquote>\n<p>抽象方法只方法声明，没方法体</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>包含抽象方法的类，一定是个抽象类。反之，抽象类中可以没有抽象方法的。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>若子类重写了父类中所的抽象方法后，此子类可实例化</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>若子类没重写父类中的所的抽象方法，则子类也是一个抽象类，需要abstract修饰</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li>注意点：</li>\n</ol>\n<ul>\n<li><blockquote>\n<ol>\n<li>abstract不能用来修饰：属性、构造器等结构</li>\n</ol>\n</blockquote>\n</li>\n<li><blockquote>\n<ol start=\"2\">\n<li>abstract不能用来修饰私方法、静态方法、final的方法、final的类</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n","categories":["Java"],"tags":["java容易忘记的"]},{"title":"Linux实用命令","url":"/2022/04/19/Linux%E5%AE%9E%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/","content":"<h2 id=\"pwd-指令\"><a href=\"#pwd-指令\" class=\"headerlink\" title=\"pwd 指令\"></a><strong>pwd 指令</strong></h2><p><code>显示当前工作目录的绝对路径</code></p>\n<h2 id=\"ls-指令\"><a href=\"#ls-指令\" class=\"headerlink\" title=\"ls 指令\"></a><strong>ls 指令</strong></h2><h3 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h3><blockquote>\n<p><font color=\"#FF0000\"> -a  </font>——<em>显示当前目录所有的文件和目录，包括隐藏的</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> -l  </font>——<em>以列表的方式显示信息</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> -h  </font>——<em>显示文件大小时，以 k , m, G单位显示</em></p>\n</blockquote>\n<h2 id=\"cd-指令\"><a href=\"#cd-指令\" class=\"headerlink\" title=\"cd 指令\"></a><strong>cd 指令</strong></h2><h3 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\"> cd ~  </font>——<em>回到自己的家目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> cd ..  </font>——<em>回到当前目录的上一级目录</em></p>\n</blockquote>\n<h2 id=\"mkdir指令\"><a href=\"#mkdir指令\" class=\"headerlink\" title=\"mkdir指令\"></a><strong>mkdir指令</strong></h2><h3 id=\"常用参数-1\"><a href=\"#常用参数-1\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\"> mkdir &#x2F;home&#x2F;zw </font>——<em>创建一个目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> mkdir -p &#x2F;home&#x2F;zw </font>——<em>如果目录不存在的就新创建</em>一个。 </p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> mkdir -m 777 &#x2F;home&#x2F;zw</font>——<em>建立目录时，同时设置目录权限。</em></p>\n</blockquote>\n<h2 id=\"touch指令\"><a href=\"#touch指令\" class=\"headerlink\" title=\"touch指令\"></a><strong>touch指令</strong></h2><h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\"> touch hello.txt </font>——<em>创建一个空文件 hello.txt</em></p>\n</blockquote>\n<h2 id=\"cp指令-copy-拷贝\"><a href=\"#cp指令-copy-拷贝\" class=\"headerlink\" title=\"cp指令[copy 拷贝]\"></a><strong>cp指令[copy 拷贝]</strong></h2><h3 id=\"常用参数-2\"><a href=\"#常用参数-2\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><h4 id=\"cp-选项-source【源】-dest【目的文件】\"><a href=\"#cp-选项-source【源】-dest【目的文件】\" class=\"headerlink\" title=\"cp [选项] source【源】 dest【目的文件】\"></a>cp [选项] source【源】 dest【目的文件】</h4><blockquote>\n<p><font color=\"#FF0000\"> cp -r &#x2F;home&#x2F;zw&#x2F;hello.txt &#x2F;home&#x2F;jj</font>——<em>递归复制整个文件夹,将hello.txt 拷贝到jj目录下</em></p>\n</blockquote>\n<h2 id=\"rm指令\"><a href=\"#rm指令\" class=\"headerlink\" title=\"rm指令\"></a><strong>rm指令</strong></h2><h3 id=\"常用参数-3\"><a href=\"#常用参数-3\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\">rm &#x2F;home&#x2F;zw&#x2F;hello.txt</font>——<em>[选项]  要删除的文件或目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">-r</font>——<em>递归删除整个文件夹</em> </p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">-f</font>——<em>强制删除不提示</em></p>\n</blockquote>\n<h2 id=\"mv指令\"><a href=\"#mv指令\" class=\"headerlink\" title=\"mv指令\"></a><strong>mv指令</strong></h2><h3 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">mv &#x2F;home&#x2F;zw&#x2F;Hello</font>——<em>(功能描述：重命名)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">mv &#x2F;home&#x2F;zw&#x2F;Hello &#x2F;home&#x2F;jj</font>——<em>(功能描述：移动文件或目录)</em></p>\n</blockquote>\n<h2 id=\"cat指令\"><a href=\"#cat指令\" class=\"headerlink\" title=\"cat指令\"></a><strong>cat指令</strong></h2><h3 id=\"基本语法-2\"><a href=\"#基本语法-2\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">cat &#x2F;home&#x2F;zw&#x2F;Hello.txt</font>——<em>(功能描述：查看文件内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">cat -n &#x2F;ect&#x2F;profile </font>——<em>(功能描述：显示文件内容，并显示行号)</em></p>\n</blockquote>\n<h3 id=\"使用细节\"><a href=\"#使用细节\" class=\"headerlink\" title=\"使用细节\"></a>使用细节</h3><pre><code>   cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more\ncat  xxx.txt | more  (把cat xxx.txt 输出结果交给 more 处理)\n</code></pre>\n<h2 id=\"more指令\"><a href=\"#more指令\" class=\"headerlink\" title=\"more指令\"></a><strong>more指令</strong></h2><p><code>介绍：more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键.</code></p>\n<h3 id=\"基本语法-3\"><a href=\"#基本语法-3\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">more &#x2F;etc&#x2F;profile<br> </font>——<em>(功能描述：采用more查看文件 )</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页；</td>\n</tr>\n<tr>\n<td align=\"left\">Enter</td>\n<td align=\"left\">代表向下翻『一行』；</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">代表立刻离开 more ，不再显示该文件内容。</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+F</td>\n<td align=\"left\">向下滚动一屏</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+B</td>\n<td align=\"left\">返回上一屏</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">:f</td>\n<td align=\"left\">输出文件名和当前行的行号</td>\n</tr>\n</tbody></table>\n<h2 id=\"less指令\"><a href=\"#less指令\" class=\"headerlink\" title=\"less指令\"></a><strong>less指令</strong></h2><p><code>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示</code>需要加载内容，<font color=\"#FF0000\">对于显示大型文件具有较高的效率。</font></p>\n<h3 id=\"基本语法-4\"><a href=\"#基本语法-4\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">less &#x2F;etc&#x2F;profile<br> </font>——<em>(功能描述：采用more查看文件 )</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页；</td>\n</tr>\n<tr>\n<td align=\"left\">[pagedown]</td>\n<td align=\"left\">向下翻动一页</td>\n</tr>\n<tr>\n<td align=\"left\">[pageup]</td>\n<td align=\"left\">向上翻动一页；</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;字串</td>\n<td align=\"left\">向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td>\n</tr>\n<tr>\n<td align=\"left\">?字串</td>\n<td align=\"left\">向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">离开 less 这个程序；</td>\n</tr>\n</tbody></table>\n<h2 id=\"echo指令\"><a href=\"#echo指令\" class=\"headerlink\" title=\"echo指令\"></a><strong>echo指令</strong></h2><p><code>echo命令的功能是在终端窗口显示器上显示一段文字，一般起到一个提示的作用。</code></p>\n<p>基本语法</p>\n<blockquote>\n<p><font color=\"#FF0000\">echo ‘That you are a pig is a fact ‘<br> </font>——<em>(功能描述：终端窗口显示器上显示一段文字)</em><br><font color=\"#FF0000\">echo $HOME<br> </font>——<em>(功能描述：显示输出 当前用户的登录子目录)</em></p>\n</blockquote>\n<h2 id=\"head指令\"><a href=\"#head指令\" class=\"headerlink\" title=\"head指令\"></a><strong>head指令</strong></h2><p> <code>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容 基本语法 </code></p>\n<h3 id=\"基本语法-5\"><a href=\"#基本语法-5\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">head &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(功能描述：查看文件头10行内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">head -n 5 &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(查看文件头5行内容，5可以是任意行数)</em></p>\n</blockquote>\n<h2 id=\"tail指令\"><a href=\"#tail指令\" class=\"headerlink\" title=\"tail指令\"></a><strong>tail指令</strong></h2><h3 id=\"基本语法-6\"><a href=\"#基本语法-6\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">tail &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(功能描述：查看文件头10行内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">tail -n 5 &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(查看文件头5行内容，5可以是任意行数)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">head -f 5 &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(实时追踪该文档的所有更新)</em></p>\n</blockquote>\n","categories":["Linux"],"tags":["Linux实用命令"]},{"title":"java常用类","url":"/2022/05/31/java%E5%B8%B8%E7%94%A8%E7%B1%BB/","content":"<h1 id=\"String的特性\"><a href=\"#String的特性\" class=\"headerlink\" title=\"String的特性\"></a><center>String的特性</center></h1><ul>\n<li><font color=\"red\">String类：代表字符串。</font>Java 程序中的所有字符串字面值（如 “abc” ）都作 为此类的实例实现。</li>\n<li>String是一个final类，代表<font color=\"red\">不可变的字符序列</font>。</li>\n<li>字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。</li>\n<li>String对象的字符内容是存储在一个字符数组value[]中的。</li>\n</ul>\n<p><strong>源代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span></span><br><span class=\"line\"><span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class=\"line\"><span class=\"comment\">/** The value is used for character storage. */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">char</span> value[];</span><br><span class=\"line\"><span class=\"comment\">/** Cache the hash code for the string */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> hash; <span class=\"comment\">// Default to 0</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"理解String的不可变性\"><a href=\"#理解String的不可变性\" class=\"headerlink\" title=\"理解String的不可变性\"></a>理解String的不可变性</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.testng.annotations.Test;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/5/31</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//String的使用</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringTest</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    String:字符串，使用一对“”引起来表示</span></span><br><span class=\"line\"><span class=\"comment\">    1.String 声明为final的，不可被继承</span></span><br><span class=\"line\"><span class=\"comment\">    2.String 实现了Serializable接口：表示字符串是支持序列化的</span></span><br><span class=\"line\"><span class=\"comment\">        实现了Comparable接口：表示String可以比较大小</span></span><br><span class=\"line\"><span class=\"comment\">    3.String：内部定义了final chat[] value用于存储字符串数据的</span></span><br><span class=\"line\"><span class=\"comment\">    4.String: 代表不可变的字符串序列。简称：不可变性</span></span><br><span class=\"line\"><span class=\"comment\">    通过字面量的方式（区别于new）,给一个字符串赋值，此时字符串值声明在字符串常量池中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        String s1=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        String s2=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1==s2);   <span class=\"comment\">//比较s1和s2的地址值</span></span><br><span class=\"line\">        <span class=\"comment\">//结果为：true 常量池不会存储相同内容的字符串,所以s1和s2的地址都是相同的</span></span><br><span class=\"line\"></span><br><span class=\"line\">        s1=<span class=\"string\">&quot;hello&quot;</span>;   <span class=\"comment\">//1. 当对字符串重新赋值时，需要重写指定内存区域赋值</span></span><br><span class=\"line\">        <span class=\"comment\">//不能使用原有的value进行赋值（重新开辟赋值地址，存储hello，地址也变了）</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;******************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s3=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        s3+=<span class=\"string\">&quot;def&quot;</span>;</span><br><span class=\"line\">        System.out.println(s3);</span><br><span class=\"line\">        <span class=\"comment\">//2. 对现有的字符串进行连接操作时，也需要重新指定内存区域赋值</span></span><br><span class=\"line\">        <span class=\"comment\">//不能使用原有的value进行赋值（也就是进行拼接操作，也会重新开辟内存地址）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String s4=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        String s5=s4.replace(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;m&quot;</span>); </span><br><span class=\"line\">        <span class=\"comment\">//将下标为0的字符替换改变 重新开辟一个新地址存储</span></span><br><span class=\"line\">        <span class=\"comment\">//3.当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域</span></span><br><span class=\"line\">        System.out.println(s4==s5);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String的不同实例方式对比\"><a href=\"#String的不同实例方式对比\" class=\"headerlink\" title=\"String的不同实例方式对比\"></a>String的不同实例方式对比</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">String的实例方式</span><br><span class=\"line\">方式一：通过字面量定义的方式</span><br><span class=\"line\">方式二：通过new + 构造器的方式</span><br><span class=\"line\"></span><br><span class=\"line\">面试题： String s = new String(&quot;abc&quot;); 方式创建对象，在内存中创建了几个对象？</span><br><span class=\"line\">两个： 一个是堆空间中的new结构，另一个是char[]对应的常量池中的数据：“abc”</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过字面量定义的方式，此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中</span></span><br><span class=\"line\">       String s1=<span class=\"string\">&quot;javaEE&quot;</span>;</span><br><span class=\"line\">       String s2=<span class=\"string\">&quot;javaEE&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//通过new + 构造器的方式：此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值</span></span><br><span class=\"line\">       String s3= <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;javaEE&quot;</span>);</span><br><span class=\"line\">       String s4= <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;javaEE&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s1 == s2);  <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(s1 == s3);  <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s1 == s4);  <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s3 == s4);  <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;*****************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(p1.name.equals(p2.name));  <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(p1.name==p2.name);       <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//true   比较的是String数组的地址直，常量池中只有一个  Tom在常量池里面</span></span><br><span class=\"line\">        <span class=\"comment\">// 他们都指向常量池的“tom&quot; 而常量池里面只有一个tom</span></span><br><span class=\"line\"></span><br><span class=\"line\">        p1.name=<span class=\"string\">&quot;Jerry&quot;</span>;</span><br><span class=\"line\">        System.out.println(p2.name);   <span class=\"comment\">//Tom</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String不同拼接操作的对比\"><a href=\"#String不同拼接操作的对比\" class=\"headerlink\" title=\"String不同拼接操作的对比\"></a>String不同拼接操作的对比</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    结论：</span></span><br><span class=\"line\"><span class=\"comment\">    1.常量与常量的拼接结果在常量池。且常量池中不会存在相同的常量</span></span><br><span class=\"line\"><span class=\"comment\">    2.只要其中有一个是变量，结果就在堆中</span></span><br><span class=\"line\"><span class=\"comment\">    3.如果拼接的结果调用intern()方法，返回值就在常量池中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        String s1=<span class=\"string\">&quot;javaEE&quot;</span>;</span><br><span class=\"line\">        String s2=<span class=\"string\">&quot;hadoop&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        String s3=<span class=\"string\">&quot;javaEEhadoop&quot;</span>;</span><br><span class=\"line\">        String s4=<span class=\"string\">&quot;jvaEE&quot;</span>+<span class=\"string\">&quot;hadoop&quot;</span>;</span><br><span class=\"line\">        String s5=s1+<span class=\"string\">&quot;hadoop&quot;</span>;</span><br><span class=\"line\">        String s6=<span class=\"string\">&quot;javaEE&quot;</span>+s2;</span><br><span class=\"line\">        String s7=s1+s2;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(s3 == s4);   <span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(s3 == s5);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s3 == s6);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s3 == s7);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s5 == s6);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s5 == s7);   <span class=\"comment\">//false</span></span><br><span class=\"line\">        System.out.println(s6 == s7);   <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String s8=s6.intern();          <span class=\"comment\">//返回值得到的s8使用的常量值中已经存在的&quot;javaEEhadoop&quot;</span></span><br><span class=\"line\">        System.out.println(s3 == s8);   <span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String常用的方法1\"><a href=\"#String常用的方法1\" class=\"headerlink\" title=\"String常用的方法1\"></a>String常用的方法1</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span>:返回字符串的长度： <span class=\"keyword\">return</span> value.length</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"title function_\">charAt</span><span class=\"params\">(<span class=\"type\">int</span> index)</span>:返回某索引处的字符<span class=\"keyword\">return</span> value[index]</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>:判断是否是空字符串：<span class=\"keyword\">return</span> value.length == <span class=\"number\">0</span></span><br><span class=\"line\">String <span class=\"title function_\">toLowerCase</span><span class=\"params\">()</span>:使用默认语言环境，将 String 中的所有字符转换为小写</span><br><span class=\"line\">String <span class=\"title function_\">toUpperCase</span><span class=\"params\">()</span>:使用默认语言环境，将 String 中的所有字符转换为大写</span><br><span class=\"line\">String <span class=\"title function_\">trim</span><span class=\"params\">()</span>:返回字符串的副本，忽略前导空白和尾部空白</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span>:比较字符串的内容是否相同</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">equalsIgnoreCase</span><span class=\"params\">(String anotherString)</span>:与equals方法类似，忽略大小写</span><br><span class=\"line\">String <span class=\"title function_\">concat</span><span class=\"params\">(String str)</span>:将指定字符串连接到此字符串的结尾。 等价于用“+”</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">compareTo</span><span class=\"params\">(String anotherString)</span>:比较两个字符串的大小</span><br><span class=\"line\">String <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">int</span> beginIndex)</span>:返回一个新的字符串，它是此字符串的从 beginIndex开始截取到最后的一个子字符串。</span><br><span class=\"line\">String <span class=\"title function_\">substring</span><span class=\"params\">(<span class=\"type\">int</span> beginIndex, <span class=\"type\">int</span> endIndex)</span>:返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       String s1=<span class=\"string\">&quot;HelloWorld&quot;</span>;</span><br><span class=\"line\">       String s2=<span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">       System.out.println(s1.equals(s2));   <span class=\"comment\">//对比字符串内容是否相同</span></span><br><span class=\"line\">       System.out.println(s1.equalsIgnoreCase(s2));  <span class=\"comment\">//忽略大小写</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String s3=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">        String s4=s3.concat(<span class=\"string\">&quot;def&quot;</span>);   <span class=\"comment\">//相当于拼接 把字符串添加到结尾</span></span><br><span class=\"line\">        System.out.println(s4);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s5=<span class=\"string\">&quot;abc&quot;</span>;   <span class=\"comment\">//一个字符对比</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s6</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abe&quot;</span>);  <span class=\"comment\">// c-e  99-101 =-1   Ascii码</span></span><br><span class=\"line\">        System.out.println(s5.compareTo(s6));</span><br><span class=\"line\"></span><br><span class=\"line\">        String s7=<span class=\"string\">&quot;为什么束手无策啊&quot;</span>;</span><br><span class=\"line\">        String s8=s7.substring(<span class=\"number\">2</span>); <span class=\"comment\">//数组下标2到末尾的字符串</span></span><br><span class=\"line\">        System.out.println(s7);</span><br><span class=\"line\">        System.out.println(s8);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s9=s7.substring(<span class=\"number\">3</span>,<span class=\"number\">7</span>); <span class=\"comment\">//数组下标2到下标5</span></span><br><span class=\"line\">        System.out.println(s9);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String常用的方法2\"><a href=\"#String常用的方法2\" class=\"headerlink\" title=\"String常用的方法2\"></a>String常用的方法2</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">endsWith</span><span class=\"params\">(String suffix)</span>:测试此字符串是否以指定的后缀结束</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">startsWith</span><span class=\"params\">(String prefix)</span>:测试此字符串是否以指定的前缀开始</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">startsWith</span><span class=\"params\">(String prefix, <span class=\"type\">int</span> toffset)</span>:测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">contains</span><span class=\"params\">(CharSequence s)</span>:当且仅当此字符串包含指定的 <span class=\"type\">char</span> 值序列时，返回 <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">indexOf</span><span class=\"params\">(String str)</span>:返回指定子字符串在此字符串中第一次出现处的索引</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">indexOf</span><span class=\"params\">(String str, <span class=\"type\">int</span> fromIndex)</span>:返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">lastIndexOf</span><span class=\"params\">(String str)</span>:返回指定子字符串在此字符串中最右边出现处的索引</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">lastIndexOf</span><span class=\"params\">(String str, <span class=\"type\">int</span> fromIndex)</span>:返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span><br><span class=\"line\">注：indexOf和lastIndexOf方法如果未找到都是返回-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       String str1=<span class=\"string\">&quot;hellowworld&quot;</span>;</span><br><span class=\"line\">       <span class=\"type\">boolean</span> <span class=\"variable\">b1</span> <span class=\"operator\">=</span>str1.endsWith(<span class=\"string\">&quot;rld&quot;</span>);  <span class=\"comment\">//测试此字符串是否按指定的后缀结束</span></span><br><span class=\"line\">       System.out.println(b1);            <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">boolean</span> b2=str1.startsWith(<span class=\"string\">&quot;He&quot;</span>);  <span class=\"comment\">//测试此字符串 是否按指定的前缀开始</span></span><br><span class=\"line\">       System.out.println(b2);            <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">boolean</span> b3=str1.startsWith(<span class=\"string\">&quot;ll&quot;</span>,<span class=\"number\">2</span>);  <span class=\"comment\">//根据指定索引  是否按照指定的前缀开始</span></span><br><span class=\"line\">       System.out.println(b3);                           <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       String str2=<span class=\"string\">&quot;wor&quot;</span>;                          <span class=\"comment\">//是否包含含指定的 char 值序列</span></span><br><span class=\"line\">       System.out.println(str1.contains(str2));    <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(str1.indexOf(<span class=\"string\">&quot;zw&quot;</span>));    <span class=\"comment\">//返回  第一次出现位置的下标 如果未找到就是 -1</span></span><br><span class=\"line\">                                                 <span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(str1.indexOf(<span class=\"string\">&quot;or&quot;</span>,<span class=\"number\">5</span>)); <span class=\"comment\">//返回 从指定的索引开始  判断</span></span><br><span class=\"line\">                                                               <span class=\"comment\">// 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">       String str3=<span class=\"string\">&quot;hellorworld&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(str3.lastIndexOf(<span class=\"string\">&quot;or&quot;</span>));  <span class=\"comment\">//返回 开始反向搜索 第一次出现位置的下标</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// 7</span></span><br><span class=\"line\">       System.out.println(str3.lastIndexOf(<span class=\"string\">&quot;or&quot;</span>,<span class=\"number\">6</span>)); <span class=\"comment\">//返回   指定的索引</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// 4</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String常用的方法3\"><a href=\"#String常用的方法3\" class=\"headerlink\" title=\"String常用的方法3\"></a>String常用的方法3</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">replace</span><span class=\"params\">(<span class=\"type\">char</span> oldChar, <span class=\"type\">char</span> newChar)</span>:返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span><br><span class=\"line\">String <span class=\"title function_\">replace</span><span class=\"params\">(CharSequence target, CharSequence replacement)</span>:使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span><br><span class=\"line\">String <span class=\"title function_\">replaceAll</span><span class=\"params\">(String regex, String replacement)</span>:使用给定的replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span><br><span class=\"line\">String <span class=\"title function_\">replaceFirst</span><span class=\"params\">(String regex, String replacement)</span>:使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">matches</span><span class=\"params\">(String regex)</span>:告知此字符串是否匹配给定的正则表达式。</span><br><span class=\"line\">String[] split(String regex):根据给定正则表达式的匹配拆分此字符串。</span><br><span class=\"line\">String[] split(String regex, <span class=\"type\">int</span> limit):根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String str1=<span class=\"string\">&quot;宜春yichun宜春&quot;</span>;</span><br><span class=\"line\">        String str2=str1.replace(<span class=\"string\">&#x27;春&#x27;</span>,<span class=\"string\">&#x27;.&#x27;</span>);   <span class=\"comment\">//注意是单引号‘号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(str2);    <span class=\"comment\">//宜.yichun宜.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String str3=str1.replace(<span class=\"string\">&quot;宜春&quot;</span>,<span class=\"string\">&quot;赣州&quot;</span>);  </span><br><span class=\"line\">        System.out.println(str3);       <span class=\"comment\">//赣州yichun赣州</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String str=<span class=\"string\">&quot;12hello34world5java67mysql89&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">string</span> <span class=\"operator\">=</span>str.replaceAll(<span class=\"string\">&quot;\\\\d+&quot;</span>,<span class=\"string\">&quot;,&quot;</span>).replaceAll(<span class=\"string\">&quot;^,|,$&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把字符串中的数字替换成 ， 如果结果中开头和结尾有 ， 的话就去掉</span></span><br><span class=\"line\">        System.out.println(string);    <span class=\"comment\">////hello,world,java,mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\">        str=<span class=\"string\">&quot;12345&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> matches=str.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>);   <span class=\"comment\">//正则表达式</span></span><br><span class=\"line\">        System.out.println(matches);  <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String tel=<span class=\"string\">&quot;0571-4534289&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> result=tel.matches(<span class=\"string\">&quot;0571-\\\\d&#123;7,8&#125;&quot;</span>);   <span class=\"comment\">//正则表达式</span></span><br><span class=\"line\">        System.out.println(result);   <span class=\"comment\">//true</span></span><br><span class=\"line\">        <span class=\"comment\">//判断这是否是一个杭州的固定电话</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;***********************&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        str=<span class=\"string\">&quot;hello|world|java&quot;</span>;</span><br><span class=\"line\">        String[] strs=str.split(<span class=\"string\">&quot;\\\\|&quot;</span>);   <span class=\"comment\">//对 | 进行切片 </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(strs[i]);   <span class=\"comment\">//hello  world  java</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        str2 =<span class=\"string\">&quot;hello.world.java&quot;</span>;</span><br><span class=\"line\">        String[] strs2=str2.split(<span class=\"string\">&quot;\\\\.&quot;</span>);  <span class=\"comment\">//对 , 进行切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; strs2.length; i++) &#123;</span><br><span class=\"line\">            System.out.println(strs2[i]);  <span class=\"comment\">//hello  world  java</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串相关的类：String与基本数据类型转换\"><a href=\"#字符串相关的类：String与基本数据类型转换\" class=\"headerlink\" title=\"字符串相关的类：String与基本数据类型转换\"></a>字符串相关的类：String与基本数据类型转换</h1><ul>\n<li><p><strong>字符串 -&gt; 基本数据类型、包装类</strong></p>\n<ul>\n<li>Integer包装类的public static int <font color=\"red\">parseInt(String s)</font>：可以将由“数字”字 符组成的字符串转换为整型。</li>\n<li>类似地,使用java.lang包中的Byte、Short、Long、Float、Double类调相应 的类方法可以将由<font color=\"red\">“数字”字符</font>组成的字符串，转化为相应的基本数据类型。</li>\n</ul>\n</li>\n<li><p><strong>基本数据类型、包装类 -&gt;字符串</strong></p>\n<ul>\n<li>调用String类的public String <font color=\"red\">valueOf(int n)</font>可将int型转换为字符串</li>\n<li>相应的**valueOf(byte b)、valueOf(long l)、valueOf(float f)、valueOf(double  d)、valueOf(boolean b)**可由参数的相应类型到字符串的转换</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Auther</span>:kli_zw</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Date</span>: 2022/6/3</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>: PACKAGE_NAME</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>:1.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    复习:</span></span><br><span class=\"line\"><span class=\"comment\">    String 与基本数据类型、包装类型之间的转换</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    String --&gt; 基本数据类型、包装类：调用包装类的静态方法：parseXxx(str)</span></span><br><span class=\"line\"><span class=\"comment\">    基本数据类型、包装类 --&gt; String:调用String重载的valueOf(xxx)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String str1=<span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// int num = (int)str1; //错误的</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span>Integer.parseInt(str1);    <span class=\"comment\">//String向 基本数据类型转换 要调用包装类</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String str2=String.valueOf(num);   <span class=\"comment\">//基本数据类型向 String转换使用String重载的valueOf方法</span></span><br><span class=\"line\">        String str3=num+<span class=\"string\">&quot;&quot;</span>;                <span class=\"comment\">//使用拼接也是可以的</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(str1==str3);   <span class=\"comment\">//堆内存  是不等于常量池的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Java"],"tags":["java常用类"]},{"title":"equals的若干问题解答","url":"/2022/04/21/equals%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/","content":"<p>详细解答：<a href=\"https://www.cnblogs.com/skywang12345/p/3324958.html\">Java hashCode() 和 equals()的若干问题解答</a></p>\n<h1 id=\"引用于：javaGuide-做的笔记\"><a href=\"#引用于：javaGuide-做的笔记\" class=\"headerlink\" title=\"引用于：javaGuide 做的笔记\"></a>引用于：javaGuide 做的笔记</h1><h2 id=\"String-equals-和-Object-equals-有何区别？\"><a href=\"#String-equals-和-Object-equals-有何区别？\" class=\"headerlink\" title=\"String#equals() 和 Object#equals() 有何区别？\"></a>String#equals() 和 Object#equals() 有何区别？</h2><ol>\n<li>操作少量的数据: 适用 String</li>\n<li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li>\n<li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li>\n</ol>\n<p>String 中的 equals 方法是被重写过的，比较的是 String 字符串的值是否相等。 Object 的 equals 方法是比较的对象的内存地址。</p>\n<h2 id=\"String-s1-x3D-new-String-“abc”-这句话创建了几个字符串对象？\"><a href=\"#String-s1-x3D-new-String-“abc”-这句话创建了几个字符串对象？\" class=\"headerlink\" title=\"String s1 &#x3D; new String(“abc”);这句话创建了几个字符串对象？\"></a>String s1 &#x3D; new String(“abc”);这句话创建了几个字符串对象？</h2><p>会创建 1 或 2 个字符串：</p>\n<ul>\n<li>如果字符串常量池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。</li>\n<li>如果字符串常量池中没有字符串常量“abc”，那么它将首先在字符串常量池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</li>\n</ul>\n<p>验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">// 堆内存的地址值</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">System.out.println(s1 == s2);<span class=\"comment\">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class=\"line\">System.out.println(s1.equals(s2));<span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-类型的变量和常量做“-”运算时发生了什么？\"><a href=\"#String-类型的变量和常量做“-”运算时发生了什么？\" class=\"headerlink\" title=\"String 类型的变量和常量做“+”运算时发生了什么？\"></a>String 类型的变量和常量做“+”运算时发生了什么？</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;str&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ing&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;str&quot;</span> + <span class=\"string\">&quot;ing&quot;</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span> str1 + str2; <span class=\"comment\">//在堆上创建的新的对象</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str5</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;string&quot;</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">System.out.println(str3 == str4);<span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(str3 == str5);<span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(str4 == str5);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/04/21/equals%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/1.jpg\" alt=\"1\"><br>注意 ：比较 String 字符串的值是否相等，可以使用 equals() 方法。 String 中的 equals 方法是被重写过的。 Object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是字符串的值是否相等。如果你使用 &#x3D;&#x3D; 比较两个字符串是否相等的话，IDEA 还是提示你使用 equals() 方法替换。</p>\n<blockquote>\n<p>对于基本数据类型来说，&#x3D;&#x3D; 比较的是值。对于引用数据类型来说，&#x3D;&#x3D;比较的是对象的内存地址。</p>\n</blockquote>\n<p> 对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。</p>\n<p> <code>字符串常量池</code> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"type\">String</span> <span class=\"variable\">aa</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>; <span class=\"comment\">// 放在常量池中</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>; <span class=\"comment\">// 从常量池中查找</span></span><br><span class=\"line\">System.out.println(aa==bb);<span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n","categories":["Java"],"tags":["equals的若干问题解答"]},{"title":"java异常","url":"/2022/05/11/java%E5%BC%82%E5%B8%B8/","content":"<ul>\n<li><p>异常：在Java语言中，将程序执行中发生的不正常情况称为“异常” 。 (开发过程中的语法错误和逻辑错误不是异常)</p>\n</li>\n<li><p>Java程序在执行过程中所发生的异常事件可分为两类：</p>\n<ol>\n<li><font color=\"red\">Error</font>：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源 耗尽等严重情况。比如：StackOverflowError和OOM。一般不编写针对性 的代码进行处理。</li>\n<li><font color=\"red\">Exception</font>: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使 用针对性的代码进行处理。例如：</li>\n</ol>\n<ul>\n<li>空指针访问</li>\n<li>数组角标越界</li>\n<li>试图读取不存在的文件</li>\n<li>网络连接中断</li>\n</ul>\n</li>\n<li><p>程序员通常只能处理Exception，而对Error无能为力</p>\n</li>\n<li><p>对于这些错误，一般有两种解决方法：一是遇到错误就终止程序 的运行。另一种方法是由程序员在编写程序时，就考虑到错误的 检测、错误消息的提示，以及错误的处理。</p>\n</li>\n<li><p>捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。 比如：除数为0，数组下标越界等</p>\n<p>​         分类： <font color=\"red\">编译时异常</font>和 <font color=\"red\">运行时异常</font></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"运行时异常-unchecked，RuntimeException\"><a href=\"#运行时异常-unchecked，RuntimeException\" class=\"headerlink\" title=\"运行时异常(unchecked，RuntimeException):\"></a>运行时异常(unchecked，RuntimeException):</h1><p> <font color=\"red\">要编译过了，出现的错误才叫运行时异常！！！也就是骗过了编译器以下就是常用的运行时异常</font></p>\n<h1 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">main(args);</span><br><span class=\"line\"><span class=\"comment\">// java.lang.StackOverflowError</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"堆溢出\"><a href=\"#堆溢出\" class=\"headerlink\" title=\"堆溢出\"></a>堆溢出</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Integer[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[<span class=\"number\">1024</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>];</span><br><span class=\"line\"><span class=\"comment\">// java.lang.OutOfMemoryError</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"空指针异常\"><a href=\"#空指针异常\" class=\"headerlink\" title=\"空指针异常\"></a>空指针异常</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">str =<span class=\"literal\">null</span>;</span><br><span class=\"line\">System.out.println(str.charAt(<span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">// java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组角标越界\"><a href=\"#数组角标越界\" class=\"headerlink\" title=\"数组角标越界\"></a>数组角标越界</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>[] arr =<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">System.out.println(arr[<span class=\"number\">10</span>]);</span><br><span class=\"line\"><span class=\"comment\">// java.lang.ArrayIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"字符串越界\"><a href=\"#字符串越界\" class=\"headerlink\" title=\"字符串越界\"></a>字符串越界</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">System.out.println(str.charAt(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">//java.lang.StringIndexOutOfBoundsException</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"类型转换异常\"><a href=\"#类型转换异常\" class=\"headerlink\" title=\"类型转换异常\"></a>类型转换异常</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> (String)obj;</span><br><span class=\"line\"><span class=\"comment\">//java.lang.ClassCastException  本身是个Date,然后向上转型，也就是多态，接下来强转，转成String，从编译的角度语法是ok的，但是会出现类型转换异常</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数字格式异常\"><a href=\"#数字格式异常\" class=\"headerlink\" title=\"数字格式异常\"></a>数字格式异常</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span><span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">str=<span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> Integer.parseInt(str);</span><br><span class=\"line\"><span class=\"comment\">// java.lang.NumberFormatException</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"输入不匹配异常\"><a href=\"#输入不匹配异常\" class=\"headerlink\" title=\"输入不匹配异常\"></a>输入不匹配异常</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">score</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">System.out.println(score);</span><br><span class=\"line\"><span class=\"comment\">// java.util.InputMismatchException   这里输入除了整形数字以外，就会报出异常</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"算数异常\"><a href=\"#算数异常\" class=\"headerlink\" title=\"算数异常\"></a>算数异常</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b=<span class=\"number\">0</span>;</span><br><span class=\"line\">System.out.println(a/b);</span><br><span class=\"line\"><span class=\"comment\">//java.lang.ArithmeticException  b为 0 时，运行时会得到无限大的数，这就叫算数的异常</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"编译时异常\"><a href=\"#编译时异常\" class=\"headerlink\" title=\"编译时异常\"></a>编译时异常</h1><h4 id=\"就是编译时出现的异常，直接报错了-也就是一般编译器IDE提示的异常比如：语法错误。\"><a href=\"#就是编译时出现的异常，直接报错了-也就是一般编译器IDE提示的异常比如：语法错误。\" class=\"headerlink\" title=\"就是编译时出现的异常，直接报错了,也就是一般编译器IDE提示的异常比如：语法错误。\"></a>就是编译时出现的异常，直接报错了,也就是一般编译器IDE提示的异常比如：语法错误。</h4><hr>\n<h1 id=\"异常处理机制一：-try-catch-finally\"><a href=\"#异常处理机制一：-try-catch-finally\" class=\"headerlink\" title=\"异常处理机制一： try-catch-finally\"></a>异常处理机制一： try-catch-finally</h1><p><code>ctrl+alt+T   快捷键</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">...... <span class=\"comment\">//可能产生异常的代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>( ExceptionName1 e )&#123;</span><br><span class=\"line\">...... <span class=\"comment\">//当产生ExceptionName1型异常时的处置措施</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>( ExceptionName2 e )&#123;</span><br><span class=\"line\">...... <span class=\"comment\">//当产生ExceptionName2型异常时的处置措施</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">[ <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">...... <span class=\"comment\">//无论是否发生异常，都无条件执行的语句</span></span><br><span class=\"line\">&#125; ]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;hello.txt&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>try</strong></p>\n<p>捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现 异常的代码放在try语句块中。</p>\n</li>\n<li><p><strong>catch (Exceptiontype e)</strong></p>\n<p>在catch语句块中是对异常对象进行处理的代码。每个try语句块可以伴随 一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</p>\n</li>\n<li><p><strong>finally</strong></p>\n<p>捕获异常的最后一步是通过finally语句为异常处理提供一个 统一的出口,使得在控制流转到程序的其它部分以前,能够对程序的状态作统一的管理。</p>\n<p> <font color=\"red\">不论在try代码块中是否发生了异常事件，catch语句是否执 行，catch语句是否有异常，catch语句中是否有return， finally块中的语句都会被执行。</font></p>\n<p>finally语句和catch语句是任选的</p>\n</li>\n</ul>\n<p><strong>当try语句中出现异常时</strong>，会执⾏catch中的语句，java运⾏时系统会⾃动将catch括号中的Exception e 初始化，也就是实例化Exception类型的对象。e是此名称。然后e（引⽤）会⾃动调⽤Exception类中指定的⽅法，也就出现了e.printStackTrace() <font color=\"red\">printStackTrace()⽅法的意思是：在命令⾏打印异常信息在程序中出错的位置及原因。（这是⽩话解释，⽐较容易理解)</font></p>\n<p><strong>在捕获异常的时候</strong>，⼤家都可能要⽤到这样的⼀条语句：e.printStackTrace();e是Throwable的实例异常对象，⽤在catch语句中，相当于⼀个形参，⼀旦try捕获到了异常，那么就将这个异常信息交给e，由e处理，printStackTrace()是异常类的⼀个⽅法。与它重载的⽅法还有printStackTrace(PrintStream s) 和printStackTrace(PrintWriter s)。在Throwable类中,printStackTrace()内部是这样执⾏的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printStackTrace</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        printStackTrace(System.err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它调⽤了printStackTrace(PrintStream s)⽅法。err是System类当中的⼀个静态PrintStream类型字段。所以它能传递进去。</p>\n<h2 id=\"捕获异常的有关信息\"><a href=\"#捕获异常的有关信息\" class=\"headerlink\" title=\"捕获异常的有关信息\"></a>捕获异常的有关信息</h2><p>与其它对象一样，可以访问一个异常对象的成员变量或调用它的 方法。</p>\n<ul>\n<li><font color=\"red\">getMessage()</font>   获取异常信息，返回字符串</li>\n<li><font color=\"red\">printStackTrace()</font> 获取异常类名和异常信息，以及异常出 现在程序中的位置。返回值void。</li>\n</ul>\n<h2 id=\"异常处理机制-举例-1\"><a href=\"#异常处理机制-举例-1\" class=\"headerlink\" title=\"异常处理机制:举例(1)\"></a>异常处理机制:举例(1)</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IndexOutExp</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">String friends[] = &#123; <span class=\"string\">&quot;lisa&quot;</span>, <span class=\"string\">&quot;bily&quot;</span>, <span class=\"string\">&quot;kessy&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">System.out.println(friends[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;index err&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;\\nthis is the end&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">程序IndexOutExp.java运行结果：java IndexOutExp</span><br><span class=\"line\">lisa</span><br><span class=\"line\">bily</span><br><span class=\"line\">kessy</span><br><span class=\"line\">index err</span><br><span class=\"line\">this is the en</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常处理机制-举例-2\"><a href=\"#异常处理机制-举例-2\" class=\"headerlink\" title=\"异常处理机制:举例(2)\"></a>异常处理机制:举例(2)</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;    <span class=\"comment\">//默认为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> y;</span><br><span class=\"line\">        <span class=\"type\">test</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">test</span>();     <span class=\"comment\">//这个是自己本类，具体的类名</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            y = <span class=\"number\">3</span> / c.x;      <span class=\"comment\">//调用x</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ArithmeticException e) &#123;     <span class=\"comment\">//算数异常错误</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;test by zero error!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;program ends ok!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">程序DivideZero1运行结果：java DivideZero1</span><br><span class=\"line\">divide by zero error!</span><br><span class=\"line\">program ends ok!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常处理机制-IO-Exception\"><a href=\"#异常处理机制-IO-Exception\" class=\"headerlink\" title=\"异常处理机制 IO Exception\"></a>异常处理机制 IO Exception</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;E:/JDBC/src/zw.txt&quot;</span>);   <span class=\"comment\">//实际文件路径</span></span><br><span class=\"line\">            <span class=\"type\">FileInputStream</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">            <span class=\"type\">int</span> b;</span><br><span class=\"line\">            b = in.read();</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (b != -<span class=\"number\">1</span>) &#123;      <span class=\"comment\">//到了末尾就不读了</span></span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) b);</span><br><span class=\"line\">                b = in.read();   </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            in.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;It&#x27;s ok!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>小知识</strong>：<code>FileInputStream类的成员方法read()的功能是每次从相应的(本地为 ASCII码编码格式)文件中读取一个字节，并转换成0~255之间的int型整数返回， 到达文件末尾时则返回-1。</code></p>\n<h1 id=\"异常处理机制二：throws\"><a href=\"#异常处理机制二：throws\" class=\"headerlink\" title=\"异常处理机制二：throws\"></a>异常处理机制二：throws</h1><ul>\n<li><strong>声明抛出异常是Java中处理异常的第二种方式</strong><ol>\n<li>如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这 种异常，则此方法应<font color=\"red\">显示地</font>声明抛出异常，表明该方法将不对这些异常进行处理， 而由该方法的<font color=\"red\">调用者</font>负责处理。</li>\n<li>在方法声明中用<font color=\"red\">throws</font>语句可以声明抛出异常的列表，throws后面的异常类型可 以是方法中产生的异常类型，也可以是它的父类。</li>\n</ol>\n</li>\n<li>声明抛出异常举例：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readFile</span><span class=\"params\">(String file)</span> <span class=\"keyword\">throws</span> FileNotFoundException &#123;</span><br><span class=\"line\">……</span><br><span class=\"line\"><span class=\"comment\">// 读文件的操作可能产生FileNotFoundException类型的异常</span></span><br><span class=\"line\"><span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">..……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手动抛出异常-throw\"><a href=\"#手动抛出异常-throw\" class=\"headerlink\" title=\"手动抛出异常 throw\"></a>手动抛出异常 throw</h1><ul>\n<li><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并 抛出，也可根据需要使用人工创建并抛出。</p>\n<ol>\n<li><p>首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运 行环境)。</p>\n<p><font color=\"red\">IOException e &#x3D; new IOException(); </font></p>\n<p><font color=\"red\">throw e;</font></p>\n</li>\n<li><p>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将 会产生语法错误：</p>\n<p><font color=\"red\">throw new String(“want to throw”);</font></p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"总结-异常处理5个关键字\"><a href=\"#总结-异常处理5个关键字\" class=\"headerlink\" title=\"总结:异常处理5个关键字\"></a><center>总结:异常处理5个关键字</center></h1><p><img src=\"/2022/05/11/java%E5%BC%82%E5%B8%B8/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%85%B3%E9%94%AE%E5%AD%97.png\"></p>\n<center>一首小悟结束异常处理</center>\n\n<p>世界上最遥远的<font color=\"red\">距离</font>，是我在if里你在else里，似乎一直相伴又永远分离；</p>\n<p>世界上最痴心的<font color=\"red\">等待</font>，是我当case你是switch，或许永远都选不上自己；</p>\n<p>世界上最真情的<font color=\"red\">相依</font>，是你在try我在catch。无论你发神马脾气，我都默 默承受，静静处理。到那时，再来期待我们的finally。</p>\n<p>注：</p>\n<p>部分笔记来源：尚硅谷</p>\n","categories":["Java"],"tags":["java异常"]},{"title":"Markdown笔记","url":"/2022/03/30/markdown/","content":"<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h5 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h5><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6><blockquote>\n<p>这是一段引用    </p>\n</blockquote>\n<p><em>斜体</em></p>\n<p><strong>粗体</strong></p>\n<p><em><strong>粗斜体</strong></em></p>\n<hr>\n<p><del>删除线</del></p>\n<p><u>下划线</u></p>\n<p>把大象放进冰箱</p>\n<ol>\n<li>打开冰箱</li>\n<li>大象放进去</li>\n<li>关上冰箱<br>无序列表</li>\n</ol>\n<ul>\n<li><p>阿斯顿</p>\n</li>\n<li><p>啊实打实大大</p>\n</li>\n<li><p>阿斯顿</p>\n</li>\n<li><p><input checked disabled type=\"checkbox\"> \n吃饭</p>\n</li>\n<li><p><input disabled type=\"checkbox\"> \n睡觉</p>\n</li>\n<li><p><input disabled type=\"checkbox\"> \n打豆豆</p>\n</li>\n</ul>\n<p>代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- 冒号在左边就左对齐 两边居中对齐 -->\n<p>表格:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">姓名</th>\n<th align=\"right\">年龄</th>\n<th align=\"center\">成绩</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">张三</td>\n<td align=\"right\">19</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"left\">王五</td>\n<td align=\"right\">19</td>\n<td align=\"center\">66</td>\n</tr>\n</tbody></table>\n<p>快捷键：<br>ctrl+B      横线<br>alt+c       批量修改格式</p>\n<p>脚注：<br>一键三连[^三连]<br>[^三连]:点赞、收藏、投币<br><br></p>\n<hr>\n<p>链接:<br>这是一个链接<a href=\"https://www.bilibili.com/\">bilibili</a><br>这个链接用1作为网站变量[百度][1]<br>这个链接用2作为网站变量[博客][2]<br>[1]:<a href=\"http://www.baidu.com/\">http://www.baidu.com/</a><br>[2]:<a href=\"http://blog-zw.top/\">http://blog-zw.top/</a></p>\n<p><img src=\"/2022/03/30/markdown/you.png\" alt=\"you\"></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=333750&auto=1&height=66\"></iframe>\n\n","categories":["Markdown"],"tags":["markdown"]},{"title":"mysql笔记","url":"/2022/04/24/mysql%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"MySQL数据库基础知识\"><a href=\"#MySQL数据库基础知识\" class=\"headerlink\" title=\"MySQL数据库基础知识\"></a>MySQL数据库基础知识</h1><ul>\n<li><p><strong>概念</strong><br>MySQL是一款开源、跨平台的关系型数据库管理系统(DBMS，Database Management System)。关系型数据库将数据存放在结构化的一个或多个表中，表之间相互关联，反应客观事物的本质联系。数据库管理系统提供对数据的安全性和完整性控制。</p>\n</li>\n<li><p><strong>表</strong><br>关系型数据库中，数据库表是一系列二维数组的集合，用来存储数据和操作数据的逻辑，由记录(行)和字段(列)组成。</p>\n</li>\n<li><p><strong>主键</strong><br>主键(Primary Key)又称主码，用于唯一的标识表中的每一条记录，可以由一列或多列组合。主键列上不能重复值，也不能为空(null)，用来做确定数据唯一性的标识。</p>\n</li>\n<li><p><strong>SQL语言</strong></p>\n<p>SQL(Structured Query Language)，结构化查询语言，用来对数据库进行增、删、改、查等操作的语言。主要包括以下四个部分：</p>\n<ol>\n<li>数据库定义语言(DDL);</li>\n<li>数据库操作语言(DML);</li>\n<li>数据库查询语言(DQL);</li>\n<li>数据控制语言(DCL);</li>\n</ol>\n</li>\n<li><p><strong>数据库访问接口</strong></p>\n<p>​    不同的程序设计语言会有不同的数据库访问接口，程序语言通过接口执行SQL语句，进行数据库管理，主要接口有以下几种：</p>\n<ol>\n<li><p>ODBC(Open Database Connectivity)，开放数据库互联，为访问不同的SQL数据库提供了公共接口，使用SQL作为访问数据库的标准，一个应用程序可以通过共同的一组代码访问不同的SQL数据库管理系统(DBMS)。Access、MySQL、Oracle数据库均可用ODBC API进行访问。</p>\n</li>\n<li><p>JDBC(Java Database Connectivity)，Java数据库连接，是Java连接数据库的标准方法，通过执行SQL语句的Java API，为多种关系型数据库提供统一访问，是一组用Java语言编写的类和接口。</p>\n</li>\n<li><p>ADO.NET(ADO：ActiveX Data Objects)，微软.NET框架下一组用于和数据源交互的面相对象的库。提供了对关系型数据、XML和应用程序数据的访问，允许和不同类型的数据库和数据库进行交互。</p>\n</li>\n<li><p>PDO(PHP Data Object)，为PHP访问数据库定义了一个轻量级、一致性的接口，提供一个数据访问的抽象层，这样无论使用什么数据库，都可以通过一致的函数执行查询和获取数据，为PHP5后加入的功能。</p>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h1 id=\"报错信息代码\"><a href=\"#报错信息代码\" class=\"headerlink\" title=\"报错信息代码\"></a>报错信息代码</h1><p>  1064 语法错误</p>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> database zw;</span><br></pre></td></tr></table></figure>\n<h3 id=\"比较完善的写法，创建数据库，这个写法，就不会出现1007报错\"><a href=\"#比较完善的写法，创建数据库，这个写法，就不会出现1007报错\" class=\"headerlink\" title=\"比较完善的写法，创建数据库，这个写法，就不会出现1007报错\"></a>比较完善的写法，创建数据库，这个写法，就不会出现1007报错</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> ZW; </span><br><span class=\"line\">    <span class=\"comment\">-- create database if not exists zw;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写\"><a href=\"#最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写\" class=\"headerlink\" title=\"最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写\"></a>最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span>  <span class=\"keyword\">CREATE</span> DATABASE IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> ZW1 <span class=\"keyword\">DEFAULT</span> CHARSET UTF8 <span class=\"keyword\">COLLATE</span>  utf8_general_ci;</span><br><span class=\"line\"><span class=\"comment\">--     小写： create database if not exists zw1 default charset utf8 collate  uft8_general_ci;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SHOW</span> databases;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> databases;</span><br><span class=\"line\">    <span class=\"comment\">-- drop </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选择数据库\"><a href=\"#选择数据库\" class=\"headerlink\" title=\"选择数据库\"></a>选择数据库</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> use mysql;</span><br><span class=\"line\">    <span class=\"comment\">-- 选择 数据库名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看当前在哪个库中\"><a href=\"#查看当前在哪个库中\" class=\"headerlink\" title=\"查看当前在哪个库中\"></a>查看当前在哪个库中</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> database();</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看数据库里有多少张表\"><a href=\"#查看数据库里有多少张表\" class=\"headerlink\" title=\"查看数据库里有多少张表\"></a>查看数据库里有多少张表</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">show</span> tables;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span>  <span class=\"keyword\">desc</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"comment\">--      desc 表名</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"指定字段查询-user-host\"><a href=\"#指定字段查询-user-host\" class=\"headerlink\" title=\"指定字段查询  user host\"></a>指定字段查询  user host</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span>  <span class=\"keyword\">select</span> <span class=\"keyword\">user</span>,host <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"comment\">--      查询      字段         表名</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a><strong><center>简单查询</center></strong></h1><p>查询一个字段</p>\n<p>select 字段名 from 表名；</p>\n<p>select和from都是关键字</p>\n<p>字段名和表名都是标识符</p>\n<p><strong>强调</strong></p>\n<p>对于SQL语句来说，都是通用的</p>\n<p>所有的SQL语句以“;”结尾</p>\n<p>另外SQL语句不区分大小写，都行</p>\n<p><strong>查询两个字段或多个字段</strong></p>\n<p>用逗号隔开</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,name,password,address,phone <span class=\"keyword\">from</span> <span class=\"keyword\">user</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>查询所有字段</strong></p>\n<p>第一种方式：可以把每个字段都写上</p>\n<p>第二种方式：可以使用*</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这种方式的缺点：</p>\n<pre><code>1. 效率低\n2. 可读性差\n</code></pre>\n<p>在实际开发中不建议，可以自己玩没问题，你可以在DOS命令窗口中想快速的看一看全表数据可以采用这种方式。</p>\n<p><strong>给查询的列起别名</strong></p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id <span class=\"keyword\">as</span> 编号,name <span class=\"keyword\">as</span> 姓名 <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name <span class=\"keyword\">as</span> 姓名 <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"comment\">-- as 后面跟的就是别名</span></span><br></pre></td></tr></table></figure>\n\n<p>使用  <strong>as</strong> 关键字起别名</p>\n<p>__注意__：只是将显示的查询结果列名显示为 <code>编号姓名</code>，原表的列名还是叫id,name </p>\n<p>__记住__：select 语句是永远都不会进行修改操作的。（因为只负责查询）</p>\n<p><strong>as</strong>  关键字可以省略吗？ 可以的     (使用空格省略)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name 姓名,id 编号 <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<p>假设起的别名有空格怎么办？  sql语句也会进行编译</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name 姓名,id 编 号 <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n\n<p>DBMS看到这样的语句，进行SQL语句的编译，不符合语法，编译报错。</p>\n<p>怎么解决？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> name <span class=\"string\">&#x27;姓 名&#x27;</span>,id <span class=\"string\">&#x27;编 号&#x27;</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> name &quot;姓 名&quot;,id &quot;编 号&quot; <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br><span class=\"line\">           <span class=\"comment\">-- 如果起别名要加个空格，就加个 单引号或者双引号</span></span><br></pre></td></tr></table></figure>\n\n<p>注意：在所有的数据库当中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle数据库中用不了。但是在mysql中可以使用。</p>\n<p>再次强调：数据库中的字符串都是用单引号括起来。这是标准的。双引号不标准。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary<span class=\"operator\">*</span><span class=\"number\">12</span> <span class=\"keyword\">from</span> employees;</span><br><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary<span class=\"operator\">*</span><span class=\"number\">12</span> 一年的工资 <span class=\"keyword\">from</span> employees; <span class=\"comment\">--起别名</span></span><br></pre></td></tr></table></figure>\n\n<p>结论：字段可以使用数学表达式！！！  然后起别名</p>\n<hr>\n<h1 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a><center>条件查询</center></h1><p><strong>1. 什么是条件查询?</strong></p>\n<p>不是将表中所有的数据都查出来，是查询符合条件的。</p>\n<p>语法格式：</p>\n<p>​    select</p>\n<p>​        字段1，字段2，字段3….</p>\n<p>​    from</p>\n<p>​        表名</p>\n<p>​    where</p>\n<p>​        条件：</p>\n<p><strong>2. 都有哪些条件?</strong></p>\n<p><strong>&#x3D; 等于</strong></p>\n<p>查询 名 工资等于2500的名字的工资情况？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> salary<span class=\"operator\">=</span><span class=\"number\">2500</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>&lt;&gt;或！&#x3D;不等于</strong></p>\n<p>查询 名 工资不等于2500的工资情况？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> salary<span class=\"operator\">!=</span><span class=\"number\">2500</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> salary<span class=\"operator\">&lt;&gt;</span><span class=\"number\">2500</span>;  <span class=\"comment\">--小于号和大于号组成的不等号</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>&lt;  小于</strong></p>\n<p>查询 名 工资小于2500的工资情况？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> salary<span class=\"operator\">&lt;</span><span class=\"number\">2500</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>&lt; &#x3D;小于等于</strong></p>\n<p>查询 名 工资小于等于2500的工资情况？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> salary<span class=\"operator\">&lt;=</span><span class=\"number\">2500</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>&gt;  大于</strong></p>\n<p>查询 名 工资大于2500的工资情况？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> salary<span class=\"operator\">&gt;</span><span class=\"number\">2500</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>&gt; &#x3D;大于等于</strong></p>\n<p>查询 名 工资小于等于2500的工资情况？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> first_name,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> salary<span class=\"operator\">&gt;=</span><span class=\"number\">2500</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询姓为： Austin 的工资和编号情况</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> last_name 姓,employee_id 编号,salary 工资 <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> last_name<span class=\"operator\">=</span><span class=\"string\">&#x27;Austin&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>__betwee …. and ….    两者之间，等同于 &gt;&#x3D; and &lt;&#x3D; __</p>\n<p>查询工资在2500和3000之间的员工信息？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"笔记部分来源：\"><a href=\"#笔记部分来源：\" class=\"headerlink\" title=\"笔记部分来源：\"></a>笔记部分来源：</h2><p>[1]：<a href=\"https://www.jianshu.com/p/77a2c88a81c9\">https://www.jianshu.com/p/77a2c88a81c9</a><br>[2]：<a href=\"https://www.bilibili.com/video/BV1WT4y1a7K6\">https://www.bilibili.com/video/BV1WT4y1a7K6</a></p>\n<p>[3]：<a href=\"https://www.bilibili.com/video/BV1Vy4y1z7EX\">https://www.bilibili.com/video/BV1Vy4y1z7EX</a></p>\n","categories":["mysql基础"],"tags":["mysql"]},{"title":"Python笔记","url":"/2022/03/31/python/","content":"<h1 id=\"python基础笔记\"><a href=\"#python基础笔记\" class=\"headerlink\" title=\"python基础笔记\"></a><center>python基础笔记</center></h1><ul>\n<li>不单单只能导入变量函数和类都可以使用</li>\n</ul>\n<p>import&lt;模块名&gt;   会导入这个模块所有的代码元素，在访问时需要加前缀“模块名”</p>\n<p>form &lt;模块名&gt; import&lt;代码元素&gt;  会导入模块名中的代码元素(变量)直接使用代码元素名字 在访问时不需要加前缀“模块名”</p>\n<p>form &lt;模块名&gt; import&lt;代码元素&gt; as &lt;代码元素别名&gt;<br>会导入模块名中的代码元素(变量) 但使用时需要使用别名 在访问时不需要加前缀“模块名”</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> world</span><br><span class=\"line\"><span class=\"keyword\">from</span> world <span class=\"keyword\">import</span> Z</span><br><span class=\"line\"><span class=\"keyword\">from</span> world <span class=\"keyword\">import</span> x <span class=\"keyword\">as</span> x2</span><br><span class=\"line\">x=<span class=\"number\">100</span></span><br><span class=\"line\">y=<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (y)       <span class=\"comment\">#访问当前模块变量y</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (world.y) <span class=\"comment\">#访问world模块变量y</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (z)       <span class=\"comment\">#访问world模块变量z</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (x2)      <span class=\"comment\">#x2是wor1d模块x别名</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数字类型的数据\"><a href=\"#数字类型的数据\" class=\"headerlink\" title=\"数字类型的数据\"></a>数字类型的数据</h1><ul>\n<li><p>Python中有6种主要的内置数据类型：数字、字符串、列表、元组、集合和字典。</p>\n</li>\n<li><p>Python中有4种数字类型：整数类型、浮类型、复数类型和布尔类型</p>\n</li>\n</ul>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><ul>\n<li>Python中的整数类型为int类</li>\n<li>整数类型只有一种就是int</li>\n<li>默认情况下表示10进制</li>\n</ul>\n<ol>\n<li>二进制表示方式以阿拉伯数字 0B或(b) 作为前缀</li>\n<li>八进制表示方式以阿拉伯数字 0O或(o) 作为前缀</li>\n<li>十六进制表示方式以阿拉伯数字 0X或(x)作为前缀<h2 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h2></li>\n</ol>\n<ul>\n<li>Python中的浮点类型为float类</li>\n</ul>\n<ol>\n<li>print(type(1.))  打印出来也是float类型</li>\n<li>采用科学及算法表示科学计数法中会使用E(或e)表示10的指数，如e2表示10</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3.36e2</span>)  //结果：<span class=\"number\">336.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3.36e-2</span>) //结果：<span class=\"number\">0.0336</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">.36e-2</span>)  //结果：<span class=\"number\">0.00336</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"复数类型\"><a href=\"#复数类型\" class=\"headerlink\" title=\"复数类型\"></a>复数类型</h2><ul>\n<li>复数在数学中被表示为：a+bi,其中a被称为实部b被称为虚部，被称为虚数单位。</li>\n</ul>\n<ol>\n<li>复数不能单独存在，他们总是和一个0.0的实属部分一起来构成一个复数</li>\n<li>复数有实数部分和虚数部分构成</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span>+<span class=\"number\">2j</span></span><br><span class=\"line\">b=<span class=\"number\">1</span>+<span class=\"number\">4j</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a+b)   // (<span class=\"number\">2</span>+<span class=\"number\">6j</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)) // &lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;complex&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><ul>\n<li>Python中的布尔类型为bool类：它只有两个值：True和False。</li>\n</ul>\n<ol>\n<li>布尔类型也属于整数类型，也可以说是整数类型的一种子类</li>\n<li>在python只有True和False、</li>\n</ol>\n<p>注意可以进行转换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">0</span>))   //整数<span class=\"number\">0</span>被转换为<span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">2</span>))   //其他非零整数例如<span class=\"number\">2</span>被转换为<span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"string\">&#x27;&#x27;</span>))  //其他非空字符串会被转换为<span class=\"literal\">True</span> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>([]))  //(空列表）被转换为<span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(&#123;&#125;))  //(空字典）被转换为<span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数字类型的相互转换\"><a href=\"#数字类型的相互转换\" class=\"headerlink\" title=\"数字类型的相互转换\"></a>数字类型的相互转换</h2><ol>\n<li>隐式类型的转换（自动类型转换）</li>\n<li>显式类型的转换（通过某种手段转换）</li>\n</ol>\n<h3 id=\"隐式类型转换：\"><a href=\"#隐式类型转换：\" class=\"headerlink\" title=\"隐式类型转换：\"></a>隐式类型转换：</h3><ul>\n<li>数字之间可以进行数学计算，在<br>进行数学计算时若数字类型不同，则<br>会发生隐式类型的转换。</li>\n</ul>\n<h4 id=\"转换表\"><a href=\"#转换表\" class=\"headerlink\" title=\"转换表\"></a><center>转换表</center></h4><table>\n<thead>\n<tr>\n<th align=\"center\">操作数1的类型</th>\n<th align=\"center\">操作数为2的类型</th>\n<th align=\"center\">转换后的类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">布尔</td>\n<td align=\"center\">整数</td>\n<td align=\"center\">整数</td>\n</tr>\n<tr>\n<td align=\"center\">布尔、整数</td>\n<td align=\"center\">浮点</td>\n<td align=\"center\">浮点</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span>+<span class=\"literal\">True</span>)      //布尔值<span class=\"literal\">True</span>被转换为整数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>)       //整数<span class=\"number\">1</span>被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"literal\">True</span>)    //布尔值<span class=\"literal\">True</span>被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>+<span class=\"literal\">True</span>)  //整数<span class=\"number\">1</span>和布尔值都被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>+<span class=\"literal\">False</span>) //整数<span class=\"number\">1</span>和布尔值都被转换为浮点数</span><br></pre></td></tr></table></figure>\n<h3 id=\"显式类型转换：\"><a href=\"#显式类型转换：\" class=\"headerlink\" title=\"显式类型转换：\"></a>显式类型转换：</h3><ul>\n<li>需要使用转换函数进行显示转换分别是 int()、float()和bool()函数，来实现数字类型之间的转换</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>))   //<span class=\"built_in\">int</span>(<span class=\"number\">1.0</span>)被转换为整数<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">False</span>))   //布尔数值<span class=\"literal\">False</span>使用<span class=\"built_in\">int</span>()函数返回<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">True</span>))    //布尔数值<span class=\"literal\">True</span>使用<span class=\"built_in\">int</span>()函数返回<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">0.6</span>))     //浮点数值使用<span class=\"built_in\">int</span>()函数会截掉小数部分</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"number\">5</span>))     //整数值使用f1oat()函数会加上小数部分(<span class=\"number\">.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"literal\">False</span>)) //布尔数值<span class=\"literal\">False</span>使用<span class=\"built_in\">float</span>()函数返回<span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"literal\">True</span>))  //与齿数值<span class=\"literal\">True</span>使用<span class=\"built_in\">float</span>()函数返回<span class=\"number\">1.0</span></span><br><span class=\"line\">结果：</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>赋值运算符</li>\n<li>运算符优先级<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\">加</td>\n<td align=\"center\">a+b</td>\n<td align=\"center\">求a与b的和</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">减</td>\n<td align=\"center\">a-b</td>\n<td align=\"center\">求a与b的差</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">乘</td>\n<td align=\"center\">a*b</td>\n<td align=\"center\">求a与b的积</td>\n</tr>\n<tr>\n<td align=\"center\">&#x2F;</td>\n<td align=\"center\">除</td>\n<td align=\"center\">a&#x2F;b</td>\n<td align=\"center\">求a除以b的商</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">取余</td>\n<td align=\"center\">a%b</td>\n<td align=\"center\">求a除以b的余数</td>\n</tr>\n<tr>\n<td align=\"center\">**</td>\n<td align=\"center\">幂</td>\n<td align=\"center\">a**b</td>\n<td align=\"center\">求a的b次幂</td>\n</tr>\n<tr>\n<td align=\"center\">&#x2F;&#x2F;</td>\n<td align=\"center\">地板除法</td>\n<td align=\"center\">a&#x2F;&#x2F;b</td>\n<td align=\"center\">求小于a与b的商的最大整数</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n<li>除法和地板除法的区别：&#x2F; 除的数结果是float类型 地板除法除的结果是整数类型<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span>    </span><br><span class=\"line\"><span class=\"built_in\">print</span>(-a)    //-a是对a的取反运算</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>//<span class=\"number\">2</span>)  // <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>/<span class=\"number\">2</span>)   // <span class=\"number\">1.5</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">3</span>//<span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">8</span>/<span class=\"number\">3</span>) // -<span class=\"number\">2</span></span><br><span class=\"line\">注意：</span><br><span class=\"line\">//   负数的地板除法运算 和整数不同 得到商后 像上取整，结果也就变成-<span class=\"number\">2</span> 了</span><br></pre></td></tr></table></figure>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x3D;&#x3D;</td>\n<td align=\"center\">等于</td>\n<td align=\"center\">a&#x3D;&#x3D;b</td>\n<td align=\"center\">a等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">!&#x3D;</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">a!&#x3D;b</td>\n<td align=\"center\">与&#x3D;&#x3D;相反</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">a&gt;b</td>\n<td align=\"center\">a大于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">a&lt;b</td>\n<td align=\"center\">a小于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&#x3D;</td>\n<td align=\"center\">大于等于</td>\n<td align=\"center\">a&gt;&#x3D;b</td>\n<td align=\"center\">a大于等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&#x3D;</td>\n<td align=\"center\">小于等于</td>\n<td align=\"center\">a&lt;&#x3D;b</td>\n<td align=\"center\">a小于等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">not</td>\n<td align=\"center\">逻辑非</td>\n<td align=\"center\">not a</td>\n<td align=\"center\">a为True时，值为False,a为False时，值为True</td>\n</tr>\n<tr>\n<td align=\"center\">and</td>\n<td align=\"center\">逻辑与</td>\n<td align=\"center\">a and b</td>\n<td align=\"center\">a、b全为Tue时，计算结果为True,否则为False</td>\n</tr>\n<tr>\n<td align=\"center\">or</td>\n<td align=\"center\">逻辑或</td>\n<td align=\"center\">a or b</td>\n<td align=\"center\">a、b全为Falset时，计算结果为False,否则为True</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>注意: 结果值为 True 和 False (bool值)</p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">~</td>\n<td align=\"center\">位反</td>\n<td align=\"center\">~X</td>\n<td align=\"center\">将x的值按位取反</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">位与</td>\n<td align=\"center\">x &amp; y</td>\n<td align=\"center\">将x与y按位进行位与运算</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">位或</td>\n<td align=\"center\">x | y</td>\n<td align=\"center\">将x与y按位进行位或运算</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">位异或</td>\n<td align=\"center\">x ^ y</td>\n<td align=\"center\">将x与y按位进行位异或运算</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&gt;</td>\n<td align=\"center\">右移</td>\n<td align=\"center\">x &gt;&gt; a</td>\n<td align=\"center\">将x右移a位，高位采用符号位补位</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&lt;</td>\n<td align=\"center\">左移</td>\n<td align=\"center\">x &lt;&lt; a</td>\n<td align=\"center\">将x左移a位，低位用0补位</td>\n</tr>\n</tbody></table>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2>","categories":["Python"],"tags":["python"]},{"title":"为什么Java中只有值传递？","url":"/2022/04/26/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/","content":"<h1 id=\"为什么-Java-中只有值传递？\"><a href=\"#为什么-Java-中只有值传递？\" class=\"headerlink\" title=\"为什么 Java 中只有值传递？\"></a>为什么 Java 中只有值传递？</h1><p>开始之前，我们先来搞懂下面这两个概念：</p>\n<ul>\n<li>形参&amp;实参</li>\n<li>值传递&amp;引用传递</li>\n</ul>\n<h1 id=\"形参-amp-实参\"><a href=\"#形参-amp-实参\" class=\"headerlink\" title=\"形参&amp;实参\"></a>形参&amp;实参</h1><p>方法的定义可能会用到参数（有参的方法），参数在程序语言中分为：</p>\n<ul>\n<li>实参（实际参数） ：用于传递给函数&#x2F;方法的参数，必须有确定的值。</li>\n<li>形参（形式参数） ：用于定义函数&#x2F;方法，接收实参，不需要有确定的值。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// hello 为实参</span></span><br><span class=\"line\">sayHello(hello);</span><br><span class=\"line\"><span class=\"comment\">// str 为形参</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"值传递-amp-引用传递\"><a href=\"#值传递-amp-引用传递\" class=\"headerlink\" title=\"值传递&amp;引用传递\"></a>值传递&amp;引用传递</h1>程序设计语言将实参传递给方法（或函数）的方式分为两种：</li>\n<li>值传递 ：方法接收的是实参值的拷贝，会创建副本。</li>\n<li>引用传递 ：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</li>\n</ul>\n<p><code>很多程序设计语言（比如 C++、 Pascal )提供了两种参数传递的方式，不过，在 Java 中只有值传递。</code></p>\n<h1 id=\"为什么-Java-只有值传递？\"><a href=\"#为什么-Java-只有值传递？\" class=\"headerlink\" title=\"为什么 Java 只有值传递？\"></a>为什么 Java 只有值传递？</h1><p>为什么说 Java 只有值传递呢？ 不需要太多废话，我通过 3 个例子来给大家证明。</p>\n<h1 id=\"案例1：传递基本类型参数\"><a href=\"#案例1：传递基本类型参数\" class=\"headerlink\" title=\"案例1：传递基本类型参数\"></a>案例1：传递基本类型参数</h1><h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">    swap(num1, num2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;num1 = &quot;</span> + num1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;num2 = &quot;</span> + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;a = &quot;</span> + a);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;b = &quot;</span> + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出：\"><a href=\"#输出：\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">20</span></span><br><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\">num1 = <span class=\"number\">10</span></span><br><span class=\"line\">num2 = <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解析：\"><a href=\"#解析：\" class=\"headerlink\" title=\"解析：\"></a>解析：</h2><h3 id=\"在-swap-方法中，a、b-的值进行交换，并不会影响到-num1、num2。因为，a、b-的值，只是从-num1、num2-的复制过来的。也就是说，a、b-相当于-num1、num2-的副本，副本的内容无论怎么修改，都不会影响到原件本身。\"><a href=\"#在-swap-方法中，a、b-的值进行交换，并不会影响到-num1、num2。因为，a、b-的值，只是从-num1、num2-的复制过来的。也就是说，a、b-相当于-num1、num2-的副本，副本的内容无论怎么修改，都不会影响到原件本身。\" class=\"headerlink\" title=\"在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。\"></a>在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</h3><h1 id=\"案例2：传递引用类型参数1\"><a href=\"#案例2：传递引用类型参数1\" class=\"headerlink\" title=\"案例2：传递引用类型参数1\"></a>案例2：传递引用类型参数1</h1><h2 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">  System.out.println(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  change(arr);</span><br><span class=\"line\">  System.out.println(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将数组的第一个元素变为0</span></span><br><span class=\"line\">  array[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出：-1\"><a href=\"#输出：-1\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解析：-1\"><a href=\"#解析：-1\" class=\"headerlink\" title=\"解析：\"></a>解析：</h2><h3 id=\"看了这个案例很多人肯定觉得-Java-对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说-change-方法的参数拷贝的是-arr-（实参）的地址，因此，它和-arr-指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳-Java-对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\"><a href=\"#看了这个案例很多人肯定觉得-Java-对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说-change-方法的参数拷贝的是-arr-（实参）的地址，因此，它和-arr-指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳-Java-对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\" class=\"headerlink\" title=\"看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\"></a>看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例</h3><h1 id=\"案例3-：传递引用类型参数2\"><a href=\"#案例3-：传递引用类型参数2\" class=\"headerlink\" title=\"案例3 ：传递引用类型参数2\"></a>案例3 ：传递引用类型参数2</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">xiaoZhang</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;小张&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">xiaoLi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;小李&quot;</span>);</span><br><span class=\"line\">    swap(xiaoZhang, xiaoLi);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;xiaoZhang:&quot;</span> + xiaoZhang.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;xiaoLi:&quot;</span> + xiaoLi.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(Person person1, Person person2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> person1;</span><br><span class=\"line\">    person1 = person2;</span><br><span class=\"line\">    person2 = temp;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;person1:&quot;</span> + person1.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;person2:&quot;</span> + person2.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出:\"></a>输出:</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">person1:小李</span><br><span class=\"line\">person2:小张</span><br><span class=\"line\">xiaoZhang:小张</span><br><span class=\"line\">xiaoLi:小李</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析：-2\"><a href=\"#解析：-2\" class=\"headerlink\" title=\"解析：\"></a>解析：</h3><h3 id=\"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap-方法的参数-person1-和-person2-只是拷贝的实参-xiaoZhang-和-xiaoLi-的地址。因此，-person1-和-person2-的互换只是拷贝的两个地址的互换罢了，并不会影响到实参-xiaoZhang-和-xiaoLi-。\"><a href=\"#怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap-方法的参数-person1-和-person2-只是拷贝的实参-xiaoZhang-和-xiaoLi-的地址。因此，-person1-和-person2-的互换只是拷贝的两个地址的互换罢了，并不会影响到实参-xiaoZhang-和-xiaoLi-。\" class=\"headerlink\" title=\"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此， person1 和 person2 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi 。\"></a>怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此， person1 和 person2 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi 。</h3><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"Java-中将实参传递给方法（或函数）的方式是-值传递-：\"><a href=\"#Java-中将实参传递给方法（或函数）的方式是-值传递-：\" class=\"headerlink\" title=\"Java 中将实参传递给方法（或函数）的方式是 值传递 ：\"></a>Java 中将实参传递给方法（或函数）的方式是 值传递 ：</h2><ul>\n<li>如果参数是基本类型的话，很简单，传递的就是基本类型的字面量值的拷贝，会创建副本。</li>\n<li>如果参数是引用类型，传递的就是实参所引用的对象在堆中地址值的拷贝，同样也会创建副本。</li>\n</ul>\n<h1 id=\"引用于：-JavaGuide\"><a href=\"#引用于：-JavaGuide\" class=\"headerlink\" title=\"引用于： JavaGuide\"></a>引用于： JavaGuide</h1>","categories":["Java"],"tags":["为什么Java中只有值传递？"]},{"title":"在Linux里安装jdk","url":"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85jdk/","content":"<h1 id=\"下载jdk\"><a href=\"#下载jdk\" class=\"headerlink\" title=\"下载jdk\"></a>下载jdk</h1><p>进入华为镜像网址：<a href=\"https://repo.huaweicloud.com/java/jdk/\">https://repo.huaweicloud.com/java/jdk/</a></p>\n<ol>\n<li><p>选择：8u181-b13</p>\n</li>\n<li><p>下载：jdk-8u181-linux-x64.tar.gz</p>\n</li>\n</ol>\n<img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85jdk/2.png\" alt=\"11\" style=\"zoom:67%;\">\n\n<img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85jdk/3.png\" style=\"zoom: 67%;\">\n\n<hr>\n<h1 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h1><ol>\n<li><strong>进入到安装包目录下，解压安装包到opt目录</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>tar -zxvf jdk -8u22l-linux-x64.tar.gz  -C &#x2F;opt</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>配置java环境配置</strong>  进入etc&#x2F;profile配置全局变量</li>\n</ol>\n<ul>\n<li><blockquote>\n<p> <strong>vi &#x2F;etc&#x2F;profile</strong>        </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p> <strong>export JAVA_HOME&#x3D;&#x2F; opt&#x2F;java</strong> </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p> <strong>export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>配置完成</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>source &#x2F;etc&#x2F;profile</strong>    —-重新加载配置文件</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>java -version</strong>               —- 查看jdk版本</p>\n</blockquote>\n<p><code>后续可以使用命令 javac xxx.java  进行编译  java  xxx  运行</code></p>\n</li>\n</ul>\n","categories":["Linux"],"tags":["在Linux里安装jdk"]},{"title":"在Linux里安装mysql","url":"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/","content":"<h1 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h1><ul>\n<li><blockquote>\n<p><strong>tar -zxvf mysql(版本号.tar.gz)  -C &#x2F;opt</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>cd &#x2F;opt</strong>  </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mv mysql(版本号)    mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"进入配置全局环境变量-可选择设置\"><a href=\"#进入配置全局环境变量-可选择设置\" class=\"headerlink\" title=\"进入配置全局环境变量(可选择设置)\"></a>进入配置全局环境变量(可选择设置)</h1><ul>\n<li><blockquote>\n<p><strong>vim &#x2F;etc&#x2F;profile</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>export MYSQL_HOME&#x3D;&#x2F;opt&#x2F;mysql</strong>  —-为实际安装目录路径</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>export PATH&#x3D;$PATH:$MYSQL_HOME&#x2F;bin</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>source &#x2F;etc&#x2F;profile</strong>  —-重新加载配置文件</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"创建用户与组-和-mysql创建目录存放数据\"><a href=\"#创建用户与组-和-mysql创建目录存放数据\" class=\"headerlink\" title=\"创建用户与组 和 mysql创建目录存放数据\"></a>创建用户与组 和 mysql创建目录存放数据</h1><ul>\n<li><blockquote>\n<p><strong>groupadd mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>useradd -r -g mysql mysql</strong> </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mkdir -p &#x2F;var&#x2F;lib&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>chown mysql:mysql  -R &#x2F;var&#x2F;lib&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h1><ul>\n<li><blockquote>\n<p><strong>vim &#x2F;etc&#x2F;my.cnf</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"keyword\">user</span><span class=\"operator\">=</span>mysql</span><br><span class=\"line\">basedir<span class=\"operator\">=</span><span class=\"operator\">/</span>opt<span class=\"operator\">/</span>mysql                                    </span><br><span class=\"line\">datadir<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql                    </span><br><span class=\"line\">socket<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.sock </span><br><span class=\"line\"><span class=\"type\">character</span><span class=\"operator\">-</span><span class=\"keyword\">set</span><span class=\"operator\">-</span>server<span class=\"operator\">=</span>utf8mb4  </span><br><span class=\"line\">symbolic<span class=\"operator\">-</span>links<span class=\"operator\">=</span><span class=\"number\">0</span></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log<span class=\"operator\">-</span>error<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>err.log</span><br><span class=\"line\">pid<span class=\"operator\">-</span>file<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.pid</span><br><span class=\"line\">[client]</span><br><span class=\"line\">port<span class=\"operator\">=</span><span class=\"number\">3306</span>  </span><br><span class=\"line\">socket<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.sock</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png\" style=\"zoom:80%;\">\n\n<h1 id=\"进入-安装目录mysql-的-bin-目录下，初始化密码\"><a href=\"#进入-安装目录mysql-的-bin-目录下，初始化密码\" class=\"headerlink\" title=\"进入 安装目录mysql 的 bin 目录下，初始化密码\"></a>进入 安装目录mysql 的 bin 目录下，初始化密码</h1><ul>\n<li><blockquote>\n<p><strong>cd &#x2F;opt&#x2F;mysql&#x2F;bin</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>.&#x2F;mysqld –initialize –user&#x3D;mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><code>复制下方图片位置初始密码</code></p>\n<p><img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/2.png\"></p>\n<p><code>注意以上图片的密码为初始密码，等下要进入MySQL修改</code></p>\n<h1 id=\"复制-mysql-的服务项至-linux-的服务项目录中\"><a href=\"#复制-mysql-的服务项至-linux-的服务项目录中\" class=\"headerlink\" title=\"复制 mysql 的服务项至 linux 的服务项目录中\"></a>复制 mysql 的服务项至 linux 的服务项目录中</h1><p><code>mysql.server 位于 support-files 目录下</code></p>\n<ul>\n<li><blockquote>\n<p><strong>cd &#x2F;opt&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>cp support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld</strong></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"设置mysql系统服务-开启开机自启动\"><a href=\"#设置mysql系统服务-开启开机自启动\" class=\"headerlink\" title=\"设置mysql系统服务 开启开机自启动\"></a>设置mysql系统服务 开启开机自启动</h1><ol>\n<li>进入系统服务文件修改 <code>vim /etc/init.d/mysqld</code> ，(这个位置为上面步骤复制创建的路径)  进入文件修改其 <code>basedir</code> 和 <code>datadir</code> 为实际对应⽬录：</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>basedir&#x3D;&#x2F;opt&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>设置MYSQL系统服务并开启⾃启</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>chmod +x &#x2F;etc&#x2F;init.d&#x2F;mysqld</strong>  —- 增加 mysqld 服务控制脚本执⾏权限</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>chkconfig –add mysqld</strong>  —- 将 mysqld 服务加⼊到系统服务</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"启动，登录-输入初始密码\"><a href=\"#启动，登录-输入初始密码\" class=\"headerlink\" title=\"启动，登录 输入初始密码\"></a>启动，登录 输入初始密码</h1><ul>\n<li><blockquote>\n<p><strong>service mysql start</strong>  —- 启动MySql服务</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mysql -uroot -p</strong>    —-  如果未设置全局变量  就<code>cd /opt/mysql/bin</code>   再次输入 mysql -uroot -p即可</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"成功进入MySQL后，修改mysql-默认的ROOT初始账户密x’x’x’x’x’x码\"><a href=\"#成功进入MySQL后，修改mysql-默认的ROOT初始账户密x’x’x’x’x’x码\" class=\"headerlink\" title=\"成功进入MySQL后，修改mysql 默认的ROOT初始账户密x’x’x’x’x’x码\"></a>成功进入MySQL后，修改mysql 默认的ROOT初始账户密x’x’x’x’x’x码</h1><ul>\n<li><blockquote>\n<p><strong>mysql&gt;alter user user() identified by “123456”;</strong> —-123456为修改后的密码</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"MySQL设置远程主机连接\"><a href=\"#MySQL设置远程主机连接\" class=\"headerlink\" title=\"MySQL设置远程主机连接\"></a>MySQL设置远程主机连接</h1><p>1. </p>\n<ul>\n<li><blockquote>\n<p><strong>mysql&gt;alter user user() identified by “123456”;</strong>  </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mysql&gt;flush privileges;</strong> —-刷新权限 使修改生效</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mysql&gt;set password for “root”@”%” &#x3D; ‘123456’;</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>退出mysql</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>exit</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>systemctl stop firewalld.service</strong> —- 关闭防火墙</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"查看主机信息更改情况\"><a href=\"#查看主机信息更改情况\" class=\"headerlink\" title=\"查看主机信息更改情况\"></a>查看主机信息更改情况</h1><ul>\n<li><blockquote>\n<p><strong>mysql&gt; use mysql”;</strong> </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>select user,host from user;”</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/3.png\"><br>小提示：<br><code>Host列指定了允许用户登录所使用的IP，比如user=root Host=192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。而%是个通配符，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host=%，表示所有IP都有连接权限。</code></p>\n<h1 id=\"远程连接错误情况\"><a href=\"#远程连接错误情况\" class=\"headerlink\" title=\"远程连接错误情况\"></a>远程连接错误情况</h1><ol>\n<li>2002的话就是没有开机后没有开启 mysql系统服务，开启即可</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>&#x2F;etc&#x2F;init.d&#x2F;mysql start   或    server mysql start   开启服务”</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>1130 没有开远程连接</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从“localhost”改成”%” “</strong></p>\n</blockquote>\n<hr>\n</li>\n</ul>\n<h1 id=\"防火墙的开启、关闭、禁用命令\"><a href=\"#防火墙的开启、关闭、禁用命令\" class=\"headerlink\" title=\"防火墙的开启、关闭、禁用命令\"></a>防火墙的开启、关闭、禁用命令</h1><p>（1）设置开机启用防火墙：<strong>systemctl enable firewalld.service</strong></p>\n<p>（2）设置开机禁用防火墙：<strong>systemctl disable firewalld.service</strong></p>\n<p>（3）启动防火墙：<strong>systemctl start firewalld</strong></p>\n<p>（4）关闭防火墙：<strong>systemctl stop firewalld</strong></p>\n<p>（5）检查防火墙状态：<strong>systemctl status firewalld</strong> </p>\n<p>（6）重启防火墙：<strong>systemctl restart firewalld.service</strong></p>\n<p>3306进行防火墙配置：<code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code></p>\n<p>开放3306端口：<code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</code></p>\n<p>查看开放端口：<code>firewall-cmd --list-ports</code></p>\n","categories":["Linux"],"tags":["在Linux里安装mysql"]},{"title":"数组的排序","url":"/2022/05/11/%E6%95%B0%E7%BB%84%E7%9A%84%E6%8E%92%E5%BA%8F/","content":"<h1 id=\"八大排序：\"><a href=\"#八大排序：\" class=\"headerlink\" title=\"八大排序：\"></a>八大排序：</h1><p><a href=\"https://blog.csdn.net/daocaokafei/article/details/122442020\">https://blog.csdn.net/daocaokafei/article/details/122442020</a></p>\n","categories":["Java"],"tags":["数组的排序"]},{"title":"面向对象 上","url":"/2022/03/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8A/","content":"<h1 id=\"面向过程与面向对象-上\"><a href=\"#面向过程与面向对象-上\" class=\"headerlink\" title=\"面向过程与面向对象 上\"></a><center>面向过程与面向对象 上</center></h1><h3 id=\"面向过程与面向对象\"><a href=\"#面向过程与面向对象\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h3><ul>\n<li>二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，<font>强调的<br>是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对<br>象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。</font></li>\n<li>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如<br>抽象、分类、继承、聚合、多态等。<h3 id=\"面向过程-POP-与-面向对象-OOP\"><a href=\"#面向过程-POP-与-面向对象-OOP\" class=\"headerlink\" title=\"面向过程(POP) 与 面向对象(OOP)\"></a>面向过程(POP) 与 面向对象(OOP)</h3></li>\n<li>封装 (Encapsulation)</li>\n<li>继承 (Inheritance)</li>\n<li>多态 (Polymorphism)<h3 id=\"面向过程与面向对象-1\"><a href=\"#面向过程与面向对象-1\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h3><h4 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程\"></a>面向过程</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 打开冰箱</span><br><span class=\"line\">2. 把大象装进冰箱</span><br><span class=\"line\">3. 把冰箱门关住</span><br></pre></td></tr></table></figure>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">人&#123;</span><br><span class=\"line\">    打开(冰箱)&#123;</span><br><span class=\"line\">        冰箱.开门();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    操作(大象)&#123;</span><br><span class=\"line\">        大象.进入(冰箱);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    关闭(冰箱)&#123;</span><br><span class=\"line\">        冰箱.关门();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">冰箱&#123;</span><br><span class=\"line\">    开门()&#123;&#125;</span><br><span class=\"line\">    关门()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">大象&#123;</span><br><span class=\"line\">    进入(冰箱)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象的思想概述\"><a href=\"#面向对象的思想概述\" class=\"headerlink\" title=\"面向对象的思想概述\"></a><center>面向对象的思想概述</center></h2></li>\n<li><h5 id=\"类-Class-和对象-Object-是面向对象的核心概念。\"><a href=\"#类-Class-和对象-Object-是面向对象的核心概念。\" class=\"headerlink\" title=\"类(Class)和对象(Object)是面向对象的核心概念。\"></a>类(Class)和对象(Object)是面向对象的核心概念。</h5></li>\n</ul>\n<ul>\n<li><blockquote>\n<p>类是对一类事物的描述，是抽象的、概念上的定义</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><h5 id=\"“万事万物皆对象”\"><a href=\"#“万事万物皆对象”\" class=\"headerlink\" title=\"“万事万物皆对象”\"></a>“万事万物皆对象”</h5></li>\n</ul>\n<ul>\n<li><blockquote>\n<p>可以理解为：类 &#x3D; 抽象概念的人；对象 &#x3D; 实实在在的某个人</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>面向对象程序设计的重点是类的设计</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>类的设计，其实就是类的成员的设计</p>\n</blockquote>\n<h2 id=\"面向对象的思想概述-1\"><a href=\"#面向对象的思想概述-1\" class=\"headerlink\" title=\"面向对象的思想概述\"></a><center>面向对象的思想概述</center></h2></li>\n</ul>\n<ul>\n<li>可以理解为：类 &#x3D; 抽象概念的人；对象 &#x3D; 实实在在的某个人</li>\n<li>面向对象程序设计的重点是类的设计</li>\n<li>类的设计，其实就是类的成员的设计</li>\n</ul>\n<h3 id=\"类的语法格式\"><a href=\"#类的语法格式\" class=\"headerlink\" title=\"类的语法格式\"></a><center>类的语法格式</center></h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">修饰符 class 类名&#123;</span><br><span class=\"line\">    属性声明;</span><br><span class=\"line\">    方法声明;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">说明：修饰符<span class=\"keyword\">public</span>:类可以被任意访问</span><br><span class=\"line\">    类的正文要用&#123; &#125;扩起来</span><br><span class=\"line\"></span><br><span class=\"line\">举例：</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;              <span class=\"comment\">//声明私有变量 age</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showAge</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;   <span class=\"comment\">//声明方法showAge()</span></span><br><span class=\"line\">            age=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的创建和使用\"><a href=\"#对象的创建和使用\" class=\"headerlink\" title=\"对象的创建和使用\"></a>对象的创建和使用</h3><ul>\n<li><blockquote>\n<p>创建对象语法： 类名 对象名 &#x3D; new 类名();</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>使用“对象名.对象成员”的方式访问对象成员（包括属性和方法）</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>说明：如果创建了一个类的多个对象，对于类中定义的属性，每个对象都拥有各自的一套副本，且互不干扰。</li>\n</ul>\n<br>\n空指针异常：就是调用  .参数 如果点之前的结构是不是null,如果是null意味着没指针，没有指针指下面的结构，就是空指针\n\n\n<h2 id=\"对象的创建和使用：匿名对象\"><a href=\"#对象的创建和使用：匿名对象\" class=\"headerlink\" title=\"对象的创建和使用：匿名对象\"></a>对象的创建和使用：匿名对象</h2><pre><code>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。如： new Person().shout();\n1.如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。\n2.我们经常将匿名对象作为实参传递给一个方法调用。\n</code></pre>\n<p>实际使用传入匿名对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">zhangshan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">zw</span> <span class=\"variable\">aa</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">zw</span>();</span><br><span class=\"line\">        aa.show(<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>());    <span class=\"comment\">//创建匿名对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">zw</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">(Student Stu)</span>&#123;    <span class=\"comment\">//传入的时候是匿名对象</span></span><br><span class=\"line\">        Stu.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["面向对象"]},{"title":"爬虫笔记","url":"/2022/04/03/%E7%88%AC%E8%99%AB/","content":"<h3 id=\"pip指令\"><a href=\"#pip指令\" class=\"headerlink\" title=\"pip指令:\"></a>pip指令:</h3><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pip install &lt;包名&gt; 安装指定的包</span><br><span class=\"line\">pip uninstall &lt;包名&gt; 删除指定的包</span><br><span class=\"line\">pip list 显示已安装的包</span><br><span class=\"line\">pip freeze 显示已经安装的包，并且以指定的格式显示</span><br></pre></td></tr></table></figure>\n<p>修改pip下载源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install 包名 -i 国内源地址</span><br><span class=\"line\">豆瓣源：https://pypi.mirrors.ustc.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>常用请求头信息</p>\n<ul>\n<li>User-Agent: 请求载体的身份标识</li>\n<li>Connection: 请求完毕后，是断开连接还是不保持连接<h4 id=\"常用响应头信息\"><a href=\"#常用响应头信息\" class=\"headerlink\" title=\"常用响应头信息\"></a>常用响应头信息</h4></li>\n<li>Content-Tyoe:服务器响应回客户端的数据类型<h4 id=\"https协议：\"><a href=\"#https协议：\" class=\"headerlink\" title=\"https协议：\"></a>https协议：</h4></li>\n<li>安全的超文本传输协议<h4 id=\"加密方式\"><a href=\"#加密方式\" class=\"headerlink\" title=\"加密方式\"></a>加密方式</h4></li>\n<li>对称密钥加密</li>\n<li>非对称密钥加密</li>\n<li>证书密钥加密<br>request模块<h4 id=\"request模块：\"><a href=\"#request模块：\" class=\"headerlink\" title=\"request模块：\"></a>request模块：</h4>是python中原生的一款基于网络请求的模块。功能非常强大，，简单便捷效率极高<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4>模拟浏览器发出请求<br>如何使用：(requests模块编码流程)</li>\n<li>指定url</li>\n<li>发请求</li>\n<li>获取相应数据</li>\n<li>持久化存储<h4 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装:\"></a>环境安装:</h4><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<h4 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a>实战编码：</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.bilibili.com&quot;</span>  <span class=\"comment\"># 指定url</span></span><br><span class=\"line\">reponse = requests.get(url=url)  <span class=\"comment\"># 发起请求,get方法回返回一个响应对象</span></span><br><span class=\"line\">page_text = reponse.text  <span class=\"comment\"># 获取响应数据text饭hi i的是字符串形式的响应数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./bilibili.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬取数据结束！！!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n网页采集器：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&quot;https://www.sogou.com/web?&quot;</span></span><br><span class=\"line\">kw = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">param = &#123;  <span class=\"comment\"># 处理url携带参数</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#对指定的url发起的请求对应的url是携带参数的</span></span><br><span class=\"line\">response = requests.get(url=url,params=param,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page_text = response.text</span><br><span class=\"line\">fileName = kw + <span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fileName, <span class=\"string\">&#x27;保存成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>\n百度翻译：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span>  <span class=\"comment\"># 1.指定url</span></span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># 2.UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">word = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入:&#x27;</span>)</span><br><span class=\"line\">data = &#123;  <span class=\"comment\"># 3.post请求参数处理(同get请求一致)  参数处理</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.post(url=post_url, data=data, headers=headers)  <span class=\"comment\"># 请求发送</span></span><br><span class=\"line\"><span class=\"comment\"># 5.获取响应数据对象：json()方法返回的是obj json类型</span></span><br><span class=\"line\">dic_obj = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fileName = word + <span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic_obj)</span><br></pre></td></tr></table></figure>\n药监总局：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首页  http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\">#首页和页面的区别就是在后面加了id，所以先去爬取每个页面的id,存储起来，然后for循环post将结果存进list,然后再格式化存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">id_list = []  <span class=\"comment\"># 存储企业的id</span></span><br><span class=\"line\">all_data_list = []  <span class=\"comment\"># 存储所有的企业的id</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">20</span>):   <span class=\"comment\">#爬取前20页</span></span><br><span class=\"line\">    page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>: page,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27; &#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> zw <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:  <span class=\"comment\"># 批量获取ID，储存id</span></span><br><span class=\"line\">        id_list.append(zw[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:  <span class=\"comment\"># 把储存的id赋值给字典</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detial_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">    all_data_list.append(detial_json)  <span class=\"comment\"># 存进列表</span></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./zw,json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ovver!!!&#x27;</span>)<span class=\"comment\"># 首页  http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\">#首页和页面的区别就是在后面加了id，所以先去爬取每个页面的id,存储起来，然后for循环post将结果存进list,然后再格式化存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">id_list = []  <span class=\"comment\"># 存储企业的id</span></span><br><span class=\"line\">all_data_list = []  <span class=\"comment\"># 存储所有的企业的id</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">20</span>):   <span class=\"comment\">#爬取前20页</span></span><br><span class=\"line\">    page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>: page,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27; &#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> zw <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:  <span class=\"comment\"># 批量获取ID，储存id</span></span><br><span class=\"line\">        id_list.append(zw[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:  <span class=\"comment\"># 把储存的id赋值给字典</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detial_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">    all_data_list.append(detial_json)  <span class=\"comment\"># 存进列表</span></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./zw,json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ovver!!!&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Python"],"tags":["爬虫"]},{"title":"面向过程：面向过程性能比面向对象高？？","url":"/2022/04/20/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E6%80%A7%E8%83%BD%E6%AF%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%EF%BC%9F%EF%BC%9F/","content":"<p>面向过程 ：面向过程性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux&#x2F;Unix等一般采用面向过程开发。</p>\n<p>—-》》<br>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p>\n<p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p>\n<p>引用：<a href=\"https://github.com/Snailclimb/JavaGuide/issues/431\">https://github.com/Snailclimb/JavaGuide/issues/431</a></p>\n","categories":["Java"],"tags":["面向过程"]}]