[{"title":"IDEA配置JDBC","url":"/2022/05/04/IDEA%E9%85%8D%E7%BD%AEJDBC/","content":"<p><a href=\"http://t.csdn.cn/6GCN2\">http://t.csdn.cn/6GCN2</a></p>\n","categories":["Java"],"tags":["IDEA配置JDBC"]},{"title":"Java多线程","url":"/2022/03/31/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/","content":"<h1 id=\"复习\"><a href=\"#复习\" class=\"headerlink\" title=\"复习\"></a>复习</h1><h3 id=\"abstract-抽象的\"><a href=\"#abstract-抽象的\" class=\"headerlink\" title=\"abstract 抽象的\"></a>abstract 抽象的</h3><ol>\n<li>可以用来修饰：类、方法</li>\n<li>具体的</li>\n</ol>\n<p>abstract修饰类：抽象类</p>\n<ul>\n<li><blockquote>\n<p>不能实例化</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>抽象类一定有构造器</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>都会提供抽象类的子类</p>\n</blockquote>\n</li>\n</ul>\n<p>abstract修饰方法：抽象方法</p>\n<ul>\n<li><blockquote>\n<p>抽象方法只方法声明，没方法体</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>包含抽象方法的类，一定是个抽象类。反之，抽象类中可以没有抽象方法的。</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>若子类重写了父类中所的抽象方法后，此子类可实例化</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>若子类没重写父类中的所的抽象方法，则子类也是一个抽象类，需要abstract修饰</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li>注意点：</li>\n</ol>\n<ul>\n<li><blockquote>\n<ol>\n<li>abstract不能用来修饰：属性、构造器等结构</li>\n</ol>\n</blockquote>\n</li>\n<li><blockquote>\n<ol start=\"2\">\n<li>abstract不能用来修饰私方法、静态方法、final的方法、final的类</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n","categories":["Java"],"tags":["Java"]},{"title":"HTML盒子模型","url":"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/","content":"<h1 id=\"关于HTML盒子模型的笔记\"><a href=\"#关于HTML盒子模型的笔记\" class=\"headerlink\" title=\"关于HTML盒子模型的笔记\"></a>关于HTML盒子模型的笔记</h1><h3 id=\"样式图：\"><a href=\"#样式图：\" class=\"headerlink\" title=\"样式图：\"></a>样式图：</h3><p><img src=\"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E9%A2%84%E8%A7%88.png\"></p>\n<p>建议：连接css文件(在css打代码更方便些)<br>  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./css/master.css&quot;</span>&gt;</span>  <span class=\"comment\">&lt;!-- herf：实际文件地址--&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><ul>\n<li>浏览器默认样式</li>\n<li>所有元素都是矩形</li>\n<li>margin: 外边距</li>\n<li>border: 边框，有很多样式，直角、圆角、颜色等</li>\n<li>padding: 内边距</li>\n<li>content: 内容，就是本身的内容，比如一段话</li>\n</ul>\n<p>在浏览器默认所有的元素和边缘有空白是怎么回事呢？</p>\n<p><code>其实就是浏览器默认的边距样式，而且不一样的浏览器，样式也可能不一样，我们可以吧默认样式去掉。</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">* &#123;  <span class=\"comment\">/*默认通配符 匹配所有标签 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;  <span class=\"comment\">/*去掉外边距*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"说一说盒子\"><a href=\"#说一说盒子\" class=\"headerlink\" title=\"说一说盒子:\"></a>说一说盒子:</h3><p>所有界面的元素都可以看出一个盒子，盒子模型就是包围内容的一个盒子。<br><img src=\"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/1.png\"></p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;              <span class=\"comment\">/*盒子的大小，高宽也就是一个矩形*/</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: aqua;    <span class=\"comment\">/*背景颜色*/</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">30px</span>;             <span class=\"comment\">/*内边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">300px</span>;             <span class=\"comment\">/*外边距*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">20px</span> solid black;  <span class=\"comment\">/*边框样式为实线，颜色为黑色*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在设置了，<code>内边距</code>，<code>边框</code>，<code>外边距</code> 我们可以看出盒子似乎大了，不是一开始设置的300*150大小了，这是因为我们增加了内边距边框，但是为什么增加内边距边框,就导致盒子变大了呢？因为它默认的规则是，所有增加的边距边框都往外加！！！在内容高度宽度的基础上往外加！</p>\n<p>我们可以设置box-sizing:<br>一般默认的box-sizing为 content-box<br>我们设置为 border-box</p>\n<h3 id=\"预览：\"><a href=\"#预览：\" class=\"headerlink\" title=\"预览：\"></a>预览：</h3><p><img src=\"/2022/04/28/HTML%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/2.png\"></p>\n<h3 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自己的通俗理解:<br><code>也就是比如说，如果要建设一个房子,默认要装修就是在建好的房子里面装修，但是 未设置 box-sizing 就是反着来在初始房子大小往外扩建装修,但如果设置了box-sizing 为 border-box 就变成了在房子里面装修了，width:300px heigit:150 也就是基础房子的大小(盒子)</code></p>\n","categories":["HTML"],"tags":["HTML盒子模型"]},{"title":"Java容易忘记的","url":"/2022/04/16/Java%E5%AE%B9%E6%98%93%E5%BF%98%E8%AE%B0%E7%9A%84/","content":"<h3 id=\"什么是继承\"><a href=\"#什么是继承\" class=\"headerlink\" title=\"什么是继承:\"></a>什么是继承:</h3><p>将具有<code>相同属性</code>和<code>方法</code>的类中相同属性和方法提取出，构建一个新类，这个新类就是父类，<code>然后由父类再构建子类，子类继承父类的属性和方法，使得子类对象具有父类的特征和行为</code></p>\n<hr>\n<h2 id=\"类变量、类方法与static关键字\"><a href=\"#类变量、类方法与static关键字\" class=\"headerlink\" title=\"类变量、类方法与static关键字:\"></a>类变量、类方法与static关键字:</h2><blockquote>\n<p>static修饰的变量和方法可以通过类名和对象名访问，<code>而不用static修饰的变量和方法只能通过对象名访问。</code></p>\n</blockquote>\n<ul>\n<li>类变量或静态常量：static修饰的属性称为类属性（类变量）<br>如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">zhangshan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        Student.play();   <span class=\"comment\">//类的属性 直接用类名调用</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"方法名的重载和重写\"><a href=\"#方法名的重载和重写\" class=\"headerlink\" title=\"方法名的重载和重写\"></a>方法名的重载和重写</h2><h3 id=\"方法的重载：指同一个类中多个方法：\"><a href=\"#方法的重载：指同一个类中多个方法：\" class=\"headerlink\" title=\"方法的重载：指同一个类中多个方法：\"></a>方法的重载：指同一个类中多个方法：</h3><ul>\n<li><blockquote>\n<p>方法名相同</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>参数列表不同（个数、顺序、类型三者只要有一项不同）</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>与返回值、访问修饰符无关</p>\n</blockquote>\n</li>\n</ul>\n<p><code>发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</code></p>\n<h2 id=\"综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\"><a href=\"#综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\" class=\"headerlink\" title=\"综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。\"></a>综上：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</h2><h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写:\"></a>重写:</h2><ol>\n<li><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p>\n</li>\n<li><p>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</p>\n</li>\n<li><p>如果父类方法访问修饰符为 private&#x2F;final&#x2F;static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。<br>构造方法无法被重写</p>\n<h2 id=\"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\"><a href=\"#综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\" class=\"headerlink\" title=\"综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。\"></a>综上：重写就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。</h2></li>\n</ol>\n<h2 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h2><ul>\n<li><blockquote>\n<p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</p>\n</blockquote>\n<h3 id=\"方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂-Java-讲义》-）：\"><a href=\"#方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂-Java-讲义》-）：\" class=\"headerlink\" title=\"方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂 Java 讲义》 ）：\"></a><strong>方法的重写要遵循“两同两小一大”（以下内容摘录自《疯狂 Java 讲义》 ）：</strong></h3></li>\n<li><p>“两同”即方法名相同、形参列表相同；</p>\n</li>\n<li><p>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</p>\n</li>\n<li><p>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</p>\n</li>\n<li><blockquote>\n<p>关于 重写的返回值类型 这里需要额外多说明一下，上面的表述不太清晰准确：如果方法的返回类型是 void 和基本数据类型，则返回值重写时不可修改。但是如果方法的返回值是引用类型，重写时是可以返回该引用类型的子类的。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a><strong>extends关键字</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> health;  <span class=\"comment\">//健康值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> love;    <span class=\"comment\">//亲密值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name+<span class=\"string\">&#x27;，&#x27;</span>+health+<span class=\"string\">&#x27;,&#x27;</span>+love;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;   <span class=\"comment\">//extends 继承关键字</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span><span class=\"string\">&quot;Q仔&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span><span class=\"string\">&quot;Q妹&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>有些父类成员不能继承：</strong></p>\n<ul>\n<li><code>private成员</code> </li>\n<li><code>子类与父类不在同包，使用默认访问权限的成员</code></li>\n<li><code>构造方法</code></li>\n</ul>\n<p><strong>继承特性：</strong></p>\n<ul>\n<li>传递性:B类继承A类，C类继承B类，C类也继承A类的属性和方法。</li>\n<li>单根性，一个子类只能继承一个父类。</li>\n</ul>\n<hr>\n<h2 id=\"super关键字\"><a href=\"#super关键字\" class=\"headerlink\" title=\"super关键字\"></a><strong>super关键字</strong></h2><p>子类访问父类的成员使用super。</p>\n<ul>\n<li><code>super():调用父类的构造方法。</code></li>\n<li><code>super.name:访问父类的属性。</code></li>\n<li><code>super.toString():访问父类的方法</code></li>\n</ul>\n<hr>\n<h2 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a><strong>方法的重写</strong></h2><p>在继承关系中，子类会自动继承父类中定义的方法，但有时在子类中需要对继承的方法进行一些修改，即对父类的方法进行重写。</p>\n<ul>\n<li>子类方法与父类方法具有相同的名字。</li>\n<li>参数列表与父类方法相同。</li>\n<li>返回值类型与父类方法相同。</li>\n<li>子类方法访问权限不能比父类更严格。</li>\n<li>抛出的异常<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;  <span class=\"comment\">//Penguin子类重写toString()</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q仔&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q妹&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String sex;   <span class=\"comment\">//性别</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>&#123;   <span class=\"comment\">//Penguin子类重写toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"built_in\">super</span>.toString(); <span class=\"comment\">//toString():访问父类的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> info+<span class=\"string\">&quot;,&quot;</span>+sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"抽象类、抽象方法和abstract关键字\"><a href=\"#抽象类、抽象方法和abstract关键字\" class=\"headerlink\" title=\"抽象类、抽象方法和abstract关键字\"></a><strong>抽象类、抽象方法和abstract关键字</strong></h2><h3 id=\"1-抽象类\"><a href=\"#1-抽象类\" class=\"headerlink\" title=\"1. 抽象类\"></a>1. 抽象类</h3><ul>\n<li>在继承关系中，去实例化一个父类没有意义，<code>它的特征和方法无法确定，可以使用抽象类来限制父类被实例化，抽象类是不能被实例化的。</code><br>如：<blockquote>\n<p>Pet ww &#x3D; new Pet(); &#x2F;&#x2F;实例化父类没有意义</p>\n</blockquote>\n</li>\n<li>抽象类用关键字abstract来修饰。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;   <span class=\"comment\">//抽象类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> health;  <span class=\"comment\">//健康值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> love;    <span class=\"comment\">//亲密值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;  <span class=\"comment\">//企鹅类</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Pet</span> <span class=\"variable\">ww</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();   <span class=\"comment\">//语法错误，抽象类无法实例化</span></span><br><span class=\"line\">    <span class=\"type\">Pet</span> <span class=\"variable\">zw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>(); <span class=\"comment\">//正确</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-抽象方法\"><a href=\"#2-抽象方法\" class=\"headerlink\" title=\"2. 抽象方法\"></a>2. 抽象方法</h3>父类的play方法，<code>每个子类实现步骤都不一样，即方法体没有实际意义的语句</code>，像这样的方法可以写成抽象方法。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span> &#123;  <span class=\"comment\">//子类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;   <span class=\"comment\">//父类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><code>抽象方法用abstract关键字修饰。</code></li>\n<li><code>抽象方法没有方法体。</code></li>\n<li><code>抽象方法必须在抽象类里。</code></li>\n<li><code>抽象方法必须在子类中被实现。</code></li>\n</ul>\n<hr>\n<h2 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a><strong>final关键字</strong></h2><p><code>final关键字修饰的变量的值是最终的值，即不能修改它的值—常量。</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">nale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q仔&quot;</span>;   <span class=\"comment\">//final 修饰变量的最终值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">fenale</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Q妹&quot;</span>;  <span class=\"comment\">//final 修饰变量的最终值</span></span><br></pre></td></tr></table></figure>\n<p><code>final关键字修饰的类为最终的子类—不能被继承。</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Penguin</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Pet</span>  &#123;   <span class=\"comment\">//最终只类</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1、final修饰的类不可以被继承，但可以继承其他的类。</p>\n<p>2、final修饰的方法子类可以继承但是不能重写。</p>\n<p>3、子类重写父类的非final方法可以加上final。</p>\n<p>4、被final修饰的基本数据类型的变量可以看作是常量，赋值后不能改变。</p>\n<p>5、被final修饰的引用数据类型变量的引用内存地址值不能改变，可以改变引用数据类型变量的属性值。</p>\n<p>6、被final修饰的成员变量必须在对象创建完成前进行赋值，可以直接赋值，如果没有直接赋值则需要用构造方法进行赋值，如果有多个构造方法则多个构造方法都要为其赋值，但是不能用set方法赋值。</p>\n<p>7、成员变量在堆内存中是有默认值的，final固定的是成员变量的手动赋值不是内存中的默认值。</p>\n<p>8、被final修饰的静态成员变量只能直接赋值或者通过静态代码块赋值。</p>\n<hr>\n<h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a><strong>多态性</strong></h2><ol>\n<li>对象的多态性：父类的引用指向子类的对象（子类的对象赋给父类的引用）</li>\n<li>多态的使用，虚拟方法调用有了对象的多态性后,我们在编译期，只能调用父类声明的方法，但在运行期，我们实际指向的是子类重写父类方法。<br><code>总结：编译，看左边；运行,看右边。</code><br>如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Pet</span> <span class=\"variable\">qq</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>();  <span class=\"comment\">//对象的多态性：父类的引用指向子类的对象</span></span><br><span class=\"line\"><span class=\"type\">Pet</span> <span class=\"variable\">ww</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();</span><br></pre></td></tr></table></figure></li>\n<li>多态性的使用前提：<code>只适用于方法，不适用于属性（属性不会被覆盖和重写）</code><br>如：<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pet qq=<span class=\"keyword\">new</span> <span class=\"title class_\">Penguin</span>();</span><br><span class=\"line\">System.out.println(qq.j);   <span class=\"comment\">//调用父类的变量</span></span><br></pre></td></tr></table></figure></li>\n<li>“不要犯傻，如果它不是晚绑定，它就不是多态”</li>\n</ol>\n","categories":["Java"],"tags":["java容易忘记的"]},{"title":"Linux实用命令","url":"/2022/04/19/Linux%E5%AE%9E%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/","content":"<h2 id=\"pwd-指令\"><a href=\"#pwd-指令\" class=\"headerlink\" title=\"pwd 指令\"></a><strong>pwd 指令</strong></h2><p><code>显示当前工作目录的绝对路径</code></p>\n<h2 id=\"ls-指令\"><a href=\"#ls-指令\" class=\"headerlink\" title=\"ls 指令\"></a><strong>ls 指令</strong></h2><h3 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h3><blockquote>\n<p><font color=\"#FF0000\"> -a  </font>——<em>显示当前目录所有的文件和目录，包括隐藏的</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> -l  </font>——<em>以列表的方式显示信息</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> -h  </font>——<em>显示文件大小时，以 k , m, G单位显示</em></p>\n</blockquote>\n<h2 id=\"cd-指令\"><a href=\"#cd-指令\" class=\"headerlink\" title=\"cd 指令\"></a><strong>cd 指令</strong></h2><h3 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\"> cd ~  </font>——<em>回到自己的家目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> cd ..  </font>——<em>回到当前目录的上一级目录</em></p>\n</blockquote>\n<h2 id=\"mkdir指令\"><a href=\"#mkdir指令\" class=\"headerlink\" title=\"mkdir指令\"></a><strong>mkdir指令</strong></h2><h3 id=\"常用参数-1\"><a href=\"#常用参数-1\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\"> mkdir &#x2F;home&#x2F;zw </font>——<em>创建一个目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> mkdir -p &#x2F;home&#x2F;zw </font>——<em>如果目录不存在的就新创建</em>一个。 </p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\"> mkdir -m 777 &#x2F;home&#x2F;zw</font>——<em>建立目录时，同时设置目录权限。</em></p>\n</blockquote>\n<h2 id=\"touch指令\"><a href=\"#touch指令\" class=\"headerlink\" title=\"touch指令\"></a><strong>touch指令</strong></h2><h3 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\"> touch hello.txt </font>——<em>创建一个空文件 hello.txt</em></p>\n</blockquote>\n<h2 id=\"cp指令-copy-拷贝\"><a href=\"#cp指令-copy-拷贝\" class=\"headerlink\" title=\"cp指令[copy 拷贝]\"></a><strong>cp指令[copy 拷贝]</strong></h2><h3 id=\"常用参数-2\"><a href=\"#常用参数-2\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><h4 id=\"cp-选项-source【源】-dest【目的文件】\"><a href=\"#cp-选项-source【源】-dest【目的文件】\" class=\"headerlink\" title=\"cp [选项] source【源】 dest【目的文件】\"></a>cp [选项] source【源】 dest【目的文件】</h4><blockquote>\n<p><font color=\"#FF0000\"> cp -r &#x2F;home&#x2F;zw&#x2F;hello.txt &#x2F;home&#x2F;jj</font>——<em>递归复制整个文件夹,将hello.txt 拷贝到jj目录下</em></p>\n</blockquote>\n<h2 id=\"rm指令\"><a href=\"#rm指令\" class=\"headerlink\" title=\"rm指令\"></a><strong>rm指令</strong></h2><h3 id=\"常用参数-3\"><a href=\"#常用参数-3\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h3><blockquote>\n<p><font color=\"#FF0000\">rm &#x2F;home&#x2F;zw&#x2F;hello.txt</font>——<em>[选项]  要删除的文件或目录</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">-r</font>——<em>递归删除整个文件夹</em> </p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">-f</font>——<em>强制删除不提示</em></p>\n</blockquote>\n<h2 id=\"mv指令\"><a href=\"#mv指令\" class=\"headerlink\" title=\"mv指令\"></a><strong>mv指令</strong></h2><h3 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">mv &#x2F;home&#x2F;zw&#x2F;Hello</font>——<em>(功能描述：重命名)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">mv &#x2F;home&#x2F;zw&#x2F;Hello &#x2F;home&#x2F;jj</font>——<em>(功能描述：移动文件或目录)</em></p>\n</blockquote>\n<h2 id=\"cat指令\"><a href=\"#cat指令\" class=\"headerlink\" title=\"cat指令\"></a><strong>cat指令</strong></h2><h3 id=\"基本语法-2\"><a href=\"#基本语法-2\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">cat &#x2F;home&#x2F;zw&#x2F;Hello.txt</font>——<em>(功能描述：查看文件内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">cat -n &#x2F;ect&#x2F;profile </font>——<em>(功能描述：显示文件内容，并显示行号)</em></p>\n</blockquote>\n<h3 id=\"使用细节\"><a href=\"#使用细节\" class=\"headerlink\" title=\"使用细节\"></a>使用细节</h3><pre><code>   cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more\ncat  xxx.txt | more  (把cat xxx.txt 输出结果交给 more 处理)\n</code></pre>\n<h2 id=\"more指令\"><a href=\"#more指令\" class=\"headerlink\" title=\"more指令\"></a><strong>more指令</strong></h2><p><code>介绍：more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键.</code></p>\n<h3 id=\"基本语法-3\"><a href=\"#基本语法-3\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">more &#x2F;etc&#x2F;profile<br> </font>——<em>(功能描述：采用more查看文件 )</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页；</td>\n</tr>\n<tr>\n<td align=\"left\">Enter</td>\n<td align=\"left\">代表向下翻『一行』；</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">代表立刻离开 more ，不再显示该文件内容。</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+F</td>\n<td align=\"left\">向下滚动一屏</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl+B</td>\n<td align=\"left\">返回上一屏</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">:f</td>\n<td align=\"left\">输出文件名和当前行的行号</td>\n</tr>\n</tbody></table>\n<h2 id=\"less指令\"><a href=\"#less指令\" class=\"headerlink\" title=\"less指令\"></a><strong>less指令</strong></h2><p><code>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示</code>需要加载内容，<font color=\"#FF0000\">对于显示大型文件具有较高的效率。</font></p>\n<h3 id=\"基本语法-4\"><a href=\"#基本语法-4\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">less &#x2F;etc&#x2F;profile<br> </font>——<em>(功能描述：采用more查看文件 )</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">操作</th>\n<th align=\"left\">功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">空白键 (space)</td>\n<td align=\"left\">代表向下翻一页；</td>\n</tr>\n<tr>\n<td align=\"left\">[pagedown]</td>\n<td align=\"left\">向下翻动一页</td>\n</tr>\n<tr>\n<td align=\"left\">[pageup]</td>\n<td align=\"left\">向上翻动一页；</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;字串</td>\n<td align=\"left\">向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td>\n</tr>\n<tr>\n<td align=\"left\">?字串</td>\n<td align=\"left\">向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td>\n</tr>\n<tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">输出当前行的行号</td>\n</tr>\n<tr>\n<td align=\"left\">q</td>\n<td align=\"left\">离开 less 这个程序；</td>\n</tr>\n</tbody></table>\n<h2 id=\"echo指令\"><a href=\"#echo指令\" class=\"headerlink\" title=\"echo指令\"></a><strong>echo指令</strong></h2><p><code>echo命令的功能是在终端窗口显示器上显示一段文字，一般起到一个提示的作用。</code></p>\n<p>基本语法</p>\n<blockquote>\n<p><font color=\"#FF0000\">echo ‘That you are a pig is a fact ‘<br> </font>——<em>(功能描述：终端窗口显示器上显示一段文字)</em><br><font color=\"#FF0000\">echo $HOME<br> </font>——<em>(功能描述：显示输出 当前用户的登录子目录)</em></p>\n</blockquote>\n<h2 id=\"head指令\"><a href=\"#head指令\" class=\"headerlink\" title=\"head指令\"></a><strong>head指令</strong></h2><p> <code>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容 基本语法 </code></p>\n<h3 id=\"基本语法-5\"><a href=\"#基本语法-5\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">head &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(功能描述：查看文件头10行内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">head -n 5 &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(查看文件头5行内容，5可以是任意行数)</em></p>\n</blockquote>\n<h2 id=\"tail指令\"><a href=\"#tail指令\" class=\"headerlink\" title=\"tail指令\"></a><strong>tail指令</strong></h2><h3 id=\"基本语法-6\"><a href=\"#基本语法-6\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><blockquote>\n<p><font color=\"#FF0000\">tail &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(功能描述：查看文件头10行内容)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">tail -n 5 &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(查看文件头5行内容，5可以是任意行数)</em></p>\n</blockquote>\n<blockquote>\n<p><font color=\"#FF0000\">head -f 5 &#x2F;home&#x2F;Hello.txt<br> </font>——<em>(实时追踪该文档的所有更新)</em></p>\n</blockquote>\n","categories":["Linux"],"tags":["Linux实用命令"]},{"title":"equals的若干问题解答","url":"/2022/04/21/equals%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/","content":"<p>详细解答：<a href=\"https://www.cnblogs.com/skywang12345/p/3324958.html\">Java hashCode() 和 equals()的若干问题解答</a></p>\n<h1 id=\"引用于：javaGuide-做的笔记\"><a href=\"#引用于：javaGuide-做的笔记\" class=\"headerlink\" title=\"引用于：javaGuide 做的笔记\"></a>引用于：javaGuide 做的笔记</h1><h2 id=\"String-equals-和-Object-equals-有何区别？\"><a href=\"#String-equals-和-Object-equals-有何区别？\" class=\"headerlink\" title=\"String#equals() 和 Object#equals() 有何区别？\"></a>String#equals() 和 Object#equals() 有何区别？</h2><ol>\n<li>操作少量的数据: 适用 String</li>\n<li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li>\n<li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li>\n</ol>\n<p>String 中的 equals 方法是被重写过的，比较的是 String 字符串的值是否相等。 Object 的 equals 方法是比较的对象的内存地址。</p>\n<h2 id=\"String-s1-x3D-new-String-“abc”-这句话创建了几个字符串对象？\"><a href=\"#String-s1-x3D-new-String-“abc”-这句话创建了几个字符串对象？\" class=\"headerlink\" title=\"String s1 &#x3D; new String(“abc”);这句话创建了几个字符串对象？\"></a>String s1 &#x3D; new String(“abc”);这句话创建了几个字符串对象？</h2><p>会创建 1 或 2 个字符串：</p>\n<ul>\n<li>如果字符串常量池中已存在字符串常量“abc”，则只会在堆空间创建一个字符串常量“abc”。</li>\n<li>如果字符串常量池中没有字符串常量“abc”，那么它将首先在字符串常量池中创建，然后在堆空间中创建，因此将创建总共 2 个字符串对象。</li>\n</ul>\n<p>验证：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">// 堆内存的地址值</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">System.out.println(s1 == s2);<span class=\"comment\">// 输出 false,因为一个是堆内存，一个是常量池的内存，故两者是不同的。</span></span><br><span class=\"line\">System.out.println(s1.equals(s2));<span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"String-类型的变量和常量做“-”运算时发生了什么？\"><a href=\"#String-类型的变量和常量做“-”运算时发生了什么？\" class=\"headerlink\" title=\"String 类型的变量和常量做“+”运算时发生了什么？\"></a>String 类型的变量和常量做“+”运算时发生了什么？</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;str&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ing&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;str&quot;</span> + <span class=\"string\">&quot;ing&quot;</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str4</span> <span class=\"operator\">=</span> str1 + str2; <span class=\"comment\">//在堆上创建的新的对象</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str5</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;string&quot;</span>;<span class=\"comment\">//常量池中的对象</span></span><br><span class=\"line\">System.out.println(str3 == str4);<span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(str3 == str5);<span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(str4 == str5);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/04/21/equals%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/1.jpg\" alt=\"1\"><br>注意 ：比较 String 字符串的值是否相等，可以使用 equals() 方法。 String 中的 equals 方法是被重写过的。 Object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是字符串的值是否相等。如果你使用 &#x3D;&#x3D; 比较两个字符串是否相等的话，IDEA 还是提示你使用 equals() 方法替换。</p>\n<blockquote>\n<p>对于基本数据类型来说，&#x3D;&#x3D; 比较的是值。对于引用数据类型来说，&#x3D;&#x3D;比较的是对象的内存地址。</p>\n</blockquote>\n<p> 对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。</p>\n<p> <code>字符串常量池</code> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"type\">String</span> <span class=\"variable\">aa</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>; <span class=\"comment\">// 放在常量池中</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>; <span class=\"comment\">// 从常量池中查找</span></span><br><span class=\"line\">System.out.println(aa==bb);<span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></p>\n","categories":["Java"],"tags":["equals的若干问题解答"]},{"title":"mysql笔记","url":"/2022/04/24/mysql%E7%AC%94%E8%AE%B0/","content":"<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> database zw;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"比较完善的写法，创建数据库，这个写法，就不会出现1007报错\"><a href=\"#比较完善的写法，创建数据库，这个写法，就不会出现1007报错\" class=\"headerlink\" title=\"比较完善的写法，创建数据库，这个写法，就不会出现1007报错\"></a>比较完善的写法，创建数据库，这个写法，就不会出现1007报错</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">CREATE</span> DATABASE IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> ZW; </span><br><span class=\"line\">    <span class=\"comment\">-- create database if not exists zw;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写\"><a href=\"#最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写\" class=\"headerlink\" title=\"最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写\"></a>最完善的写法，包含了数据库的字符集指定，让你的mysql能够支持utf-8编码，支持中文，且不敏感大小写</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span>  <span class=\"keyword\">CREATE</span> DATABASE IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> ZW1 <span class=\"keyword\">DEFAULT</span> CHARSET UTF8 <span class=\"keyword\">COLLATE</span>  utf8_general_ci;</span><br><span class=\"line\"><span class=\"comment\">--      create database if not exists zw1 default charset utf8 collate  uft8_general_ci;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SHOW</span> databases;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">DROP</span> databases;</span><br><span class=\"line\">    <span class=\"comment\">-- drop </span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选择mysql\"><a href=\"#选择mysql\" class=\"headerlink\" title=\"选择mysql\"></a>选择mysql</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> use mysql;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看当前在哪个库中\"><a href=\"#查看当前在哪个库中\" class=\"headerlink\" title=\"查看当前在哪个库中\"></a>查看当前在哪个库中</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> database();</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看数据库里有多少张表\"><a href=\"#查看数据库里有多少张表\" class=\"headerlink\" title=\"查看数据库里有多少张表\"></a>查看数据库里有多少张表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show tables;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span>  <span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> zw\\G </span><br><span class=\"line\"><span class=\"comment\">--      SHOW CREATE TABLE 表名</span></span><br></pre></td></tr></table></figure>","categories":["mysql基础"],"tags":["mysql"]},{"title":"Markdown笔记","url":"/2022/03/30/markdown/","content":"<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h3 id=\"标题3\"><a href=\"#标题3\" class=\"headerlink\" title=\"标题3\"></a>标题3</h3><h4 id=\"标题4\"><a href=\"#标题4\" class=\"headerlink\" title=\"标题4\"></a>标题4</h4><h5 id=\"标题5\"><a href=\"#标题5\" class=\"headerlink\" title=\"标题5\"></a>标题5</h5><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6><blockquote>\n<p>这是一段引用    </p>\n</blockquote>\n<p><em>斜体</em></p>\n<p><strong>粗体</strong></p>\n<p><em><strong>粗斜体</strong></em></p>\n<hr>\n<p><del>删除线</del></p>\n<p><u>下划线</u></p>\n<p>把大象放进冰箱</p>\n<ol>\n<li>打开冰箱</li>\n<li>大象放进去</li>\n<li>关上冰箱<br>无序列表</li>\n</ol>\n<ul>\n<li><p>阿斯顿</p>\n</li>\n<li><p>啊实打实大大</p>\n</li>\n<li><p>阿斯顿</p>\n</li>\n<li><p><input checked disabled type=\"checkbox\"> \n吃饭</p>\n</li>\n<li><p><input disabled type=\"checkbox\"> \n睡觉</p>\n</li>\n<li><p><input disabled type=\"checkbox\"> \n打豆豆</p>\n</li>\n</ul>\n<p>代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<!-- 冒号在左边就左对齐 两边居中对齐 -->\n<p>表格:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">姓名</th>\n<th align=\"right\">年龄</th>\n<th align=\"center\">成绩</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">张三</td>\n<td align=\"right\">19</td>\n<td align=\"center\">100</td>\n</tr>\n<tr>\n<td align=\"left\">王五</td>\n<td align=\"right\">19</td>\n<td align=\"center\">66</td>\n</tr>\n</tbody></table>\n<p>快捷键：<br>ctrl+B      横线<br>alt+c       批量修改格式</p>\n<p>脚注：<br>一键三连[^三连]<br>[^三连]:点赞、收藏、投币<br><br></p>\n<hr>\n<p>链接:<br>这是一个链接<a href=\"https://www.bilibili.com/\">bilibili</a><br>这个链接用1作为网站变量[百度][1]<br>这个链接用2作为网站变量[博客][2]<br>[1]:<a href=\"http://www.baidu.com/\">http://www.baidu.com/</a><br>[2]:<a href=\"http://blog-zw.top/\">http://blog-zw.top/</a></p>\n<p><img src=\"/2022/03/30/markdown/you.png\" alt=\"you\"></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=333750&auto=1&height=66\"></iframe>\n\n","categories":["Markdown"],"tags":["markdown"]},{"title":"为什么Java中只有值传递？","url":"/2022/04/26/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E4%B8%AD%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/","content":"<h1 id=\"为什么-Java-中只有值传递？\"><a href=\"#为什么-Java-中只有值传递？\" class=\"headerlink\" title=\"为什么 Java 中只有值传递？\"></a>为什么 Java 中只有值传递？</h1><p>开始之前，我们先来搞懂下面这两个概念：</p>\n<ul>\n<li>形参&amp;实参</li>\n<li>值传递&amp;引用传递</li>\n</ul>\n<h1 id=\"形参-amp-实参\"><a href=\"#形参-amp-实参\" class=\"headerlink\" title=\"形参&amp;实参\"></a>形参&amp;实参</h1><p>方法的定义可能会用到参数（有参的方法），参数在程序语言中分为：</p>\n<ul>\n<li>实参（实际参数） ：用于传递给函数&#x2F;方法的参数，必须有确定的值。</li>\n<li>形参（形式参数） ：用于定义函数&#x2F;方法，接收实参，不需要有确定的值。<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello!&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// hello 为实参</span></span><br><span class=\"line\">sayHello(hello);</span><br><span class=\"line\"><span class=\"comment\">// str 为形参</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">    System.out.println(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"值传递-amp-引用传递\"><a href=\"#值传递-amp-引用传递\" class=\"headerlink\" title=\"值传递&amp;引用传递\"></a>值传递&amp;引用传递</h1>程序设计语言将实参传递给方法（或函数）的方式分为两种：</li>\n<li>值传递 ：方法接收的是实参值的拷贝，会创建副本。</li>\n<li>引用传递 ：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</li>\n</ul>\n<p><code>很多程序设计语言（比如 C++、 Pascal )提供了两种参数传递的方式，不过，在 Java 中只有值传递。</code></p>\n<h1 id=\"为什么-Java-只有值传递？\"><a href=\"#为什么-Java-只有值传递？\" class=\"headerlink\" title=\"为什么 Java 只有值传递？\"></a>为什么 Java 只有值传递？</h1><p>为什么说 Java 只有值传递呢？ 不需要太多废话，我通过 3 个例子来给大家证明。</p>\n<h1 id=\"案例1：传递基本类型参数\"><a href=\"#案例1：传递基本类型参数\" class=\"headerlink\" title=\"案例1：传递基本类型参数\"></a>案例1：传递基本类型参数</h1><h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">    swap(num1, num2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;num1 = &quot;</span> + num1);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;num2 = &quot;</span> + num2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = temp;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;a = &quot;</span> + a);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;b = &quot;</span> + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出：\"><a href=\"#输出：\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">20</span></span><br><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\">num1 = <span class=\"number\">10</span></span><br><span class=\"line\">num2 = <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解析：\"><a href=\"#解析：\" class=\"headerlink\" title=\"解析：\"></a>解析：</h2><h3 id=\"在-swap-方法中，a、b-的值进行交换，并不会影响到-num1、num2。因为，a、b-的值，只是从-num1、num2-的复制过来的。也就是说，a、b-相当于-num1、num2-的副本，副本的内容无论怎么修改，都不会影响到原件本身。\"><a href=\"#在-swap-方法中，a、b-的值进行交换，并不会影响到-num1、num2。因为，a、b-的值，只是从-num1、num2-的复制过来的。也就是说，a、b-相当于-num1、num2-的副本，副本的内容无论怎么修改，都不会影响到原件本身。\" class=\"headerlink\" title=\"在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。\"></a>在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</h3><h1 id=\"案例2：传递引用类型参数1\"><a href=\"#案例2：传递引用类型参数1\" class=\"headerlink\" title=\"案例2：传递引用类型参数1\"></a>案例2：传递引用类型参数1</h1><h2 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>[] arr = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">  System.out.println(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  change(arr);</span><br><span class=\"line\">  System.out.println(arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">change</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将数组的第一个元素变为0</span></span><br><span class=\"line\">  array[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"输出：-1\"><a href=\"#输出：-1\" class=\"headerlink\" title=\"输出：\"></a>输出：</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解析：-1\"><a href=\"#解析：-1\" class=\"headerlink\" title=\"解析：\"></a>解析：</h2><h3 id=\"看了这个案例很多人肯定觉得-Java-对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说-change-方法的参数拷贝的是-arr-（实参）的地址，因此，它和-arr-指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳-Java-对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\"><a href=\"#看了这个案例很多人肯定觉得-Java-对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说-change-方法的参数拷贝的是-arr-（实参）的地址，因此，它和-arr-指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳-Java-对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\" class=\"headerlink\" title=\"看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例\"></a>看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。为了更强有力地反驳 Java 对引用类型的参数采用的不是引用传递，我们再来看下面这个案例</h3><h1 id=\"案例3-：传递引用类型参数2\"><a href=\"#案例3-：传递引用类型参数2\" class=\"headerlink\" title=\"案例3 ：传递引用类型参数2\"></a>案例3 ：传递引用类型参数2</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">// 省略构造函数、Getter&amp;Setter方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">xiaoZhang</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;小张&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">xiaoLi</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;小李&quot;</span>);</span><br><span class=\"line\">    swap(xiaoZhang, xiaoLi);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;xiaoZhang:&quot;</span> + xiaoZhang.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;xiaoLi:&quot;</span> + xiaoLi.getName());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(Person person1, Person person2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> person1;</span><br><span class=\"line\">    person1 = person2;</span><br><span class=\"line\">    person2 = temp;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;person1:&quot;</span> + person1.getName());</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;person2:&quot;</span> + person2.getName());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出:\"></a>输出:</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">person1:小李</span><br><span class=\"line\">person2:小张</span><br><span class=\"line\">xiaoZhang:小张</span><br><span class=\"line\">xiaoLi:小李</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析：-2\"><a href=\"#解析：-2\" class=\"headerlink\" title=\"解析：\"></a>解析：</h3><h3 id=\"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap-方法的参数-person1-和-person2-只是拷贝的实参-xiaoZhang-和-xiaoLi-的地址。因此，-person1-和-person2-的互换只是拷贝的两个地址的互换罢了，并不会影响到实参-xiaoZhang-和-xiaoLi-。\"><a href=\"#怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap-方法的参数-person1-和-person2-只是拷贝的实参-xiaoZhang-和-xiaoLi-的地址。因此，-person1-和-person2-的互换只是拷贝的两个地址的互换罢了，并不会影响到实参-xiaoZhang-和-xiaoLi-。\" class=\"headerlink\" title=\"怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此， person1 和 person2 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi 。\"></a>怎么回事？？？两个引用类型的形参互换并没有影响实参啊！swap 方法的参数 person1 和 person2 只是拷贝的实参 xiaoZhang 和 xiaoLi 的地址。因此， person1 和 person2 的互换只是拷贝的两个地址的互换罢了，并不会影响到实参 xiaoZhang 和 xiaoLi 。</h3><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"Java-中将实参传递给方法（或函数）的方式是-值传递-：\"><a href=\"#Java-中将实参传递给方法（或函数）的方式是-值传递-：\" class=\"headerlink\" title=\"Java 中将实参传递给方法（或函数）的方式是 值传递 ：\"></a>Java 中将实参传递给方法（或函数）的方式是 值传递 ：</h2><ul>\n<li>如果参数是基本类型的话，很简单，传递的就是基本类型的字面量值的拷贝，会创建副本。</li>\n<li>如果参数是引用类型，传递的就是实参所引用的对象在堆中地址值的拷贝，同样也会创建副本。</li>\n</ul>\n<h1 id=\"引用于：-JavaGuide\"><a href=\"#引用于：-JavaGuide\" class=\"headerlink\" title=\"引用于： JavaGuide\"></a>引用于： JavaGuide</h1>","categories":["Java"],"tags":["为什么Java中只有值传递？"]},{"title":"Python笔记","url":"/2022/03/31/python/","content":"<h1 id=\"python基础笔记\"><a href=\"#python基础笔记\" class=\"headerlink\" title=\"python基础笔记\"></a><center>python基础笔记</center></h1><ul>\n<li>不单单只能导入变量函数和类都可以使用</li>\n</ul>\n<p>import&lt;模块名&gt;   会导入这个模块所有的代码元素，在访问时需要加前缀“模块名”</p>\n<p>form &lt;模块名&gt; import&lt;代码元素&gt;  会导入模块名中的代码元素(变量)直接使用代码元素名字 在访问时不需要加前缀“模块名”</p>\n<p>form &lt;模块名&gt; import&lt;代码元素&gt; as &lt;代码元素别名&gt;<br>会导入模块名中的代码元素(变量) 但使用时需要使用别名 在访问时不需要加前缀“模块名”</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> world</span><br><span class=\"line\"><span class=\"keyword\">from</span> world <span class=\"keyword\">import</span> Z</span><br><span class=\"line\"><span class=\"keyword\">from</span> world <span class=\"keyword\">import</span> x <span class=\"keyword\">as</span> x2</span><br><span class=\"line\">x=<span class=\"number\">100</span></span><br><span class=\"line\">y=<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (y)       <span class=\"comment\">#访问当前模块变量y</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (world.y) <span class=\"comment\">#访问world模块变量y</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (z)       <span class=\"comment\">#访问world模块变量z</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> (x2)      <span class=\"comment\">#x2是wor1d模块x别名</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数字类型的数据\"><a href=\"#数字类型的数据\" class=\"headerlink\" title=\"数字类型的数据\"></a>数字类型的数据</h1><ul>\n<li><p>Python中有6种主要的内置数据类型：数字、字符串、列表、元组、集合和字典。</p>\n</li>\n<li><p>Python中有4种数字类型：整数类型、浮类型、复数类型和布尔类型</p>\n</li>\n</ul>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><ul>\n<li>Python中的整数类型为int类</li>\n<li>整数类型只有一种就是int</li>\n<li>默认情况下表示10进制</li>\n</ul>\n<ol>\n<li>二进制表示方式以阿拉伯数字 0B或(b) 作为前缀</li>\n<li>八进制表示方式以阿拉伯数字 0O或(o) 作为前缀</li>\n<li>十六进制表示方式以阿拉伯数字 0X或(x)作为前缀<h2 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h2></li>\n</ol>\n<ul>\n<li>Python中的浮点类型为float类</li>\n</ul>\n<ol>\n<li>print(type(1.))  打印出来也是float类型</li>\n<li>采用科学及算法表示科学计数法中会使用E(或e)表示10的指数，如e2表示10</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3.36e2</span>)  //结果：<span class=\"number\">336.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3.36e-2</span>) //结果：<span class=\"number\">0.0336</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">.36e-2</span>)  //结果：<span class=\"number\">0.00336</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"复数类型\"><a href=\"#复数类型\" class=\"headerlink\" title=\"复数类型\"></a>复数类型</h2><ul>\n<li>复数在数学中被表示为：a+bi,其中a被称为实部b被称为虚部，被称为虚数单位。</li>\n</ul>\n<ol>\n<li>复数不能单独存在，他们总是和一个0.0的实属部分一起来构成一个复数</li>\n<li>复数有实数部分和虚数部分构成</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span>+<span class=\"number\">2j</span></span><br><span class=\"line\">b=<span class=\"number\">1</span>+<span class=\"number\">4j</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a+b)   // (<span class=\"number\">2</span>+<span class=\"number\">6j</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(a)) // &lt;<span class=\"keyword\">class</span> <span class=\"string\">&#x27;complex&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><ul>\n<li>Python中的布尔类型为bool类：它只有两个值：True和False。</li>\n</ul>\n<ol>\n<li>布尔类型也属于整数类型，也可以说是整数类型的一种子类</li>\n<li>在python只有True和False、</li>\n</ol>\n<p>注意可以进行转换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">0</span>))   //整数<span class=\"number\">0</span>被转换为<span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"number\">2</span>))   //其他非零整数例如<span class=\"number\">2</span>被转换为<span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(<span class=\"string\">&#x27;&#x27;</span>))  //其他非空字符串会被转换为<span class=\"literal\">True</span> </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>([]))  //(空列表）被转换为<span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bool</span>(&#123;&#125;))  //(空字典）被转换为<span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数字类型的相互转换\"><a href=\"#数字类型的相互转换\" class=\"headerlink\" title=\"数字类型的相互转换\"></a>数字类型的相互转换</h2><ol>\n<li>隐式类型的转换（自动类型转换）</li>\n<li>显式类型的转换（通过某种手段转换）</li>\n</ol>\n<h3 id=\"隐式类型转换：\"><a href=\"#隐式类型转换：\" class=\"headerlink\" title=\"隐式类型转换：\"></a>隐式类型转换：</h3><ul>\n<li>数字之间可以进行数学计算，在<br>进行数学计算时若数字类型不同，则<br>会发生隐式类型的转换。</li>\n</ul>\n<h4 id=\"转换表\"><a href=\"#转换表\" class=\"headerlink\" title=\"转换表\"></a><center>转换表</center></h4><table>\n<thead>\n<tr>\n<th align=\"center\">操作数1的类型</th>\n<th align=\"center\">操作数为2的类型</th>\n<th align=\"center\">转换后的类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">布尔</td>\n<td align=\"center\">整数</td>\n<td align=\"center\">整数</td>\n</tr>\n<tr>\n<td align=\"center\">布尔、整数</td>\n<td align=\"center\">浮点</td>\n<td align=\"center\">浮点</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1</span>+<span class=\"literal\">True</span>)      //布尔值<span class=\"literal\">True</span>被转换为整数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>)       //整数<span class=\"number\">1</span>被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"literal\">True</span>)    //布尔值<span class=\"literal\">True</span>被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>+<span class=\"literal\">True</span>)  //整数<span class=\"number\">1</span>和布尔值都被转换为浮点数</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>+<span class=\"literal\">False</span>) //整数<span class=\"number\">1</span>和布尔值都被转换为浮点数</span><br></pre></td></tr></table></figure>\n<h3 id=\"显式类型转换：\"><a href=\"#显式类型转换：\" class=\"headerlink\" title=\"显式类型转换：\"></a>显式类型转换：</h3><ul>\n<li>需要使用转换函数进行显示转换分别是 int()、float()和bool()函数，来实现数字类型之间的转换</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">1.0</span>+<span class=\"number\">1</span>))   //<span class=\"built_in\">int</span>(<span class=\"number\">1.0</span>)被转换为整数<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">False</span>))   //布尔数值<span class=\"literal\">False</span>使用<span class=\"built_in\">int</span>()函数返回<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"literal\">True</span>))    //布尔数值<span class=\"literal\">True</span>使用<span class=\"built_in\">int</span>()函数返回<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">int</span>(<span class=\"number\">0.6</span>))     //浮点数值使用<span class=\"built_in\">int</span>()函数会截掉小数部分</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"number\">5</span>))     //整数值使用f1oat()函数会加上小数部分(<span class=\"number\">.0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"literal\">False</span>)) //布尔数值<span class=\"literal\">False</span>使用<span class=\"built_in\">float</span>()函数返回<span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">float</span>(<span class=\"literal\">True</span>))  //与齿数值<span class=\"literal\">True</span>使用<span class=\"built_in\">float</span>()函数返回<span class=\"number\">1.0</span></span><br><span class=\"line\">结果：</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">0.0</span></span><br><span class=\"line\"><span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>赋值运算符</li>\n<li>运算符优先级<h2 id=\"算数运算符\"><a href=\"#算数运算符\" class=\"headerlink\" title=\"算数运算符\"></a>算数运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\">加</td>\n<td align=\"center\">a+b</td>\n<td align=\"center\">求a与b的和</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\">减</td>\n<td align=\"center\">a-b</td>\n<td align=\"center\">求a与b的差</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">乘</td>\n<td align=\"center\">a*b</td>\n<td align=\"center\">求a与b的积</td>\n</tr>\n<tr>\n<td align=\"center\">&#x2F;</td>\n<td align=\"center\">除</td>\n<td align=\"center\">a&#x2F;b</td>\n<td align=\"center\">求a除以b的商</td>\n</tr>\n<tr>\n<td align=\"center\">%</td>\n<td align=\"center\">取余</td>\n<td align=\"center\">a%b</td>\n<td align=\"center\">求a除以b的余数</td>\n</tr>\n<tr>\n<td align=\"center\">**</td>\n<td align=\"center\">幂</td>\n<td align=\"center\">a**b</td>\n<td align=\"center\">求a的b次幂</td>\n</tr>\n<tr>\n<td align=\"center\">&#x2F;&#x2F;</td>\n<td align=\"center\">地板除法</td>\n<td align=\"center\">a&#x2F;&#x2F;b</td>\n<td align=\"center\">求小于a与b的商的最大整数</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n<li>除法和地板除法的区别：&#x2F; 除的数结果是float类型 地板除法除的结果是整数类型<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a=<span class=\"number\">1</span>    </span><br><span class=\"line\"><span class=\"built_in\">print</span>(-a)    //-a是对a的取反运算</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>//<span class=\"number\">2</span>)  // <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">3</span>/<span class=\"number\">2</span>)   // <span class=\"number\">1.5</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">3</span>//<span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(-<span class=\"number\">8</span>/<span class=\"number\">3</span>) // -<span class=\"number\">2</span></span><br><span class=\"line\">注意：</span><br><span class=\"line\">//   负数的地板除法运算 和整数不同 得到商后 像上取整，结果也就变成-<span class=\"number\">2</span> 了</span><br></pre></td></tr></table></figure>\n<h2 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&#x3D;&#x3D;</td>\n<td align=\"center\">等于</td>\n<td align=\"center\">a&#x3D;&#x3D;b</td>\n<td align=\"center\">a等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">!&#x3D;</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">a!&#x3D;b</td>\n<td align=\"center\">与&#x3D;&#x3D;相反</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">a&gt;b</td>\n<td align=\"center\">a大于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">a&lt;b</td>\n<td align=\"center\">a小于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&#x3D;</td>\n<td align=\"center\">大于等于</td>\n<td align=\"center\">a&gt;&#x3D;b</td>\n<td align=\"center\">a大于等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&#x3D;</td>\n<td align=\"center\">小于等于</td>\n<td align=\"center\">a&lt;&#x3D;b</td>\n<td align=\"center\">a小于等于b时返回True,否则返回False</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">not</td>\n<td align=\"center\">逻辑非</td>\n<td align=\"center\">not a</td>\n<td align=\"center\">a为True时，值为False,a为False时，值为True</td>\n</tr>\n<tr>\n<td align=\"center\">and</td>\n<td align=\"center\">逻辑与</td>\n<td align=\"center\">a and b</td>\n<td align=\"center\">a、b全为Tue时，计算结果为True,否则为False</td>\n</tr>\n<tr>\n<td align=\"center\">or</td>\n<td align=\"center\">逻辑或</td>\n<td align=\"center\">a or b</td>\n<td align=\"center\">a、b全为Falset时，计算结果为False,否则为True</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p>注意: 结果值为 True 和 False (bool值)</p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">名称</th>\n<th align=\"center\">例子</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">~</td>\n<td align=\"center\">位反</td>\n<td align=\"center\">~X</td>\n<td align=\"center\">将x的值按位取反</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">位与</td>\n<td align=\"center\">x &amp; y</td>\n<td align=\"center\">将x与y按位进行位与运算</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">位或</td>\n<td align=\"center\">x | y</td>\n<td align=\"center\">将x与y按位进行位或运算</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">位异或</td>\n<td align=\"center\">x ^ y</td>\n<td align=\"center\">将x与y按位进行位异或运算</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;&gt;</td>\n<td align=\"center\">右移</td>\n<td align=\"center\">x &gt;&gt; a</td>\n<td align=\"center\">将x右移a位，高位采用符号位补位</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;&lt;</td>\n<td align=\"center\">左移</td>\n<td align=\"center\">x &lt;&lt; a</td>\n<td align=\"center\">将x左移a位，低位用0补位</td>\n</tr>\n</tbody></table>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2>","categories":["Python"],"tags":["python"]},{"title":"在Linux里安装jdk","url":"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85jdk/","content":"<h1 id=\"下载jdk\"><a href=\"#下载jdk\" class=\"headerlink\" title=\"下载jdk\"></a>下载jdk</h1><p>进入华为镜像网址：<a href=\"https://repo.huaweicloud.com/java/jdk/\">https://repo.huaweicloud.com/java/jdk/</a></p>\n<ol>\n<li><p>选择：8u181-b13</p>\n</li>\n<li><p>下载：jdk-8u181-linux-x64.tar.gz</p>\n</li>\n</ol>\n<img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85jdk/2.png\" alt=\"11\" style=\"zoom:67%;\">\n\n<img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85jdk/3.png\" style=\"zoom: 67%;\">\n\n<hr>\n<h1 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h1><ol>\n<li><strong>进入到安装包目录下，解压安装包到opt目录</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>tar -zxvf jdk -8u22l-linux-x64.tar.gz  -C &#x2F;opt</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>配置java环境配置</strong>  进入etc&#x2F;profile配置全局变量</li>\n</ol>\n<ul>\n<li><blockquote>\n<p> <strong>vi &#x2F;etc&#x2F;profile</strong>        </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p> <strong>export JAVA_HOME&#x3D;&#x2F; opt&#x2F;java</strong> </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p> <strong>export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"3\">\n<li><strong>配置完成</strong></li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>source &#x2F;etc&#x2F;profile</strong>    —-重新加载配置文件</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>java -version</strong>               —- 查看jdk版本</p>\n</blockquote>\n<p><code>后续可以使用命令 javac xxx.java  进行编译  java  xxx  运行</code></p>\n</li>\n</ul>\n","categories":["Linux"],"tags":["在Linux里安装jdk"]},{"title":"在Linux里安装mysql","url":"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/","content":"<h1 id=\"解压安装包\"><a href=\"#解压安装包\" class=\"headerlink\" title=\"解压安装包\"></a>解压安装包</h1><ul>\n<li><blockquote>\n<p><strong>tar -zxvf mysql(版本号.tar.gz)  -C &#x2F;opt</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>cd &#x2F;opt</strong>  </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mv mysql(版本号)    mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"进入配置全局环境变量-可选择设置\"><a href=\"#进入配置全局环境变量-可选择设置\" class=\"headerlink\" title=\"进入配置全局环境变量(可选择设置)\"></a>进入配置全局环境变量(可选择设置)</h1><ul>\n<li><blockquote>\n<p><strong>vim &#x2F;etc&#x2F;profile</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>export MYSQL_HOME&#x3D;&#x2F;opt&#x2F;mysql</strong>  —-为实际安装目录路径</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>export PATH&#x3D;$PATH:$MYSQL_HOME&#x2F;bin</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>source &#x2F;etc&#x2F;profile</strong>  —-重新加载配置文件</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"创建用户与组-和-mysql创建目录存放数据\"><a href=\"#创建用户与组-和-mysql创建目录存放数据\" class=\"headerlink\" title=\"创建用户与组 和 mysql创建目录存放数据\"></a>创建用户与组 和 mysql创建目录存放数据</h1><ul>\n<li><blockquote>\n<p><strong>groupadd mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>useradd -r -g mysql mysql</strong> </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mkdir -p &#x2F;var&#x2F;lib&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>chown mysql:mysql  -R &#x2F;var&#x2F;lib&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h1><ul>\n<li><blockquote>\n<p><strong>vim &#x2F;etc&#x2F;my.cnf</strong></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"><span class=\"keyword\">user</span><span class=\"operator\">=</span>mysql</span><br><span class=\"line\">basedir<span class=\"operator\">=</span><span class=\"operator\">/</span>opt<span class=\"operator\">/</span>mysql                                    </span><br><span class=\"line\">datadir<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql                    </span><br><span class=\"line\">socket<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.sock </span><br><span class=\"line\"><span class=\"type\">character</span><span class=\"operator\">-</span><span class=\"keyword\">set</span><span class=\"operator\">-</span>server<span class=\"operator\">=</span>utf8mb4  </span><br><span class=\"line\">symbolic<span class=\"operator\">-</span>links<span class=\"operator\">=</span><span class=\"number\">0</span></span><br><span class=\"line\">[mysqld_safe]</span><br><span class=\"line\">log<span class=\"operator\">-</span>error<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>err.log</span><br><span class=\"line\">pid<span class=\"operator\">-</span>file<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.pid</span><br><span class=\"line\">[client]</span><br><span class=\"line\">port<span class=\"operator\">=</span><span class=\"number\">3306</span>  </span><br><span class=\"line\">socket<span class=\"operator\">=</span><span class=\"operator\">/</span>var<span class=\"operator\">/</span>lib<span class=\"operator\">/</span>mysql<span class=\"operator\">/</span>mysql.sock</span><br></pre></td></tr></table></figure></li>\n</ul>\n<img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/1.png\" style=\"zoom:80%;\">\n\n<h1 id=\"进入-安装目录mysql-的-bin-目录下，初始化密码\"><a href=\"#进入-安装目录mysql-的-bin-目录下，初始化密码\" class=\"headerlink\" title=\"进入 安装目录mysql 的 bin 目录下，初始化密码\"></a>进入 安装目录mysql 的 bin 目录下，初始化密码</h1><ul>\n<li><blockquote>\n<p><strong>cd &#x2F;opt&#x2F;mysql&#x2F;bin</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>.&#x2F;mysqld –initialize –user&#x3D;mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><code>复制下方图片位置初始密码</code></p>\n<p><img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/2.png\"></p>\n<p><code>注意以上图片的密码为初始密码，等下要进入MySQL修改</code></p>\n<h1 id=\"复制-mysql-的服务项至-linux-的服务项目录中\"><a href=\"#复制-mysql-的服务项至-linux-的服务项目录中\" class=\"headerlink\" title=\"复制 mysql 的服务项至 linux 的服务项目录中\"></a>复制 mysql 的服务项至 linux 的服务项目录中</h1><p><code>mysql.server 位于 support-files 目录下</code></p>\n<ul>\n<li><blockquote>\n<p><strong>cd &#x2F;opt&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>cp support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld</strong></p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"设置mysql系统服务-开启开机自启动\"><a href=\"#设置mysql系统服务-开启开机自启动\" class=\"headerlink\" title=\"设置mysql系统服务 开启开机自启动\"></a>设置mysql系统服务 开启开机自启动</h1><ol>\n<li>进入系统服务文件修改 <code>vim /etc/init.d/mysqld</code> ，(这个位置为上面步骤复制创建的路径)  进入文件修改其 <code>basedir</code> 和 <code>datadir</code> 为实际对应⽬录：</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>basedir&#x3D;&#x2F;opt&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>设置MYSQL系统服务并开启⾃启</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>chmod +x &#x2F;etc&#x2F;init.d&#x2F;mysqld</strong>  —- 增加 mysqld 服务控制脚本执⾏权限</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>chkconfig –add mysqld</strong>  —- 将 mysqld 服务加⼊到系统服务</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"启动，登录-输入初始密码\"><a href=\"#启动，登录-输入初始密码\" class=\"headerlink\" title=\"启动，登录 输入初始密码\"></a>启动，登录 输入初始密码</h1><ul>\n<li><blockquote>\n<p><strong>service mysql start</strong>  —- 启动MySql服务</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mysql -uroot -p</strong>    —-  如果未设置全局变量  就<code>cd /opt/mysql/bin</code>   再次输入 mysql -uroot -p即可</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"成功进入MySQL后，修改mysql-默认的ROOT初始账户密x’x’x’x’x’x码\"><a href=\"#成功进入MySQL后，修改mysql-默认的ROOT初始账户密x’x’x’x’x’x码\" class=\"headerlink\" title=\"成功进入MySQL后，修改mysql 默认的ROOT初始账户密x’x’x’x’x’x码\"></a>成功进入MySQL后，修改mysql 默认的ROOT初始账户密x’x’x’x’x’x码</h1><ul>\n<li><blockquote>\n<p><strong>mysql&gt;alter user user() identified by “123456”;</strong> —-123456为修改后的密码</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"MySQL设置远程主机连接\"><a href=\"#MySQL设置远程主机连接\" class=\"headerlink\" title=\"MySQL设置远程主机连接\"></a>MySQL设置远程主机连接</h1><p>1. </p>\n<ul>\n<li><blockquote>\n<p><strong>mysql&gt;alter user user() identified by “123456”;</strong>  </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mysql&gt;flush privileges;</strong> —-刷新权限 使修改生效</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>mysql&gt;set password for “root”@”%” &#x3D; ‘123456’;</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>退出mysql</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>exit</strong></p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>systemctl stop firewalld.service</strong> —- 关闭防火墙</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"查看主机信息更改情况\"><a href=\"#查看主机信息更改情况\" class=\"headerlink\" title=\"查看主机信息更改情况\"></a>查看主机信息更改情况</h1><ul>\n<li><blockquote>\n<p><strong>mysql&gt; use mysql”;</strong> </p>\n</blockquote>\n</li>\n<li><blockquote>\n<p><strong>select user,host from user;”</strong></p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/2022/04/30/%E5%9C%A8Linux%E9%87%8C%E5%AE%89%E8%A3%85mysql/3.png\"><br>小提示：<br><code>Host列指定了允许用户登录所使用的IP，比如user=root Host=192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。而%是个通配符，如果Host=192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host=%，表示所有IP都有连接权限。</code></p>\n<h1 id=\"远程连接错误情况\"><a href=\"#远程连接错误情况\" class=\"headerlink\" title=\"远程连接错误情况\"></a>远程连接错误情况</h1><ol>\n<li>2002的话就是没有开机后没有开启 mysql系统服务，开启即可</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>&#x2F;etc&#x2F;init.d&#x2F;mysql start   或    server mysql start   开启服务”</strong></p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"2\">\n<li>1130 没有开远程连接</li>\n</ol>\n<ul>\n<li><blockquote>\n<p><strong>更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从“localhost”改成”%” “</strong></p>\n</blockquote>\n<hr>\n</li>\n</ul>\n<h1 id=\"防火墙的开启、关闭、禁用命令\"><a href=\"#防火墙的开启、关闭、禁用命令\" class=\"headerlink\" title=\"防火墙的开启、关闭、禁用命令\"></a>防火墙的开启、关闭、禁用命令</h1><p>（1）设置开机启用防火墙：<strong>systemctl enable firewalld.service</strong></p>\n<p>（2）设置开机禁用防火墙：<strong>systemctl disable firewalld.service</strong></p>\n<p>（3）启动防火墙：<strong>systemctl start firewalld</strong></p>\n<p>（4）关闭防火墙：<strong>systemctl stop firewalld</strong></p>\n<p>（5）检查防火墙状态：<strong>systemctl status firewalld</strong> </p>\n<p>（6）重启防火墙：<strong>systemctl restart firewalld.service</strong></p>\n<p>3306进行防火墙配置：<code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code></p>\n<p>开放3306端口：<code>-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</code></p>\n<p>查看开放端口：<code>firewall-cmd --list-ports</code></p>\n","categories":["Linux"],"tags":["在Linux里安装mysql"]},{"title":"小游戏","url":"/2022/05/05/%E5%B0%8F%E6%B8%B8%E6%88%8F/","content":"<h2 id=\"水果忍者：https-qxiaofei69-github-io-Fruit-ninja\"><a href=\"#水果忍者：https-qxiaofei69-github-io-Fruit-ninja\" class=\"headerlink\" title=\"水果忍者：https://qxiaofei69.github.io/Fruit-ninja/\"></a>水果忍者：<a href=\"https://qxiaofei69.github.io/Fruit-ninja/\">https://qxiaofei69.github.io/Fruit-ninja/</a></h2><iframe width=\"100%\" height=\"100%\" src=\"https://www.addictinggames.com/embed/html5-games/25079\" scrolling=\"no\"></iframe>\n\n<iframe src=\"https://www.crazygames.com/embed/forward-assault\" style=\"width: 100%; height: 100%;\" frameborder=\"0\"></iframe>\n","categories":["小游戏"]},{"title":"爬虫笔记","url":"/2022/04/03/%E7%88%AC%E8%99%AB/","content":"<h3 id=\"pip指令\"><a href=\"#pip指令\" class=\"headerlink\" title=\"pip指令:\"></a>pip指令:</h3><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pip install &lt;包名&gt; 安装指定的包</span><br><span class=\"line\">pip uninstall &lt;包名&gt; 删除指定的包</span><br><span class=\"line\">pip list 显示已安装的包</span><br><span class=\"line\">pip freeze 显示已经安装的包，并且以指定的格式显示</span><br></pre></td></tr></table></figure>\n<p>修改pip下载源：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install 包名 -i 国内源地址</span><br><span class=\"line\">豆瓣源：https://pypi.mirrors.ustc.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>常用请求头信息</p>\n<ul>\n<li>User-Agent: 请求载体的身份标识</li>\n<li>Connection: 请求完毕后，是断开连接还是不保持连接<h4 id=\"常用响应头信息\"><a href=\"#常用响应头信息\" class=\"headerlink\" title=\"常用响应头信息\"></a>常用响应头信息</h4></li>\n<li>Content-Tyoe:服务器响应回客户端的数据类型<h4 id=\"https协议：\"><a href=\"#https协议：\" class=\"headerlink\" title=\"https协议：\"></a>https协议：</h4></li>\n<li>安全的超文本传输协议<h4 id=\"加密方式\"><a href=\"#加密方式\" class=\"headerlink\" title=\"加密方式\"></a>加密方式</h4></li>\n<li>对称密钥加密</li>\n<li>非对称密钥加密</li>\n<li>证书密钥加密<br>request模块<h4 id=\"request模块：\"><a href=\"#request模块：\" class=\"headerlink\" title=\"request模块：\"></a>request模块：</h4>是python中原生的一款基于网络请求的模块。功能非常强大，，简单便捷效率极高<h4 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h4>模拟浏览器发出请求<br>如何使用：(requests模块编码流程)</li>\n<li>指定url</li>\n<li>发请求</li>\n<li>获取相应数据</li>\n<li>持久化存储<h4 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装:\"></a>环境安装:</h4><figure class=\"highlight cmd\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n<h4 id=\"实战编码：\"><a href=\"#实战编码：\" class=\"headerlink\" title=\"实战编码：\"></a>实战编码：</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://www.bilibili.com&quot;</span>  <span class=\"comment\"># 指定url</span></span><br><span class=\"line\">reponse = requests.get(url=url)  <span class=\"comment\"># 发起请求,get方法回返回一个响应对象</span></span><br><span class=\"line\">page_text = reponse.text  <span class=\"comment\"># 获取响应数据text饭hi i的是字符串形式的响应数据</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(page_text)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./bilibili.html&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;爬取数据结束！！!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n网页采集器：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&quot;https://www.sogou.com/web?&quot;</span></span><br><span class=\"line\">kw = <span class=\"built_in\">input</span>(<span class=\"string\">&quot;请输入：&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">param = &#123;  <span class=\"comment\"># 处理url携带参数</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;query&#x27;</span>: kw</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">#对指定的url发起的请求对应的url是携带参数的</span></span><br><span class=\"line\">response = requests.get(url=url,params=param,headers=headers)</span><br><span class=\"line\"></span><br><span class=\"line\">page_text = response.text</span><br><span class=\"line\">fileName = kw + <span class=\"string\">&#x27;.html&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> fp:</span><br><span class=\"line\">    fp.write(page_text)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fileName, <span class=\"string\">&#x27;保存成功！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>\n百度翻译：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;https://fanyi.baidu.com/sug&#x27;</span>  <span class=\"comment\"># 1.指定url</span></span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># 2.UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">word = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;请输入:&#x27;</span>)</span><br><span class=\"line\">data = &#123;  <span class=\"comment\"># 3.post请求参数处理(同get请求一致)  参数处理</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;kw&#x27;</span>: word</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">response = requests.post(url=post_url, data=data, headers=headers)  <span class=\"comment\"># 请求发送</span></span><br><span class=\"line\"><span class=\"comment\"># 5.获取响应数据对象：json()方法返回的是obj json类型</span></span><br><span class=\"line\">dic_obj = response.json()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fileName = word + <span class=\"string\">&#x27;.json&#x27;</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(fileName, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(dic_obj, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dic_obj)</span><br></pre></td></tr></table></figure>\n药监总局：<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 首页  http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\">#首页和页面的区别就是在后面加了id，所以先去爬取每个页面的id,存储起来，然后for循环post将结果存进list,然后再格式化存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">id_list = []  <span class=\"comment\"># 存储企业的id</span></span><br><span class=\"line\">all_data_list = []  <span class=\"comment\"># 存储所有的企业的id</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">20</span>):   <span class=\"comment\">#爬取前20页</span></span><br><span class=\"line\">    page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>: page,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27; &#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> zw <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:  <span class=\"comment\"># 批量获取ID，储存id</span></span><br><span class=\"line\">        id_list.append(zw[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:  <span class=\"comment\"># 把储存的id赋值给字典</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detial_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">    all_data_list.append(detial_json)  <span class=\"comment\"># 存进列表</span></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./zw,json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ovver!!!&#x27;</span>)<span class=\"comment\"># 首页  http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\"># 页面 http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</span></span><br><span class=\"line\"><span class=\"comment\">#首页和页面的区别就是在后面加了id，所以先去爬取每个页面的id,存储起来，然后for循环post将结果存进list,然后再格式化存储</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;  <span class=\"comment\"># UA伪装</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class=\"line\">id_list = []  <span class=\"comment\"># 存储企业的id</span></span><br><span class=\"line\">all_data_list = []  <span class=\"comment\"># 存储所有的企业的id</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">20</span>):   <span class=\"comment\">#爬取前20页</span></span><br><span class=\"line\">    page = <span class=\"built_in\">str</span>(page)</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;on&#x27;</span>: <span class=\"string\">&#x27;true&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>: page,</span><br><span class=\"line\">        <span class=\"string\">&#x27;pageSize&#x27;</span>: <span class=\"string\">&#x27;15&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;productName&#x27;</span>: <span class=\"string\">&#x27; &#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;conditionType&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applyname&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;applysn&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json_ids = requests.post(url=url, headers=headers, data=data).json()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> zw <span class=\"keyword\">in</span> json_ids[<span class=\"string\">&#x27;list&#x27;</span>]:  <span class=\"comment\"># 批量获取ID，储存id</span></span><br><span class=\"line\">        id_list.append(zw[<span class=\"string\">&#x27;ID&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取企业详情数据</span></span><br><span class=\"line\">post_url = <span class=\"string\">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">id</span> <span class=\"keyword\">in</span> id_list:  <span class=\"comment\"># 把储存的id赋值给字典</span></span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"built_in\">id</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    detial_json = requests.post(url=post_url, headers=headers, data=data).json()</span><br><span class=\"line\">    all_data_list.append(detial_json)  <span class=\"comment\"># 存进列表</span></span><br><span class=\"line\"><span class=\"comment\"># 持久化存储</span></span><br><span class=\"line\">fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./zw,json&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">json.dump(all_data_list, fp=fp, ensure_ascii=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ovver!!!&#x27;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Python"],"tags":["爬虫"]},{"title":"面向对象 上","url":"/2022/03/31/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8A/","content":"<h1 id=\"面向过程与面向对象-上\"><a href=\"#面向过程与面向对象-上\" class=\"headerlink\" title=\"面向过程与面向对象 上\"></a><center>面向过程与面向对象 上</center></h1><h3 id=\"面向过程与面向对象\"><a href=\"#面向过程与面向对象\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h3><ul>\n<li>二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，<font>强调的<br>是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对<br>象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。</font></li>\n<li>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如<br>抽象、分类、继承、聚合、多态等。<h3 id=\"面向过程-POP-与-面向对象-OOP\"><a href=\"#面向过程-POP-与-面向对象-OOP\" class=\"headerlink\" title=\"面向过程(POP) 与 面向对象(OOP)\"></a>面向过程(POP) 与 面向对象(OOP)</h3></li>\n<li>封装 (Encapsulation)</li>\n<li>继承 (Inheritance)</li>\n<li>多态 (Polymorphism)<h3 id=\"面向过程与面向对象-1\"><a href=\"#面向过程与面向对象-1\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h3><h4 id=\"面向过程\"><a href=\"#面向过程\" class=\"headerlink\" title=\"面向过程\"></a>面向过程</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 打开冰箱</span><br><span class=\"line\">2. 把大象装进冰箱</span><br><span class=\"line\">3. 把冰箱门关住</span><br></pre></td></tr></table></figure>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">人&#123;</span><br><span class=\"line\">    打开(冰箱)&#123;</span><br><span class=\"line\">        冰箱.开门();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    操作(大象)&#123;</span><br><span class=\"line\">        大象.进入(冰箱);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    关闭(冰箱)&#123;</span><br><span class=\"line\">        冰箱.关门();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">冰箱&#123;</span><br><span class=\"line\">    开门()&#123;&#125;</span><br><span class=\"line\">    关门()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">大象&#123;</span><br><span class=\"line\">    进入(冰箱)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"面向对象的思想概述\"><a href=\"#面向对象的思想概述\" class=\"headerlink\" title=\"面向对象的思想概述\"></a><center>面向对象的思想概述</center></h2></li>\n<li><h5 id=\"类-Class-和对象-Object-是面向对象的核心概念。\"><a href=\"#类-Class-和对象-Object-是面向对象的核心概念。\" class=\"headerlink\" title=\"类(Class)和对象(Object)是面向对象的核心概念。\"></a>类(Class)和对象(Object)是面向对象的核心概念。</h5></li>\n</ul>\n<ul>\n<li><blockquote>\n<p>类是对一类事物的描述，是抽象的、概念上的定义</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><h5 id=\"“万事万物皆对象”\"><a href=\"#“万事万物皆对象”\" class=\"headerlink\" title=\"“万事万物皆对象”\"></a>“万事万物皆对象”</h5></li>\n</ul>\n<ul>\n<li><blockquote>\n<p>可以理解为：类 &#x3D; 抽象概念的人；对象 &#x3D; 实实在在的某个人</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>面向对象程序设计的重点是类的设计</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>类的设计，其实就是类的成员的设计</p>\n</blockquote>\n<h2 id=\"面向对象的思想概述-1\"><a href=\"#面向对象的思想概述-1\" class=\"headerlink\" title=\"面向对象的思想概述\"></a><center>面向对象的思想概述</center></h2></li>\n</ul>\n<ul>\n<li>可以理解为：类 &#x3D; 抽象概念的人；对象 &#x3D; 实实在在的某个人</li>\n<li>面向对象程序设计的重点是类的设计</li>\n<li>类的设计，其实就是类的成员的设计</li>\n</ul>\n<h3 id=\"类的语法格式\"><a href=\"#类的语法格式\" class=\"headerlink\" title=\"类的语法格式\"></a><center>类的语法格式</center></h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">修饰符 class 类名&#123;</span><br><span class=\"line\">    属性声明;</span><br><span class=\"line\">    方法声明;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">说明：修饰符<span class=\"keyword\">public</span>:类可以被任意访问</span><br><span class=\"line\">    类的正文要用&#123; &#125;扩起来</span><br><span class=\"line\"></span><br><span class=\"line\">举例：</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;              <span class=\"comment\">//声明私有变量 age</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showAge</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123;   <span class=\"comment\">//声明方法showAge()</span></span><br><span class=\"line\">            age=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象的创建和使用\"><a href=\"#对象的创建和使用\" class=\"headerlink\" title=\"对象的创建和使用\"></a>对象的创建和使用</h3><ul>\n<li><blockquote>\n<p>创建对象语法： 类名 对象名 &#x3D; new 类名();</p>\n</blockquote>\n</li>\n<li><blockquote>\n<p>使用“对象名.对象成员”的方式访问对象成员（包括属性和方法）</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>说明：如果创建了一个类的多个对象，对于类中定义的属性，每个对象都拥有各自的一套副本，且互不干扰。</li>\n</ul>\n<br>\n空指针异常：就是调用  .参数 如果点之前的结构是不是null,如果是null意味着没指针，没有指针指下面的结构，就是空指针\n\n\n<h2 id=\"对象的创建和使用：匿名对象\"><a href=\"#对象的创建和使用：匿名对象\" class=\"headerlink\" title=\"对象的创建和使用：匿名对象\"></a>对象的创建和使用：匿名对象</h2><pre><code>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。如： new Person().shout();\n1.如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。\n2.我们经常将匿名对象作为实参传递给一个方法调用。\n</code></pre>\n<p>实际使用传入匿名对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">zhangshan</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        <span class=\"type\">zw</span> <span class=\"variable\">aa</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">zw</span>();</span><br><span class=\"line\">        aa.show(<span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>());    <span class=\"comment\">//创建匿名对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">zw</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">show</span><span class=\"params\">(Student Stu)</span>&#123;    <span class=\"comment\">//传入的时候是匿名对象</span></span><br><span class=\"line\">        Stu.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Java"],"tags":["面向对象"]},{"title":"面向过程：面向过程性能比面向对象高？？","url":"/2022/04/20/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%EF%BC%9A%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E6%80%A7%E8%83%BD%E6%AF%94%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E9%AB%98%EF%BC%9F%EF%BC%9F/","content":"<p>面向过程 ：面向过程性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux&#x2F;Unix等一般采用面向过程开发。</p>\n<p>—-》》<br>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。</p>\n<p>而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。</p>\n<p>引用：<a href=\"https://github.com/Snailclimb/JavaGuide/issues/431\">https://github.com/Snailclimb/JavaGuide/issues/431</a></p>\n","categories":["Java"],"tags":["面向过程"]}]